@using DataHandlerLibrary.Models
@using DataHandlerLibrary.Services
@using EposRetail.Services
@inject DepartmentServices DepartmentService
@inject ProductServices ProductService
@inject SalesItemTransactionServices SalesItemTransactionService
@inject DayLogServices DayLogService
@inject IServiceScopeFactory ServiceScopeFactory
@implements IDisposable

<!-- Modal -->
<div class="modal fade show d-block" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productDetailsModalLabel">@GetModalTitle()</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Filters and Search -->
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="departmentFilter" class="form-label">Department Filter:</label>
                        <select id="departmentFilter" class="form-select" value="@SelectedDepartmentId" @onchange="OnDepartmentFilterChanged">
                            <option value="0">All Departments</option>
                            @if (Departments != null)
                            {
                                @foreach (var dept in Departments)
                                {
                                    <option value="@dept.Department_ID">@dept.Department_Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="productSearch" class="form-label">Search Products:</label>
                        <input type="text" id="productSearch" class="form-control" placeholder="Search by product name..." @bind="SearchTerm" @oninput="OnSearchChanged" />
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button>
                    </div>
                </div>

                <!-- Loading Spinner -->
                @if (IsLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Refill Products Table -->
                    @if (ModalType == InventoryManagementType.Refill)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Product Name</th>
                                        <th>Price</th>
                                        <th>Refill Qty</th>
                                        <th>Shelf Qty</th>
                                        <th>Stock Room Qty</th>
                                        <th>Expiry Date</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (FilteredRefillProducts?.Any() == true)
                                    {
                                        @foreach (var product in FilteredRefillProducts)
                                        {
                                            <tr>
                                                <td>@product.Product.Product_Name</td>
                                                <td>£@product.Product.Product_Selling_Price.ToString("F2")</td>
                                                <td>@product.Refill_QTY</td>
                                                <td>@product.Product.ShelfQuantity</td>
                                                <td>@product.Product.StockroomQuantity</td>
                                                <td>@product.Product.Expiry_Date.ToString("dd/MM/yyyy")</td>
                                                <td>
                                                    <button class="btn btn-success btn-sm" @onclick="() => MarkAsRefilled(product)">
                                                        Mark Refilled
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="7" class="text-center">No products need refilling</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    <!-- Expiry Products Table -->
                    @if (ModalType == InventoryManagementType.Expiry)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Product Name</th>
                                        <th>Price</th>
                                        <th>Expiry Date</th>
                                        <th>Days Until Expiry</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (FilteredProducts?.Any() == true)
                                    {
                                        @foreach (var product in FilteredProducts)
                                        {
                                            <tr class="@GetExpiryRowClass(product)">
                                                <td>@product.Product_Name</td>
                                                <td>£@product.Product_Selling_Price.ToString("F2")</td>
                                                <td>@(product.Expiry_Date.ToString("dd/MM/yyyy") ?? "N/A")</td>
                                                <td>@CalculateDaysUntilExpiry(product)</td>
                                                <td>
                                                    <button class="btn btn-warning btn-sm me-2" @onclick="() => AddToPromotion(product.Product_ID)">
                                                        Add to Promotion
                                                    </button>
                                                    <button class="btn btn-danger btn-sm" @onclick="() => TransferToExpired(product.Product_ID)">
                                                        Mark as Expired
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center">No products expiring soon</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    <!-- Shortage Products Table -->
                    @if (ModalType == InventoryManagementType.Shortage)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Product Name</th>
                                        <th>Price</th>
                                        <th>Current Qty</th>
                                        <th>Units Needed</th>
                                        <th>Cases Needed</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (FilteredProducts?.Any() == true)
                                    {
                                        @foreach (var product in FilteredProducts)
                                        {
                                            <tr>
                                                <td>@product.Product_Name</td>
                                                <td>£@product.Product_Selling_Price.ToString("F2")</td>
                                                <td>@GetTotalQuantity(product)</td>
                                                <td>@CalculateUnitsNeeded(product)</td>
                                                <td>@CalculateCasesNeeded(product)</td>
                                                <td>
                                                    <button class="btn btn-primary btn-sm" @onclick="() => MarkAsOrdered(product.Product_ID)">
                                                        Mark as Ordered
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center">No products in shortage</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public InventoryManagementType ModalType { get; set; }
    [Parameter] public EventCallback OnDataChanged { get; set; }

    private List<ProductRefillDTO>? AllRefillProducts { get; set; }
    private List<ProductRefillDTO>? FilteredRefillProducts { get; set; }

    private List<Product>? AllProducts { get; set; }
    private List<Product>? FilteredProducts { get; set; }
    private List<Department>? Departments { get; set; }
    private List<SalesItemTransaction>? SalesData { get; set; }
    private DayLog? CurrentDayLog { get; set; }

    private int SelectedDepartmentId { get; set; } = 0;
    private string SearchTerm { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;

    private readonly SemaphoreSlim _semaphore = new SemaphoreSlim(1, 1);

    protected override async Task OnInitializedAsync()
    {
        // Initialize lists
        AllRefillProducts = new List<ProductRefillDTO>();
        FilteredRefillProducts = new List<ProductRefillDTO>();
        AllProducts = new List<Product>();
        FilteredProducts = new List<Product>();
        Departments = new List<Department>();
        // Load initial data
        await ShowModalAsync();
    }

    public async Task ShowModalAsync()
    {
        IsLoading = true;
        StateHasChanged();

        await LoadDataAsync();
        await FilterProductsAsync();

        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadDataAsync()
    {
        await _semaphore.WaitAsync();
        try
        {
            using var scope = ServiceScopeFactory.CreateScope();
            var productService = scope.ServiceProvider.GetRequiredService<ProductServices>();
            var departmentService = scope.ServiceProvider.GetRequiredService<DepartmentServices>();
            var dayLogService = scope.ServiceProvider.GetRequiredService<DayLogServices>();
            var salesService = scope.ServiceProvider.GetRequiredService<SalesItemTransactionServices>();

            // Load departments
            Departments = (await departmentService.GetAllAsync()).ToList();

            // Load current day log
            CurrentDayLog = await dayLogService.GetLastDayLog();

            // Load products based on modal type
            switch (ModalType)
            {
                case InventoryManagementType.Refill:
                    AllRefillProducts = await GetRefillProductsAsync();
                    break;
                case InventoryManagementType.Expiry:
                    AllProducts = await GetExpiryProductsAsync();
                    break;
                case InventoryManagementType.Shortage:
                    AllProducts = await GetShortageProductsAsync();
                    break;
            }
        }
        finally
        {
            _semaphore.Release();
        }
    }

    private async Task<List<ProductRefillDTO>> GetRefillProductsAsync()
    {
        var salesItems = await SalesItemTransactionService.GetByConditionAsync(
            s => s.Stock_Refilled == false, true

        );

        // Group sales items by product and sum the quantities
        var refillData = salesItems
            .Where(s => s.Product != null && s.Product.Is_activated == true)
            .GroupBy(s => s.Product_ID)
            .Select(g => new {
                Product = g.First().Product,
                TotalRefillQty = g.Sum(s => s.Product_QTY)
            })
            .Where(r => r.TotalRefillQty > 0)
            .ToList();

        // Create a list of products with refill quantities
        var refillProducts = new List<ProductRefillDTO>();
        foreach (var item in refillData)
        {
            ProductRefillDTO refillProduct = new ProductRefillDTO
            {
                Refill_QTY = item.TotalRefillQty,
                Product = item.Product,
                Is_Refill = false
            };
            // Store the refill quantity in a custom property or use existing logic
            // For now, we'll add all products that need refilling
            refillProducts.Add(refillProduct);
        }

        return refillProducts.OrderBy(p => p.Product.Product_Name).ToList();
    }

    private async Task<List<Product>> GetExpiryProductsAsync()
    {
        var expiryDate = DateTime.Now.AddDays(7);
        var products = await ProductService.GetByConditionAsync(
            p => p.Is_activated == true &&
                 p.Expiry_Date != default(DateTime) &&
                 p.Expiry_Date <= expiryDate, false
        );

        return products.OrderBy(p => p.Expiry_Date).ThenBy(p => p.Product_Name).ToList();
    }

    private async Task<List<Product>> GetShortageProductsAsync()
    {
        var products = await ProductService.GetByConditionAsync(p => p.Is_activated == true, false);
        var shortageProducts = new List<Product>();
        var thirtyDaysAgo = DateTime.Now.AddDays(-30);

        var salesData = await SalesItemTransactionService.GetByConditionAsync(
            s => s.SalesTransaction.Sale_Date >= thirtyDaysAgo, true
            
        );

        foreach (var product in products)
        {
            var productSales = salesData.Where(s => s.Product_ID == product.Product_ID).Sum(s => s.Product_QTY);
            var averageDailySales = productSales / 30.0;
            var totalStock = product.ShelfQuantity + product.StockroomQuantity;
            var daysOfStock = averageDailySales > 0 ? totalStock / averageDailySales : double.MaxValue;

            if (daysOfStock < 7 && averageDailySales > 0)
            {
                shortageProducts.Add(product);
            }
        }

        return shortageProducts.OrderBy(p => p.Product_Name).ToList();
    }

    private async Task FilterProductsAsync()
    {
        if (AllProducts == null)
        {
            FilteredProducts = new List<Product>();
            return;
        }

        var filtered = AllProducts.AsEnumerable();

        // Filter by department
        if (SelectedDepartmentId > 0)
        {
            filtered = filtered.Where(p => p.Department_ID == SelectedDepartmentId);
        }

        // Filter by search term
        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            filtered = filtered.Where(p => p.Product_Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));
        }

        FilteredProducts = filtered.ToList();
    }

    private async Task OnDepartmentFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int deptId))
        {
            SelectedDepartmentId = deptId;
            await FilterProductsAsync();
            StateHasChanged();
        }
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        await FilterProductsAsync();
        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        SelectedDepartmentId = 0;
        SearchTerm = string.Empty;
        await FilterProductsAsync();
        StateHasChanged();
    }


    private int CalculateDaysUntilExpiry(Product product)
    {
        return Math.Max(0, (product.Expiry_Date - DateTime.Now).Days);
    }

    private string GetExpiryRowClass(Product product)
    {
        var days = CalculateDaysUntilExpiry(product);
        return days <= 1 ? "table-danger" : days <= 3 ? "table-warning" : "";
    }

    private int CalculateRefillQuantity(Product product)
    {
        // Calculate how much needs to be moved from stockroom to shelf
        var maxShelfCapacity = product.Product_Min_Stock_Level > 0 ? product.Product_Min_Stock_Level : 50; // Default shelf capacity
        var currentShelfQty = product.ShelfQuantity;
        var availableStockroom = product.StockroomQuantity;
        
        var refillNeeded = Math.Max(0, maxShelfCapacity - currentShelfQty);
        return Math.Min(refillNeeded, availableStockroom);
    }

    private int GetTotalQuantity(Product product)
    {
        return product.ProductTotalQuantity;
    }

    private int CalculateUnitsNeeded(Product product)
    {
        // Calculate units needed to maintain minimum stock level
        var minStockLevel = product.Product_Min_Stock_Level > 0 ? product.Product_Min_Stock_Level : 7;
        var currentTotal = product.ProductTotalQuantity;
        return Math.Max(0, minStockLevel - currentTotal);
    }

    private int CalculateCasesNeeded(Product product)
    {
        var unitsNeeded = CalculateUnitsNeeded(product);
        var unitsPerCase = product.Product_Unit_Per_Case > 0 ? product.Product_Unit_Per_Case : 1;
        return (int)Math.Ceiling((double)unitsNeeded / unitsPerCase);
    }

    private string GetModalTitle()
    {
        return ModalType switch
        {
            InventoryManagementType.Refill => "Products Needing Refill",
            InventoryManagementType.Expiry => "Products Expiring Soon",
            InventoryManagementType.Shortage => "Products in Shortage",
            _ => "Product Details"
        };
    }

    // Action methods
    private async Task MarkAsRefilled(ProductRefillDTO refillProduct)
    {
       var product = FilteredRefillProducts?.FirstOrDefault(p => p.Product.Product_ID == refillProduct.Product.Product_ID);
        if (product != null)
        {
            product.Is_Refill = true;
            await ProductService.UpdateAsync(product.Product);
            await OnDataChanged.InvokeAsync();
        }

    }

    private async Task AddToPromotion(int productId)
    {
        // Implementation for adding product to promotion
        await OnDataChanged.InvokeAsync();
    }

    private async Task TransferToExpired(int productId)
    {
        // Implementation for transferring stock to expired
        await OnDataChanged.InvokeAsync();
    }

    private async Task MarkAsOrdered(int productId)
    {
        // Implementation for marking product as ordered
        await OnDataChanged.InvokeAsync();
    }

    public void Dispose()
    {
        _semaphore?.Dispose();
    }
}