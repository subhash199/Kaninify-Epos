@using DataHandlerLibrary.Models
@using DataHandlerLibrary.Services
@using EposRetail.Services
@using EntityFrameworkDatabaseLibrary.Data
@inject DepartmentServices DepartmentService
@inject ProductServices ProductService
@inject SalesItemTransactionServices SalesItemTransactionService
@inject DayLogServices DayLogService
@inject IServiceScopeFactory ServiceScopeFactory
@inject StockRefillServices StockRefillService
@inject UserSessionService UserSessionService
@implements IDisposable

<!-- Modal -->
<div class="modal fade show d-block" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productDetailsModalLabel">@GetModalTitle()</h5>
                <button type="button" class="btn-close" @onclick="Modalclose" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Filters and Search -->
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="departmentFilter" class="form-label">Department Filter:</label>
                        <select id="departmentFilter" class="form-select" value="@SelectedDepartmentId" @onchange="OnDepartmentFilterChanged">
                            <option value="0">All Departments</option>
                            @if (FilteredDepartments != null)
                            {
                                @foreach (var dept in FilteredDepartments)
                                {
                                    <option value="@dept.Department_ID">@dept.Department_Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="productSearch" class="form-label">Search Products:</label>
                        <input type="text" id="productSearch" class="form-control" placeholder="Search by product name..." @bind="SearchTerm" @oninput="OnSearchChanged" />
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button>
                    </div>
                </div>

                <!-- Loading Spinner -->
                @if (IsLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Refill Products Table -->
                    @if (ModalType == InventoryManagementType.Refill)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Product Name</th>
                                        <th>Price</th>
                                        <th>Refill Qty</th>
                                        <th>Shelf Qty</th>
                                        <th>Stock Room Qty</th>
                                        <th>Expiry Date</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (FilteredRefillProducts?.Any() == true)
                                    {
                                        @foreach (var product in FilteredRefillProducts)
                                        {
                                            <tr @ondblclick="() => OpenProductModal(product.Product)" style="cursor: pointer;">
                                                <td>@product.Product.Product_Name</td>
                                                <td>£@product.Product.Product_Selling_Price.ToString("F2")</td>
                                                <td>@product.Refill_QTY</td>
                                                <td>@product.Product.ShelfQuantity</td>
                                                <td>@product.Product.StockroomQuantity</td>
                                                <td>@product.Product.Expiry_Date.ToString("dd/MM/yyyy")</td>
                                                <td>
                                                    <button class="btn btn-success btn-sm" @onclick="() => MarkAsRefilled(product)" @onclick:stopPropagation="true">
                                                        @((product.Is_Refill ? "Refilled" : "Mark Refilled"))
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="7" class="text-center">No products need refilling</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    <!-- Expiry Products Table -->
                    @if (ModalType == InventoryManagementType.Expiry)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Product Name</th>
                                        <th>Price</th>
                                        <th>Expire Qty</th>
                                        <th>Expiry Date</th>
                                        <th>Days Until Expiry</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (FilteredProducts?.Any() == true)
                                    {
                                        @foreach (var product in FilteredProducts)
                                        {
                                            <tr class="@GetExpiryRowClass(product)" @ondblclick="() => OpenProductModal(product)" style="cursor: pointer;">
                                                <td>@product.Product_Name</td>
                                                <td>£@product.Product_Selling_Price.ToString("F2")</td>
                                                <td>@product.ProductTotalQuantity</td>
                                                <td>@(product.Expiry_Date.ToString("dd/MM/yyyy") ?? "N/A")</td>
                                                <td>@CalculateDaysUntilExpiry(product)</td>
                                                <td>
                                                    @*  <button class="btn btn-warning btn-sm me-2" @onclick="() => AddToPromotion(product.Product_ID)" @onclick:stopPropagation="true">
                                                        Add to Promotion
                                                    </button> *@
                                                    <button class="btn btn-danger btn-sm" @onclick="() => TransferToExpired(product)" @onclick:stopPropagation="true">
                                                        Mark as Expired
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center">No products expiring soon</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    <!-- Shortage Products Table -->
                    @if (ModalType == InventoryManagementType.Shortage)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Product Name</th>
                                        <th>Price</th>
                                        <th>Current Qty</th>
                                        <th>Units Needed</th>
                                        <th>Cases Needed</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (FilteredProducts?.Any() == true)
                                    {
                                        @foreach (var product in FilteredProducts)
                                        {
                                            <tr @ondblclick="() => OpenProductModal(product)" style="cursor: pointer;">
                                                <td>@product.Product_Name</td>
                                                <td>£@product.Product_Selling_Price.ToString("F2")</td>
                                                <td>@GetTotalQuantity(product)</td>
                                                <td>@CalculateUnitsNeeded(product)</td>
                                                <td>@CalculateCasesNeeded(product)</td>
                                                <td>
                                                    <button class="btn btn-primary btn-sm" @onclick="() => MarkAsOrdered(product.Product_ID)" @onclick:stopPropagation="true">
                                                        Mark as Ordered
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center">No products in shortage</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Modalclose">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Product Modal -->
@if (IsProductModalVisible)
{
    <ProductModal IsVisible="@IsProductModalVisible"
                  Title="Edit Product"
                  Product="@SelectedProduct"
                  OnSave="@OnProductSaved"
                  OnClose="@CloseProductModal" />
}



@code {
    [Parameter] public InventoryManagementType ModalType { get; set; }
    [Parameter] public EventCallback<InventoryManagementType> OnDataChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    List<StockRefill> stockRefillItems = new List<StockRefill>();


    List<StockTransaction> expiredStockTransactions = new List<StockTransaction>();
    List<Product> expiredProducts = new List<Product>();

    private List<ProductRefillDTO>? AllRefillProducts { get; set; }
    private List<ProductRefillDTO>? FilteredRefillProducts { get; set; }

    private List<Product>? AllProducts { get; set; }
    private List<Product>? FilteredProducts { get; set; }
    private List<Department>? AllDepartments { get; set; }
    private List<Department> FilteredDepartments { get; set; } = new List<Department>();
    private List<SalesItemTransaction>? SalesData { get; set; }
    private DayLog? CurrentDayLog { get; set; }

    private int SelectedDepartmentId { get; set; } = 0;
    private string SearchTerm { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;
    private bool IsDataChanged { get; set; } = false;
    private bool IsProductModalVisible { get; set; } = false;
    private Product? SelectedProduct { get; set; }

    private readonly SemaphoreSlim _semaphore = new SemaphoreSlim(1, 1);

    protected override async Task OnInitializedAsync()
    {
        // Initialize lists
        AllRefillProducts = new List<ProductRefillDTO>();
        FilteredRefillProducts = new List<ProductRefillDTO>();
        AllProducts = new List<Product>();
        FilteredProducts = new List<Product>();
        AllDepartments = new List<Department>();
        FilteredDepartments = new List<Department>();
        // Load initial data
        await ShowModalAsync();
    }

    public async Task ShowModalAsync()
    {
        IsLoading = true;
        StateHasChanged();

        await LoadDataAsync();
        await FilterProductsAsync();

        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadDataAsync()
    {
        await _semaphore.WaitAsync();
        try
        {
            using var scope = ServiceScopeFactory.CreateScope();
            var productService = scope.ServiceProvider.GetRequiredService<ProductServices>();
            var departmentService = scope.ServiceProvider.GetRequiredService<DepartmentServices>();
            var dayLogService = scope.ServiceProvider.GetRequiredService<DayLogServices>();
            var salesService = scope.ServiceProvider.GetRequiredService<SalesItemTransactionServices>();

            // Load departments
            AllDepartments = (await departmentService.GetAllAsync(false)).ToList();

            // Load current day log
            CurrentDayLog = await dayLogService.GetLastDayLog();

            // Load products based on modal type
            switch (ModalType)
            {
                case InventoryManagementType.Refill:
                    AllRefillProducts = await GetRefillProductsAsync();
                    break;
                case InventoryManagementType.Expiry:
                    AllProducts = await GetExpiryProductsAsync();
                    break;
                case InventoryManagementType.Shortage:
                    AllProducts = await GetShortageProductsAsync();
                    break;
            }
        }
        finally
        {
            _semaphore.Release();
        }
    }


    private async Task<List<ProductRefillDTO>> GetRefillProductsAsync()
    {
        // Get pending stock refills using StockRefillServices
        var pendingRefills = (await StockRefillService.GetPendingRefillsAsync()).ToList();
        if (pendingRefills.Count == 0)
        {
            return new List<ProductRefillDTO>();
        }

        stockRefillItems.AddRange(pendingRefills);

        // Group refills by product and sum the quantities
        var refillData = pendingRefills
            .Where(sr => sr.SalesItemTransaction?.Product != null &&
                         sr.SalesItemTransaction.Product.Is_activated == true)
            .GroupBy(sr => sr.SalesItemTransaction.Product_ID)
            .Select(g => new
            {
                Product = g.First().SalesItemTransaction.Product,
                TotalRefillQty = g.Sum(sr => sr.Remaining_Quantity), // Use remaining quantity from StockRefill
                StockRefills = g.ToList() // Keep reference to stock refill records
            })
            .Where(r => r.TotalRefillQty > 0)
            .ToList();

        // Create a list of products with refill quantities
        var refillProducts = new List<ProductRefillDTO>();
        foreach (var item in refillData)
        {
            ProductRefillDTO refillProduct = new ProductRefillDTO
            {
                Refill_QTY = item.TotalRefillQty,
                Product = item.Product,
                Is_Refill = false
            };
            refillProducts.Add(refillProduct);
        }

        // Get the list of department IDs from the refillData
        var refillDepartmentIds = refillData.Select(r => r.Product.Department_ID).Distinct().ToList();
        // Filter AllDepartments to only those present in the refillDepartmentIds
        FilteredDepartments = AllDepartments
            ?.Where(d => refillDepartmentIds.Contains(d.Department_ID))
            .ToList() ?? new List<Department>();

        return refillProducts.OrderBy(p => p.Product.Product_Name).ToList();
    }

    private async Task<List<Product>> GetExpiryProductsAsync()
    {
        var expiryDate = DateTime.UtcNow.AddDays(7);
        var products = await ProductService.GetByConditionAsync(
            p => p.Is_activated == true &&
                 p.Expiry_Date <= expiryDate &&
                 (p.ShelfQuantity > 0 || p.StockroomQuantity > 0), false
        );

        return products.OrderBy(p => p.Expiry_Date).ThenBy(p => p.Product_Name).ToList();
    }

    private async Task<List<Product>> GetShortageProductsAsync()
    {
        var products = await ProductService.GetByConditionAsync(p => p.Is_activated == true, false);
        var shortageProducts = new List<Product>();
        var thirtyDaysAgo = DateTime.UtcNow.AddDays(-30);

        var salesData = await SalesItemTransactionService.GetByConditionAsync(
            s => s.SalesTransaction.Sale_Date >= thirtyDaysAgo, true

        );

        foreach (var product in products)
        {
            var productSales = salesData.Where(s => s.Product_ID == product.Product_ID).Sum(s => s.Product_QTY);
            var averageDailySales = productSales / 30.0;
            var totalStock = product.ShelfQuantity + product.StockroomQuantity;
            var daysOfStock = averageDailySales > 0 ? totalStock / averageDailySales : double.MaxValue;

            if (daysOfStock < 7 && averageDailySales > 0)
            {
                shortageProducts.Add(product);
            }
        }

        return shortageProducts.OrderBy(p => p.Product_Name).ToList();
    }

    private async Task FilterProductsAsync()
    {
        switch (ModalType)
        {
            case InventoryManagementType.Refill:
                if (SelectedDepartmentId > 0)
                {
                    FilteredRefillProducts = AllRefillProducts?
                    .Where(p => p.Product.Is_activated == true && (p.Product?.Department?.Stock_Refill_Print ?? true) && p.Product?.Department_ID == SelectedDepartmentId)
                    .OrderBy(p => p.Product.Product_Name)
                    .ToList() ?? new List<ProductRefillDTO>();
                }
                else if (!string.IsNullOrWhiteSpace(SearchTerm))
                {
                    FilteredRefillProducts = AllRefillProducts?
                    .Where(p => p.Product.Is_activated == true && (p.Product?.Department?.Stock_Refill_Print ?? true) && (p.Product?.Product_Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                    .OrderBy(p => p.Product.Product_Name)
                    .ToList() ?? new List<ProductRefillDTO>();
                }
                else
                {
                    FilteredRefillProducts = AllRefillProducts?
                    .Where(p => p.Product.Is_activated == true && (p.Product?.Department?.Stock_Refill_Print ?? true))
                    .OrderBy(p => p.Product.Product_Name)
                    .ToList() ?? new List<ProductRefillDTO>();
                }
                break;

            case InventoryManagementType.Expiry:
            case InventoryManagementType.Shortage:
                // Ensure AllProducts is not null before filtering
                if (AllProducts == null)
                {
                    FilteredProducts = new List<Product>();
                    return;
                }

                var filtered = AllProducts.AsEnumerable();

                // Filter by department
                if (SelectedDepartmentId > 0)
                {
                    filtered = filtered.Where(p => p.Department_ID == SelectedDepartmentId);
                }

                // Filter by search term
                if (!string.IsNullOrWhiteSpace(SearchTerm))
                {
                    filtered = filtered.Where(p => p.Product_Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));
                }

                FilteredProducts = filtered.ToList();
                break;
        }
       
    }

    private async Task OnDepartmentFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int deptId))
        {
            SelectedDepartmentId = deptId;
            await FilterProductsAsync();
            StateHasChanged();
        }
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        await FilterProductsAsync();
        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        SelectedDepartmentId = 0;
        SearchTerm = string.Empty;
        await FilterProductsAsync();
        StateHasChanged();
    }


    private int CalculateDaysUntilExpiry(Product product)
    {
        return Math.Max(0, (product.Expiry_Date - DateTime.UtcNow).Days);
    }

    private string GetExpiryRowClass(Product product)
    {
        var days = CalculateDaysUntilExpiry(product);
        return days <= 1 ? "table-danger" : days <= 3 ? "table-warning" : "";
    }

    private int CalculateRefillQuantity(Product product)
    {
        // Calculate how much needs to be moved from stockroom to shelf
        var maxShelfCapacity = product.Product_Min_Stock_Level > 0 ? product.Product_Min_Stock_Level : 50; // Default shelf capacity
        var currentShelfQty = product.ShelfQuantity;
        var availableStockroom = product.StockroomQuantity;

        var refillNeeded = Math.Max(0, maxShelfCapacity - currentShelfQty);
        return Math.Min(refillNeeded, availableStockroom);
    }

    private int GetTotalQuantity(Product product)
    {
        return product.ProductTotalQuantity;
    }

    private int CalculateUnitsNeeded(Product product)
    {
        // Calculate units needed to maintain minimum stock level
        var minStockLevel = product.Product_Min_Stock_Level > 0 ? product.Product_Min_Stock_Level : 7;
        var currentTotal = product.ProductTotalQuantity;
        return Math.Max(0, minStockLevel - currentTotal);
    }

    private int CalculateCasesNeeded(Product product)
    {
        var unitsNeeded = CalculateUnitsNeeded(product);
        var unitsPerCase = product.Product_Unit_Per_Case > 0 ? product.Product_Unit_Per_Case : 1;
        return (int)Math.Ceiling((double)unitsNeeded / unitsPerCase);
    }

    private string GetModalTitle()
    {
        return ModalType switch
        {
            InventoryManagementType.Refill => "Products Needing Refill",
            InventoryManagementType.Expiry => "Products Expiring Soon",
            InventoryManagementType.Shortage => "Products in Shortage",
            _ => "Product Details"
        };
    }

    // Action methods
    private async Task MarkAsRefilled(ProductRefillDTO refillProduct)
    {
        var product = AllRefillProducts?.FirstOrDefault(p => p.Product.Product_ID == refillProduct.Product.Product_ID);
        if (product != null)
        {
            product.Is_Refill = true;
            IsDataChanged = true;
            StateHasChanged();
        }

    }

    @* private async Task AddToPromotion(int productId)
    {
        // Implementation for adding product to promotion
        IsDataChanged = true;
    } *@

    private async Task TransferToExpired(Product product)
    {
        try
        {

            if (product == null) return;

            // Check if already marked as expired
            if (expiredProducts.Any(p => p.Product_ID == product.Product_ID)) return;

            // Calculate total quantity to transfer (shelf + stockroom)
            var totalQuantity = product.ShelfQuantity + product.StockroomQuantity;
            if (totalQuantity <= 0)
            {
                await AddProductToExpired(product);
                await RemoveProductFromFillteredProducts(product);
                return;
            }

            // Calculate total amount (quantity * cost)
            var totalAmount = totalQuantity * product.Product_Cost;

            // Create new StockTransaction record (to be saved later)
            var stockTransaction = new StockTransaction
            {
                StockTransactionType = StockTransferType.Expired,
                ProductId = product.Product_ID,
                Quantity = totalQuantity,
                TotalAmount = totalAmount,
                DayLogId = CurrentDayLog?.DayLog_Id ?? 1,
                TransactionDate = DateTime.UtcNow,
                DateCreated = DateTime.UtcNow,
                LastModified = DateTime.UtcNow,
                Shift_Id = 1, // You may need to get the current shift ID
                Created_By_Id = 1, // You may need to get the current user ID
                Last_Modified_By_Id = 1, // You may need to get the current user ID
                From_Site_Id = null, // Set if transferring from a specific site
                To_Site_Id = null, // Set if transferring to a specific site
                Till_Id = null // Set if associated with a specific till
            };

            // Add to pending lists (will be saved when modal closes)
            expiredStockTransactions.Add(stockTransaction);

            await AddProductToExpired(product);
            await RemoveProductFromFillteredProducts(product);



        }
        catch (Exception ex)
        {
            // Handle error appropriately - you might want to show a message to the user
            Console.WriteLine($"Error preparing product for expiry transfer: {ex.Message}");
        }
    }

    private async Task AddProductToExpired(Product product)
    {
        // Update product quantities to 0 (since it's expired)
        product.ShelfQuantity = 0;
        product.StockroomQuantity = 0;
        expiredProducts.Add(product);
    }

    private async Task RemoveProductFromFillteredProducts(Product product)
    {
        // Remove from current filtered list to show immediate UI feedback
        if (FilteredProducts != null)
        {
            var productToRemove = FilteredProducts.FirstOrDefault(p => p.Product_ID == product.Product_ID);
            if (productToRemove != null)
            {
                FilteredProducts.Remove(productToRemove);
            }
        }
        IsDataChanged = true;
        StateHasChanged();
    }

    private async Task MarkAsOrdered(int productId)
    {
        // Implementation for marking product as ordered
        IsDataChanged = true;
    }

    public void Dispose()
    {
        _semaphore?.Dispose();
    }
    private async Task Modalclose(MouseEventArgs args)
    {
        try
        {
            switch (ModalType)
            {
                case InventoryManagementType.Refill:
                    if (IsDataChanged)
                    {
                        await UpdateRefilledSalesItems();
                        await OnDataChanged.InvokeAsync(ModalType);
                        await OnClose.InvokeAsync();
                    }
                    break;
                case InventoryManagementType.Expiry:
                    if (IsDataChanged && (expiredStockTransactions.Any() || expiredProducts.Any()))
                    {
                        await UpdateExpiredProducts();
                        await OnDataChanged.InvokeAsync(ModalType);
                    }
                    break;
                case InventoryManagementType.Shortage:
                default:
                    break;
            }
        }
        catch (Exception ex)
        {
            int i = 0;
        }

        OnClose.InvokeAsync();
    }

    private async Task UpdateRefilledSalesItems()
    {
        // Update sales items that have been marked as refilled
        var refilledItems = AllRefillProducts?.Where(s => s.Is_Refill == true && s.Product != null && s.Product.Is_activated == true).ToList();
        if (refilledItems?.Count > 0)
        {
            foreach (var item in stockRefillItems)
            {
                if (refilledItems.Any(r => r.Product.Product_ID == item.SalesItemTransaction.Product_ID && r.Is_Refill))
                {
                    item.Stock_Refilled = true;
                    item.Refilled_By = UserSessionService.GetCurrentUserId();
                    item.Refilled_Date = DateTime.UtcNow;
                    item.Quantity_Refilled = item.Refill_Quantity;
                }
            }
            await StockRefillService.UpdateRangeAsync(stockRefillItems);
            IsDataChanged = false;
            stockRefillItems.Clear();

        }

    }

    private async Task UpdateExpiredProducts()
    {
        try
        {
            using var scope = ServiceScopeFactory.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<DatabaseInitialization>();

            // Add all expired stock transactions to the database
            if (expiredStockTransactions.Any())
            {
                dbContext.StockTransactions.AddRange(expiredStockTransactions);
            }

            // Update all expired products
            if (expiredProducts.Any())
            {
                await ProductService.BulkUpdateAsync(expiredProducts);
            }

            // Save all changes in a single transaction
            await dbContext.SaveChangesAsync();

            // Clear the lists after successful save
            expiredStockTransactions.Clear();
            expiredProducts.Clear();
            IsDataChanged = false;
        }
        catch (Exception ex)
        {
            // Handle error appropriately - you might want to show a message to the user
            Console.WriteLine($"Error updating expired products: {ex.Message}");
        }
    }

    private async Task OpenProductModal(Product product)
    {
        // Create a copy of the product to avoid modifying the original
        SelectedProduct = new Product
        {
            Product_ID = product.Product_ID,
            Product_Name = product.Product_Name,
            Product_Barcode = product.Product_Barcode,
            Product_Description = product.Product_Description,
            Product_Case_Barcode = product.Product_Case_Barcode,
            Product_Selling_Price = product.Product_Selling_Price,
            Product_Cost = product.Product_Cost,
            Product_Cost_Per_Case = product.Product_Cost_Per_Case,
            Product_Unit_Per_Case = product.Product_Unit_Per_Case,
            ShelfQuantity = product.ShelfQuantity,
            StockroomQuantity = product.StockroomQuantity,
            Department_ID = product.Department_ID,
            VAT_ID = product.VAT_ID,
            Expiry_Date = product.Expiry_Date,
            Profit_On_Return_Percentage = product.Profit_On_Return_Percentage,
            Product_Size = product.Product_Size,
            Product_Measurement = product.Product_Measurement,
            Brand_Name = product.Brand_Name,
            Product_Min_Order = product.Product_Min_Order,
            Product_Low_Stock_Alert_QTY = product.Product_Low_Stock_Alert_QTY,
            Product_Min_Stock_Level = product.Product_Min_Stock_Level,
            Print_To_Second_Printer = product.Print_To_Second_Printer,
            Is_activated = product.Is_activated,
            Is_deleted = product.Is_deleted,
            Allow_Discount = product.Allow_Discount,
            Date_Created = product.Date_Created,
            Last_Modified = product.Last_Modified,
            Created_By_Id = product.Created_By_Id,
            Last_Modified_By_Id = product.Last_Modified_By_Id,
            Site_Id = product.Site_Id,
            Till_Id = product.Till_Id
        };

        IsProductModalVisible = true;
        StateHasChanged();
    }

    private async Task OnProductSaved(Product savedProduct)
    {
        try
        {
            // Update the product in existing collections instead of refetching all data
            UpdateProductInCollections(savedProduct);

            // Re-filter products to reflect any changes that might affect filtering
            await FilterProductsAsync();

            IsDataChanged = true;
            CloseProductModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error after saving product: {ex.Message}");
        }
    }

    private void UpdateProductInCollections(Product savedProduct)
    {
        // Update in AllProducts collection
        var existingProduct = AllProducts?.FirstOrDefault(p => p.Product_ID == savedProduct.Product_ID);
        if (existingProduct != null)
        {
            // Update all properties
            existingProduct.Product_Name = savedProduct.Product_Name;
            existingProduct.Product_Barcode = savedProduct.Product_Barcode;
            existingProduct.Product_Description = savedProduct.Product_Description;
            existingProduct.Product_Case_Barcode = savedProduct.Product_Case_Barcode;
            existingProduct.Product_Selling_Price = savedProduct.Product_Selling_Price;
            existingProduct.Product_Cost = savedProduct.Product_Cost;
            existingProduct.Product_Cost_Per_Case = savedProduct.Product_Cost_Per_Case;
            existingProduct.Product_Unit_Per_Case = savedProduct.Product_Unit_Per_Case;
            existingProduct.ShelfQuantity = savedProduct.ShelfQuantity;
            existingProduct.StockroomQuantity = savedProduct.StockroomQuantity;
            existingProduct.Department_ID = savedProduct.Department_ID;
            existingProduct.VAT_ID = savedProduct.VAT_ID;
            existingProduct.Expiry_Date = savedProduct.Expiry_Date;
            existingProduct.Profit_On_Return_Percentage = savedProduct.Profit_On_Return_Percentage;
            existingProduct.Product_Size = savedProduct.Product_Size;
            existingProduct.Product_Measurement = savedProduct.Product_Measurement;
            existingProduct.Brand_Name = savedProduct.Brand_Name;
            existingProduct.Product_Min_Order = savedProduct.Product_Min_Order;
            existingProduct.Product_Low_Stock_Alert_QTY = savedProduct.Product_Low_Stock_Alert_QTY;
            existingProduct.Product_Min_Stock_Level = savedProduct.Product_Min_Stock_Level;
            existingProduct.Print_To_Second_Printer = savedProduct.Print_To_Second_Printer;
            existingProduct.Is_activated = savedProduct.Is_activated;
            existingProduct.Is_deleted = savedProduct.Is_deleted;
            existingProduct.Allow_Discount = savedProduct.Allow_Discount;
            existingProduct.Last_Modified = savedProduct.Last_Modified;
            existingProduct.Last_Modified_By_Id = savedProduct.Last_Modified_By_Id;
        }

        // Update in AllRefillProducts collection if it exists
        var existingRefillProduct = AllRefillProducts?.FirstOrDefault(rp => rp.Product.Product_ID == savedProduct.Product_ID);
        if (existingRefillProduct != null)
        {
            // Update the product reference in the refill DTO
            UpdateProductInCollections_Helper(existingRefillProduct.Product, savedProduct);
        }
    }

    private void UpdateProductInCollections_Helper(Product target, Product source)
    {
        target.Product_Name = source.Product_Name;
        target.Product_Barcode = source.Product_Barcode;
        target.Product_Description = source.Product_Description;
        target.Product_Case_Barcode = source.Product_Case_Barcode;
        target.Product_Selling_Price = source.Product_Selling_Price;
        target.Product_Cost = source.Product_Cost;
        target.Product_Cost_Per_Case = source.Product_Cost_Per_Case;
        target.Product_Unit_Per_Case = source.Product_Unit_Per_Case;
        target.ShelfQuantity = source.ShelfQuantity;
        target.StockroomQuantity = source.StockroomQuantity;
        target.Department_ID = source.Department_ID;
        target.VAT_ID = source.VAT_ID;
        target.Expiry_Date = source.Expiry_Date;
        target.Profit_On_Return_Percentage = source.Profit_On_Return_Percentage;
        target.Product_Size = source.Product_Size;
        target.Product_Measurement = source.Product_Measurement;
        target.Brand_Name = source.Brand_Name;
        target.Product_Min_Order = source.Product_Min_Order;
        target.Product_Low_Stock_Alert_QTY = source.Product_Low_Stock_Alert_QTY;
        target.Product_Min_Stock_Level = source.Product_Min_Stock_Level;
        target.Print_To_Second_Printer = source.Print_To_Second_Printer;
        target.Is_activated = source.Is_activated;
        target.Is_deleted = source.Is_deleted;
        target.Allow_Discount = source.Allow_Discount;
        target.Last_Modified = source.Last_Modified;
        target.Last_Modified_By_Id = source.Last_Modified_By_Id;
    }

    private void CloseProductModal()
    {
        IsProductModalVisible = false;
        SelectedProduct = null;
        StateHasChanged();
    }
}