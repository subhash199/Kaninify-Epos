@using EntityFrameworkDatabaseLibrary.Models
@using DataHandlerLibrary.Services
@inject IJSRuntime JSRuntime
@inject UserManagementServices UserManagementServices
@inject UserSiteAccessServices UserSiteAccessServices

@if (IsVisible && SelectedSite != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-users me-2"></i>
                        Manage Users - @SelectedSite.Site_BusinessName
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (IsLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading users...</p>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-12">
                                <p class="text-muted mb-3">
                                    Grant or revoke access for users to this site. Users with active access are shown first.
                                </p>
                                
                                @if (!string.IsNullOrEmpty(ErrorMessage))
                                {
                                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        @ErrorMessage
                                        <button type="button" class="btn-close" @onclick="() => ErrorMessage = string.Empty"></button>
                                    </div>
                                }
                                
                                @if (!string.IsNullOrEmpty(SuccessMessage))
                                {
                                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                                        <i class="fas fa-check-circle me-2"></i>
                                        @SuccessMessage
                                        <button type="button" class="btn-close" @onclick="() => SuccessMessage = string.Empty"></button>
                                    </div>
                                }
                                
                                @if (AllUsers.Any())
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead class="table-dark">
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Admin</th>
                                                    <th>Status</th>
                                                    <th>Access Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var user in AllUsers)
                                                {
                                                    var hasAccess = HasSiteAccess(user);
                                                    <tr class="@(hasAccess ? "table-success" : "")">
                                                        <td>
                                                            <strong>@user.First_Name @user.Last_Name</strong>
                                                            @if (user.Primary_Site_Id == SelectedSite.Site_Id)
                                                            {
                                                                <span class="badge bg-primary ms-2">Primary Site</span>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (user.Admin_User)
                                                            {
                                                                <span class="badge bg-warning">Admin</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-secondary">User</span>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (user.Is_Activated)
                                                            {
                                                                <span class="badge bg-success">Active</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-danger">Inactive</span>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (hasAccess)
                                                            {
                                                                <span class="badge bg-success">
                                                                    <i class="fas fa-check me-1"></i>Has Access
                                                                </span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-secondary">
                                                                    <i class="fas fa-times me-1"></i>No Access
                                                                </span>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (hasAccess)
                                                            {
                                                                <button class="btn btn-sm btn-danger" 
                                                                        @onclick="() => RevokeSiteAccess(user)"
                                                                        disabled="@(!user.Is_Activated || IsProcessing)">
                                                                    @if (IsProcessing)
                                                                    {
                                                                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="fas fa-user-times me-1"></i>
                                                                    }
                                                                    Revoke
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-sm btn-success" 
                                                                        @onclick="() => GrantSiteAccess(user)"
                                                                        disabled="@(!user.Is_Activated || IsProcessing)">
                                                                    @if (IsProcessing)
                                                                    {
                                                                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="fas fa-user-plus me-1"></i>
                                                                    }
                                                                    Grant
                                                                </button>
                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle me-2"></i>
                                        No users found.
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal" disabled="@IsProcessing">
                        <i class="fas fa-times me-1"></i>Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public Site? SelectedSite { get; set; }
    [Parameter] public EventCallback OnModalClosed { get; set; }
    [Parameter] public int CurrentUserId { get; set; } = 1; // You might want to pass the actual current user ID
    
    private List<PosUser> AllUsers = new List<PosUser>();
    private List<UserSiteAccess> CurrentSiteAccesses = new List<UserSiteAccess>();
    private bool IsLoading = false;
    private bool IsProcessing = false;
    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && SelectedSite != null)
        {
            await LoadUsersAndAccesses();
        }
    }
    
    private async Task LoadUsersAndAccesses()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;
            StateHasChanged();
            
            // Load all users
            AllUsers = (await UserManagementServices.GetAllUsersAsync()).ToList();
            
            // Load current site accesses for this site
            CurrentSiteAccesses = (await UserSiteAccessServices.GetBySiteIdAsync(SelectedSite.Site_Id)).ToList();
            
            // Order users: first by whether they have access to this site (active users first), then alphabetically
            AllUsers = AllUsers
                .OrderByDescending(u => CurrentSiteAccesses.Any(sa => sa.User_Id == u.User_ID && sa.Is_Active))
                .ThenBy(u => u.First_Name)
                .ThenBy(u => u.Last_Name)
                .ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading users: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task GrantSiteAccess(PosUser user)
    {
        try
        {
            IsProcessing = true;
            ErrorMessage = string.Empty;
            SuccessMessage = string.Empty;
            StateHasChanged();
            
            var newAccess = new UserSiteAccess
            {
                User_Id = user.User_ID,
                Site_Id = SelectedSite.Site_Id,
                Is_Active = true,
                Date_Created = DateTime.Now,
                Date_Granted = DateTime.Now,
                Last_Modified = DateTime.Now,
                Created_By_Id = CurrentUserId,
                Last_Modified_By_Id = CurrentUserId
            };
            
            await UserSiteAccessServices.UpsertAsync(newAccess);
            
            // Refresh the current site accesses
            CurrentSiteAccesses = (await UserSiteAccessServices.GetBySiteIdAsync(SelectedSite.Site_Id)).ToList();
            
            SuccessMessage = $"Access granted to {user.First_Name} {user.Last_Name}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error granting access: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }
    
    private async Task RevokeSiteAccess(PosUser user)
    {
        try
        {
            IsProcessing = true;
            ErrorMessage = string.Empty;
            SuccessMessage = string.Empty;
            StateHasChanged();
            
            var existingAccess = CurrentSiteAccesses.FirstOrDefault(sa => sa.User_Id == user.User_ID && sa.Is_Active);
            if (existingAccess != null)
            {
                existingAccess.Is_Active = false;
                existingAccess.Last_Modified = DateTime.Now;
                existingAccess.Last_Modified_By_Id = CurrentUserId;
                
                await UserSiteAccessServices.UpdateAsync(existingAccess);
                
                // Refresh the current site accesses
                CurrentSiteAccesses = (await UserSiteAccessServices.GetBySiteIdAsync(SelectedSite.Site_Id)).ToList();
                
                SuccessMessage = $"Access revoked from {user.First_Name} {user.Last_Name}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error revoking access: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }
    
    private bool HasSiteAccess(PosUser user)
    {
        return CurrentSiteAccesses.Any(sa => sa.User_Id == user.User_ID && sa.Is_Active);
    }
    
    private async Task CloseModal()
    {
        IsVisible = false;
        AllUsers.Clear();
        CurrentSiteAccesses.Clear();
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        IsLoading = false;
        IsProcessing = false;
        await OnModalClosed.InvokeAsync();
    }
}