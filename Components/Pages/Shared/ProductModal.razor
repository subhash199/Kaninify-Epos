@using EntityFrameworkDatabaseLibrary.Models
@inject DataHandlerLibrary.Services.ProductServices productServices
@inject DataHandlerLibrary.Services.DepartmentServices departmentServices
@inject DataHandlerLibrary.Services.VatServices vatServices
@inject IJSRuntime JSRuntime

<div class="modal @(IsVisible ? "show d-block" : "d-none")" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="mb-3 row">
                    <label class="col-sm-4 col-form-label">Product Barcode:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" @bind="Product.Product_Barcode">
                    </div>
                </div>
                <div class="mb-3 row">
                    <label class="col-sm-4 col-form-label">Product Name:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" @bind="Product.Product_Name">
                    </div>
                </div>
                <div class="mb-3 row">
                    <label class="col-sm-4 col-form-label">Selling Price:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control"
                               value="@Product.Product_Selling_Price"
                               @oninput="OnSellingPriceInput" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <label class="col-sm-4 col-form-label">Expiry Date:</label>
                    <div class="col-sm-8">
                        <input type="date" class="form-control" @bind="Product.Expiry_Date" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <label class="col-sm-4 col-form-label">Department:</label>
                    <div class="col-sm-8">
                        <select class="form-select" @bind="SelectedDepartmentId">
                            <option value="0">-- Select Department --</option>

                            @foreach (var dept in Departments)
                            {
                                <option value="@dept.Department_ID">@dept.Department_Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="mb-3 row">
                    <label class="col-sm-4 col-form-label">VAT:</label>
                    <div class="col-sm-8">
                        <select class="form-select" @bind="SelectedVatId">
                            <option value="0">-- Select VAT --</option>
                            @foreach (var vat in VatRates)
                            {
                                <option value="@vat.VAT_ID">@vat.VAT_Value.ToString("F2")</option>
                            }
                        </select>
                    </div>
                </div>


            </div>
            <div class="d-flex justify-content-center">
                <div class="mb-3">
                    <button class="btn btn-link p-0" type="button" @onclick="ToggleOptional">
                        @(ShowOptional ? "Hide Optional Details" : "Show Optional Details")
                    </button>
                </div>
            </div>


            @if (ShowOptional)
            {

                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Product Description:</label>
                    <div class="col-sm-8">
                        <textarea class="form-control" @bind="Product.Product_Description"></textarea>
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Case Barcode:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" @bind="Product.Product_Case_Barcode">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Shelf Quantity:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" @bind="Product.ShelfQuantity">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Stockroom Quantity:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" @bind="Product.StockroomQuantity">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Cost:</label>
                    <div class="col-sm-8">
                        <input type="number" step="0.01" class="form-control" @bind="Product.Product_Cost">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Cost Per Case:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control"
                               value="@Product.Product_Cost_Per_Case"
                               @oninput="OnCostPerCaseInput" />
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Unit Per Case:</label>
                    <div class="col-sm-8">

                        <input type="number" class="form-control"
                               value="@Product.Product_Unit_Per_Case"
                               @oninput="OnUnitPerCaseInput" />
                    </div>
                </div>

                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Profit %:</label>
                    <div class="col-sm-8">
                        <input type="number" step="0.01" class="form-control" @bind="Product.Profit_On_Return_Percentage">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Product Size:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" @bind="Product.Product_Size">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Measurement:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" @bind="Product.Product_Measurement">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Brand Name:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" @bind="Product.Brand_Name">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Min Order:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" @bind="Product.Product_Min_Order">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Low Stock Alert QTY:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" @bind="Product.Product_Low_Stock_Alert_QTY">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Min Stock Level:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" @bind="Product.Product_Min_Stock_Level">
                    </div>
                </div>

                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Print To Second Printer:</label>
                    <div class="col-sm-8">
                        <input type="checkbox" class="form-check-input" @bind="Product.Print_To_Second_Printer">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Activated:</label>
                    <div class="col-sm-8">
                        <input type="checkbox" class="form-check-input" @bind="Product.Is_activated">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Delete:</label>
                    <div class="col-sm-8">
                        <input type="checkbox" class="form-check-input" @bind="Product.Is_deleted">
                    </div>
                </div>
                <div class="m-2 row">
                    <label class="col-sm-4 col-form-label">Allow Discount:</label>
                    <div class="col-sm-8">
                        <input type="checkbox" class="form-check-input" @bind="Product.Allow_Discount">
                    </div>
                </div>

            }


            <div class="modal-footer">

                <button type="button" class="btn btn-secondary" @onclick="CloseModal">@SecondaryButtonText</button>

                <button type="button" class="btn btn-primary" @onclick="SaveChanges">@PrimaryButtonText</button>

            </div>
        </div>
    </div>

</div>


@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public string Title { get; set; } = "Product Details";

    [Parameter]
    public Product Product { get; set; }

    private Product UnchangedProduct { get; set; }

    [Parameter]
    public string PrimaryButtonText { get; set; } = "Save";

    [Parameter]
    public string SecondaryButtonText { get; set; } = "Cancel";

    [Parameter]
    public EventCallback<Product> OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private List<Department> Departments = new List<Department>();
    private List<Vat> VatRates = new List<Vat>();

    private bool _isRecalculating = false;

    private void OnSellingPriceInput(ChangeEventArgs e)
    {
        if (Product == null) return;
        var input = e.Value?.ToString() ?? "";
        Product.Product_Selling_Price = ValidateInputValue(input);
        RecalculateCostAndProfit();
    }

    private void OnCostPerCaseInput(ChangeEventArgs e)
    {
        if (Product == null) return;
        var input = e.Value?.ToString() ?? "";
        Product.Product_Cost_Per_Case = ValidateInputValue(input);
        RecalculateCostAndProfit();
    }

    private void OnUnitPerCaseInput(ChangeEventArgs e)
    {
        if (Product == null) return;
        var input = e.Value?.ToString() ?? "";
        if (int.TryParse(input, out var units))
        {
            Product.Product_Unit_Per_Case = units;
            RecalculateCostAndProfit();
        }
    }

    private void RecalculateCostAndProfit()
    {
        if (_isRecalculating || Product == null) return;
        _isRecalculating = true;

        try
        {
            // Calculate cost per unit
            if (Product.Product_Unit_Per_Case > 0 && Product.Product_Cost_Per_Case > 0)
                Product.Product_Cost = Product.Product_Cost_Per_Case / Product.Product_Unit_Per_Case;
            else
                Product.Product_Cost = 0;

            // Calculate profit percentage
            if (Product.Product_Cost > 0)
                Product.Profit_On_Return_Percentage = ((Product.Product_Selling_Price - Product.Product_Cost) / Product.Product_Cost) * 100;
            else
                Product.Profit_On_Return_Percentage = 0;
        }
        finally
        {
            _isRecalculating = false;
        }
    }

    private decimal ValidateInputValue(string input)
    {
        // Remove non-digits
        var digits = new string(input.Where(char.IsDigit).ToArray());
        if (string.IsNullOrEmpty(digits))
        {
            return 0;
        }
        // Parse as cents and move decimal
        if (long.TryParse(digits, out var cents))
        {
            return (cents / 100.0m);
        }
        return 0;
    }

    private int SelectedDepartmentId
    {
        get => Product?.Department_ID ?? 0;
        set
        {
            if (Product != null)
                Product.Department_ID = value;
        }
    }

    private int SelectedVatId
    {
        get => Product?.VAT_ID ?? 0;
        set
        {
            if (Product != null)
                Product.VAT_ID = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartmentsAndVat();
    }

    protected override async Task OnParametersSetAsync()
    {
        UnchangedProduct = Product;
    }

    private async Task LoadDepartmentsAndVat()
    {
        Departments = (await departmentServices.GetAllAsync(false)).OrderBy(d => d.Department_Name).ToList();
        VatRates = (await vatServices.GetAllAsync(false)).OrderBy(v => v.VAT_Value).ToList();
    }

    private async Task SaveChanges()
    {
        try
        {
            string error = await productServices.ValidateAsync(Product);
            if (!string.IsNullOrEmpty(error))
            {
                JSRuntime.InvokeVoidAsync("alert", error);
                return;
            }
           
            Product.Department_ID = Product.Department_ID ==0 ? (await departmentServices.GetDefaultDepartment()).Department_ID : Product.Department_ID;
            Product.VAT_ID = Product.VAT_ID == 0 ? (await vatServices.GetDefaultVatAsync()).VAT_ID : 1;

            if (Product.Product_ID == 0) // If it's a new product
            {
                // Remove any explicit ID assignment for new products
                Product.Is_activated = true;
                Product.Last_Modified = DateTime.UtcNow;
                await productServices.AddAsync(Product);
            }
            else // If it's an existing product
            {
                Product.Last_Modified = DateTime.UtcNow;
                await productServices.UpdateAsync(Product);
            }

            await OnSave.InvokeAsync(Product);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving product: {ex.Message}");
            return;
        }
    }


    private bool ShowOptional { get; set; } = false;

    private void ToggleOptional()
    {
        ShowOptional = !ShowOptional;
    }

    private async Task CloseModal()
    {
        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync();
    }
}