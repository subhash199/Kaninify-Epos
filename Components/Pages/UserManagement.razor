@page "/"
@using EntityFrameworkDatabaseLibrary.Models
@using DataHandlerLibrary.Services
@using EposRetail.Components.Pages.Shared.Modal
@inject UserManagementServices UserManagementServices
@inject IJSRuntime JSRuntime

<PageTitle>User Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Navigation Tabs -->
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs" id="managementTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "users" ? "active" : "")"
                                    @onclick="SetUsersTab"
                                    type="button" role="tab">
                                <i class="fas fa-users me-2"></i>Users
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "roles" ? "active" : "")"
                                    @onclick="SetRolesTab"
                                    type="button" role="tab">
                                <i class="fas fa-user-tag me-2"></i>Roles
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "sites" ? "active" : "")"
                                    @onclick="SetSitesTab"
                                    type="button" role="tab">
                                <i class="fas fa-building me-2"></i>Sites
                            </button>
                        </li>
                    </ul>
                </div>

                <!-- Tab Content -->
                <div class="tab-content">
                    <!-- Users Tab -->
                    @if (activeTab == "users")
                    {
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h3 class="mb-0">User Management</h3>
                                <button class="btn btn-primary" @onclick="ShowCreateUserModal">
                                    <i class="fas fa-plus"></i> Add New User
                                </button>
                            </div>

                            <!-- Search and Filter Section -->
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="text" class="form-control" placeholder="Search users..."
                                               @bind="searchTerm" @bind:event="oninput" @bind:after="FilterUsers" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" @bind="selectedRoleFilter" @bind:after="FilterUsers">
                                        <option value="">All Roles</option>
                                        @if (roles != null)
                                        {
                                            @foreach (var role in roles)
                                            {
                                                <option value="@role.Role_ID">@role.Role_Name</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" @bind="selectedSiteFilter" @bind:after="FilterUsers">
                                        <option value="">All Sites</option>
                                        @if (sites != null)
                                        {
                                            @foreach (var site in sites)
                                            {
                                                <option value="@site.Site_Id">@site.Site_BusinessName</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" @bind="selectedStatusFilter" @bind:after="FilterUsers">
                                        <option value="">All Status</option>
                                        <option value="active">Active</option>
                                        <option value="inactive">Inactive</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Users Table -->
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Name</th>
                                            <th>Role</th>
                                            <th>Primary Site</th>
                                            <th>Additional Sites</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (filteredUsers != null && filteredUsers.Any())
                                        {
                                            @foreach (var user in filteredUsers)
                                            {
                                                <tr>
                                                    <td>@($"{user.First_Name} {user.Last_Name}")</td>
                                                    <td>
                                                        <span class="badge bg-info">@user.UserRole?.Role_Name</span>
                                                    </td>
                                                    <td>@user.PrimarySite?.Site_BusinessName @user.PrimarySite?.Site_AddressLine1</td>
                                                    <td>
                                                        @if (user.SiteAccesses?.Any(sa => sa.Is_Active && sa.Site_Id != user.Primary_Site_Id) == true)
                                                        {
                                                            <span class="badge bg-secondary me-1">@user.SiteAccesses.Count(sa => sa.Is_Active && sa.Site_Id != user.Primary_Site_Id)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">None</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (user.Is_Activated && !user.Is_Deleted)
                                                        {
                                                            <span class="badge bg-success">Active</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger">Inactive</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div class="btn-group" role="group">
                                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewUserDetails(user)">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => EditUser(user)">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                            <button class="btn btn-sm btn-outline-info" @onclick="() => ManageSiteAccess(user)">
                                                                <i class="fas fa-building"></i>
                                                            </button>
                                                            @if (user.Is_Activated)
                                                            {
                                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeactivateUser(user)">
                                                                    <i class="fas fa-user-slash"></i>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-sm btn-outline-success" @onclick="() => ReactivateUser(user)">
                                                                    <i class="fas fa-user-check"></i>
                                                                </button>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="6" class="text-center text-muted">No users found</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }

                    <!-- Roles Tab -->
                    @if (activeTab == "roles")
                    {
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h3 class="mb-0">Role Management</h3>
                                <button class="btn btn-primary" @onclick="ShowCreateRoleModal">
                                    <i class="fas fa-plus"></i> Add New Role
                                </button>
                            </div>

                            <!-- Roles Search -->
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="text" class="form-control" placeholder="Search roles..."
                                               @bind="roleSearchTerm" @bind:event="oninput" @bind:after="FilterRoles" />
                                    </div>
                                </div>
                            </div>

                            <!-- Roles Table -->
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Role Name</th>
                                            <th>Description</th>
                                            <th>Users Count</th>
                                            <th>Created Date</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (filteredRoles != null && filteredRoles.Any())
                                        {
                                            @foreach (var role in filteredRoles)
                                            {
                                                <tr>
                                                    <td>
                                                        <strong>@role.Role_Name</strong>
                                                    </td>
                                                    <td>@role.Role_Description</td>
                                                    <td>
                                                        <span class="badge bg-info">@GetUserCountForRole(role.Role_ID)</span>
                                                    </td>
                                                    <td>@role?.Date_Created.ToString("MMM dd, yyyy")</td>
                                                    <td>
                                                        <div class="btn-group" role="group">
                                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => EditRole(role)">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteRole(role)"
                                                                    disabled="@(GetUserCountForRole(role.Role_ID) > 0)">
                                                                <i class="fas fa-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="5" class="text-center text-muted">No roles found</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }

                    <!-- Sites Tab -->
                    @if (activeTab == "sites")
                    {
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h3 class="mb-0">Site Management</h3>
                                <button class="btn btn-primary" @onclick="ShowCreateSiteModal">
                                    <i class="fas fa-plus"></i> Add New Site
                                </button>
                            </div>

                            <!-- Sites Search -->
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="text" class="form-control" placeholder="Search sites..."
                                               @bind="siteSearchTerm" @bind:event="oninput" @bind:after="FilterSites" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" @bind="selectedSiteStatusFilter" @bind:after="FilterSites">
                                        <option value="">All Status</option>
                                        <option value="active">Active</option>
                                        <option value="inactive">Inactive</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Sites Table -->
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Business Name</th>
                                            <th>Address</th>
                                            <th>Contact</th>
                                            <th>Users Count</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (filteredSites != null && filteredSites.Any())
                                        {
                                            @foreach (var site in filteredSites)
                                            {
                                                <tr>
                                                    <td>
                                                        <strong>@site.Site_BusinessName</strong>
                                                    </td>
                                                    <td>
                                                        @site.Site_AddressLine1<br />
                                                        @if (!string.IsNullOrEmpty(site.Site_AddressLine2))
                                                        {
                                                            @site.Site_AddressLine2

                                                            <br />
                                                        }
                                                        @site.Site_City, @site.Site_Postcode
                                                    </td>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(site.Site_ContactNumber))
                                                        {
                                                            <div><i class="fas fa-phone"></i> @site.Site_ContactNumber</div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(site.Site_Email))
                                                        {
                                                            <div><i class="fas fa-envelope"></i> @site.Site_Email</div>
                                                        }
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-info">@GetUserCountForSite(site.Site_Id)</span>
                                                    </td>
                                                    <td>
                                                        @if (site.Is_Active)
                                                        {
                                                            <span class="badge bg-success">Active</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger">Inactive</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div class="btn-group" role="group">
                                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewSiteDetails(site)">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => EditSite(site)">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                            <button class="btn btn-sm btn-outline-info" @onclick="() => ManageSiteUsers(site)">
                                                                <i class="fas fa-users"></i>
                                                            </button>
                                                            @if (site.Is_Active)
                                                            {
                                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeactivateSite(site.Site_Id)">
                                                                    <i class="fas fa-pause"></i>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-sm btn-outline-success" @onclick="() => ActivateSite(site.Site_Id)">
                                                                    <i class="fas fa-play"></i>
                                                                </button>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="6" class="text-center text-muted">No sites found</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Role Modal -->
@if (showRoleModal)
{
    <UserRoleModal @bind-IsVisible="showRoleModal"
                   UserRoleToEdit="currentRole"
                   OnUserRoleSaved="HandleUserRoleSaved"
                   OnUserRoleDeleted="HandleUserRoleDeleted" />
}

<!-- Create/Edit Site Modal -->
@if (showSiteModal)
{
    <SiteModal @bind-IsVisible="showSiteModal"
               SiteToEdit="currentSite"
               OnSiteSaved="HandleSiteSaved"
               OnSiteDeleted="HandleSiteDeleted" />
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this @deleteItemType?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showUserModal)
{
    <!-- Modal Component -->
    <UserModal CurrentUser="currentUser"
               AvailableRoles="availableRoles"
               AvailableSites="availableSites"
               OnUserSaved="HandleUserSaved"
               OnModalClosed="OnUserModalClose"/>
}

@code {
    private void SetUsersTab() => SetActiveTab("users");
    private void SetRolesTab() => SetActiveTab("roles");
    private void SetSitesTab() => SetActiveTab("sites");
    // New properties for role and site management
    private string activeTab = "users";

    //User management
    private bool showUserModal = false;
    private PosUser currentUser = new();


    // Role management
    private List<UserRole> availableRoles = new();
    private List<UserRole> filteredRoles = new();
    private UserRole currentRole = new();
    private bool showRoleModal = false;
    private bool isEditingRole = false;
    private string roleSearchTerm = string.Empty;

    // Site management
    private List<Site> availableSites = new();
    private List<Site> filteredSites = new();
    private Site currentSite = new();
    private bool showSiteModal = false;
    private bool isEditingSite = false;
    private string siteSearchTerm = string.Empty;
    private string selectedSiteStatusFilter = string.Empty;

    // Delete confirmation
    private bool showDeleteModal = false;
    private string deleteItemType = string.Empty;
    private object itemToDelete;

    // Tab management
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    // Role Management Methods
    private void ShowCreateRoleModal()
    {
        currentRole = new UserRole { Is_Active = true, Date_Created = DateTime.Now };
        isEditingRole = false;
        showRoleModal = true;
    }

    private void EditRole(UserRole role)
    {
        currentRole = new UserRole
        {
            Role_ID = role.Role_ID,
            Role_Name = role.Role_Name,
            Role_Description = role.Role_Description,
            Is_Active = role.Is_Active,
            Date_Created = role.Date_Created
        };
        isEditingRole = true;
        showRoleModal = true;
    }

    private void CloseRoleModal()
    {
        showRoleModal = false;
        currentRole = new UserRole();
    }

    private async Task SaveRole()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(currentRole.Role_Name))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Role name is required.");
                return;
            }

            if (isEditingRole)
            {
                await UserManagementServices.UpdateRoleAsync(currentRole);
                await JSRuntime.InvokeVoidAsync("alert", "Role updated successfully!");
            }
            else
            {
                await UserManagementServices.CreateRoleAsync(currentRole);
                await JSRuntime.InvokeVoidAsync("alert", "Role created successfully!");
            }

            CloseRoleModal();
            await LoadRoles();
            FilterRoles();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving role: {ex.Message}");
        }
    }

    private void DeleteRole(UserRole role)
    {
        if (GetUserCountForRole(role.Role_ID) > 0)
        {
            JSRuntime.InvokeVoidAsync("alert", "Cannot delete role that has assigned users.");
            return;
        }

        deleteItemType = "role";
        itemToDelete = role;
        showDeleteModal = true;
    }

    private void FilterRoles()
    {
        if (roles == null) return;

        filteredRoles = roles.Where(r =>
            string.IsNullOrEmpty(roleSearchTerm) ||
            r.Role_Name.Contains(roleSearchTerm, StringComparison.OrdinalIgnoreCase) ||
            (r.Role_Description?.Contains(roleSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
        ).ToList();

        StateHasChanged();
    }

    // Site Management Methods
    private void ShowCreateSiteModal()
    {
        currentSite = new Site { Is_Active = true, Date_Created = DateTime.Now };
        isEditingSite = false;
        showSiteModal = true;
    }

    private void EditSite(Site site)
    {
        currentSite = new Site
        {
            Site_Id = site.Site_Id,
            Site_BusinessName = site.Site_BusinessName,
            Site_AddressLine1 = site.Site_AddressLine1,
            Site_AddressLine2 = site.Site_AddressLine2,
            Site_City = site.Site_City,
            Site_Postcode = site.Site_Postcode,
            Site_ContactNumber = site.Site_ContactNumber,
            Site_Email = site.Site_Email,
            Is_Active = site.Is_Active,
            Date_Created = site.Date_Created
        };
        isEditingSite = true;
        showSiteModal = true;
    }

    private void CloseSiteModal()
    {
        showSiteModal = false;
        currentSite = new Site();
    }

    private async Task SaveSite()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(currentSite.Site_BusinessName) ||
                string.IsNullOrWhiteSpace(currentSite.Site_AddressLine1) ||
                string.IsNullOrWhiteSpace(currentSite.Site_City) ||
                string.IsNullOrWhiteSpace(currentSite.Site_Postcode))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please fill in all required fields.");
                return;
            }

            if (isEditingSite)
            {
                await UserManagementServices.UpdateSiteAsync(currentSite);
                await JSRuntime.InvokeVoidAsync("alert", "Site updated successfully!");
            }
            else
            {
                await UserManagementServices.CreateSiteAsync(currentSite);
                await JSRuntime.InvokeVoidAsync("alert", "Site created successfully!");
            }

            CloseSiteModal();
            await LoadSites();
            FilterSites();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving site: {ex.Message}");
        }
    }

    private void FilterSites()
    {
        if (sites == null) return;

        var filtered = sites.AsEnumerable();

        if (!string.IsNullOrEmpty(siteSearchTerm))
        {
            filtered = filtered.Where(s =>
                s.Site_BusinessName.Contains(siteSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Site_AddressLine1.Contains(siteSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                (s.Site_City?.Contains(siteSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }

        if (!string.IsNullOrEmpty(selectedSiteStatusFilter))
        {
            bool isActive = selectedSiteStatusFilter == "active";
            filtered = filtered.Where(s => s.Is_Active == isActive);
        }

        filteredSites = filtered.ToList();
        StateHasChanged();
    }

    // Helper Methods
    private int GetUserCountForRole(int roleId)
    {
        return users?.Count(u => u.Role_ID == roleId && !u.Is_Deleted) ?? 0;
    }

    private int GetUserCountForSite(int siteId)
    {
        return users?.Count(u => u.Primary_Site_Id == siteId && !u.Is_Deleted) ?? 0;
    }

    // Delete confirmation
    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        itemToDelete = null;
        deleteItemType = string.Empty;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (deleteItemType == "role" && itemToDelete is UserRole role)
            {
                await UserManagementServices.DeleteRoleAsync(role.Role_ID);
                await LoadRoles();
                FilterRoles();
                await JSRuntime.InvokeVoidAsync("alert", "Role deleted successfully!");
            }

            CloseDeleteModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting {deleteItemType}: {ex.Message}");
        }
    }

    // Load data methods (add these to your existing OnInitializedAsync)
    private async Task LoadRoles()
    {
        try
        {
            roles = await UserManagementServices.GetAllRolesAsync();
            FilterRoles();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading roles: {ex.Message}");
        }
    }

    private async Task LoadSites()
    {
        try
        {
            sites = await UserManagementServices.GetAllSitesAsync();
            FilterSites();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading sites: {ex.Message}");
        }
    }

    // Update your existing OnInitializedAsync to include:
    protected override async Task OnInitializedAsync()
    {
        SetUsersTab();
        SetRolesTab();
        SetSitesTab();
        await LoadRoles();
        await LoadSites();
    }

    // Add these missing variables:
    private string searchTerm = string.Empty;
    private string selectedRoleFilter = string.Empty;
    private string selectedSiteFilter = string.Empty;
    private string selectedStatusFilter = string.Empty;

    // User management
    private List<PosUser> users = new();
    private List<PosUser> filteredUsers = new();
    private List<UserRole> roles = new();
    private List<Site> sites = new();

    private void FilterUsers()
    {
        filteredUsers = users.Where(u =>
            (string.IsNullOrEmpty(searchTerm) ||

             u.First_Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Last_Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        ).ToList();
        StateHasChanged();
    }

    private void ShowCreateUserModal()
    {
        showUserModal = true;

        // Implement user creation modal logic
        // This method is referenced in your UI but missing
    }

    // Add these missing user management methods:
    private void ViewUserDetails(PosUser user)
    {
        // Implement user details view logic
        // You can show a modal or navigate to a details page
    }

    private void EditUser(PosUser user)
    {
        // Implement user editing logic
        // Set up currentUser and show edit modal
    }

    private void ManageSiteAccess(PosUser user)
    {
        // Implement site access management logic
        // Show modal for managing user's site permissions
    }

    private void DeactivateUser(PosUser user)
    {
        // Implement user deactivation logic
        user.Is_Activated = false;
        // Call service to update user status
    }

    private void ReactivateUser(PosUser user)
    {
        // Implement user reactivation logic
        user.Is_Activated = true;
        // Call service to update user status
    }
    private void HandleUserSaved(PosUser user)
    {
        // Handle user saved event from UserModal
        showUserModal = false;
        // Optionally refresh user list

    }

    // Site Management Methods
    private void HandleSiteSaved(Site site)
    {

    }

    private void HandleSiteDeleted()
    {

    }

    //User Role Management Methods

    private void ViewSiteDetails(Site site)
    {
        // Implement site details view
        JSRuntime.InvokeVoidAsync("alert", $"View details for {site.Site_BusinessName}");
    }

    private void ManageSiteUsers(Site site)
    {
        // Implement site users management
        JSRuntime.InvokeVoidAsync("alert", $"Manage users for {site.Site_BusinessName}");
    }

    private void HandleUserRoleSaved(UserRole role)
    {

    }
    private void HandleUserRoleDeleted()
    {

    }

    private async Task ActivateSite(int siteId)
    {
        try
        {
            await UserManagementServices.ActivateSiteAsync(siteId);
            await LoadSites();
            FilterSites();
            await JSRuntime.InvokeVoidAsync("alert", "Site activated successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error activating site: {ex.Message}");
        }
    }

    private async Task DeactivateSite(int siteId)
    {
        try
        {
            await UserManagementServices.DeactivateSiteAsync(siteId);
            await LoadSites();
            FilterSites();
            await JSRuntime.InvokeVoidAsync("alert", "Site deactivated successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deactivating site: {ex.Message}");
        }
    }
    private void OnUserModalClose()
    {
        showUserModal = false;
        currentUser = new PosUser();
        // Optionally refresh user list
        FilterUsers();
    }

}