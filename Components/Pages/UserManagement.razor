@page "/usermanagement"
@using DataHandlerLibrary.Models
@using EntityFrameworkDatabaseLibrary.Models
@using DataHandlerLibrary.Services
@using EposRetail.Components.Pages.Shared.Modal
@inject UserManagementServices UserManagementServices
@inject UserSiteAccessServices UserSiteAccessServices
@inject SiteServices SiteServices
@inject IJSRuntime JSRuntime

<PageTitle>User Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Navigation Tabs -->
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs" id="managementTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "users" ? "active" : "")"
                                    @onclick="SetUsersTab"
                                    type="button" role="tab">
                                <i class="fas fa-users me-2"></i>Users
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeTab == "sites" ? "active" : "")"
                                    @onclick="SetSitesTab"
                                    type="button" role="tab">
                                <i class="fas fa-building me-2"></i>Sites
                            </button>
                        </li>
                    </ul>
                </div>

                <!-- Tab Content -->
                <div class="tab-content">
                    <!-- Users Tab -->
                    @if (activeTab == "users")
                    {
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h3 class="mb-0">User Management</h3>
                                <button class="btn btn-primary" @onclick="ShowCreateUserModal">
                                    <i class="fas fa-plus"></i> Add New User
                                </button>
                            </div>

                            <!-- Search and Filter Section -->
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="text" class="form-control" placeholder="Search users..."
                                               @bind="searchTerm" @bind:event="oninput" @bind:after="FilterUsers" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" @bind="selectedRoleFilter" @bind:after="FilterUsers">
                                        <option value="">User Type</option>

                                        @foreach (var role in Enum.GetValues(typeof(PosUserType)))
                                        {
                                            <option value="@role">@role</option>
                                        }

                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" @bind="selectedSiteFilter" @bind:after="FilterUsers">
                                        <option value="">All Sites</option>
                                        @if (sites != null)
                                        {
                                            @foreach (var site in sites)
                                            {
                                                <option value="@site.Site_Id">@site.Site_BusinessName</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" @bind="selectedStatusFilter" @bind:after="FilterUsers">
                                        <option value="">All Status</option>
                                        <option value="active">Active</option>
                                        <option value="inactive">Inactive</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Users Table -->
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Name</th>
                                            <th>Role</th>
                                            <th>Primary Site</th>
                                            <th>Additional Sites</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (filteredUsers != null && filteredUsers.Any())
                                        {
                                            @foreach (var user in filteredUsers)
                                            {
                                                <tr>
                                                    <td>@($"{user.First_Name} {user.Last_Name}")</td>
                                                    <td>
                                                        <span class="badge bg-info">@user.User_Type</span>
                                                    </td>
                                                    <td>@user.PrimarySite?.Site_BusinessName @user.PrimarySite?.Site_AddressLine1</td>
                                                    <td>
                                                        @if (user.SiteAccesses?.Any(sa => sa.Is_Active && sa.Site_Id != user.Primary_Site_Id) == true)
                                                        {
                                                            <span class="badge bg-secondary me-1">@user.SiteAccesses.Count(sa => sa.Is_Active && sa.Site_Id != user.Primary_Site_Id)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">None</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (user.Is_Activated && !user.Is_Deleted)
                                                        {
                                                            <span class="badge bg-success">Active</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger">Inactive</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div class="btn-group" role="group">
                                                            <button class="btn btn-sm btn-primary" style="min-width: 80px;" @onclick="() => ViewUserDetails(user)">
                                                                <i class="fas fa-eye me-1"></i>View
                                                            </button>
                                                            <button class="btn btn-sm btn-warning" style="min-width: 80px;" @onclick="() => EditUser(user)">
                                                                <i class="fas fa-edit me-1"></i>Edit
                                                            </button>
                                                            <button class="btn btn-sm btn-info" style="min-width: 100px;" @onclick="() => ManageSiteAccess(user)">
                                                                <i class="fas fa-building me-1"></i>Site Access
                                                            </button>
                                                            @if (user.Is_Activated)
                                                            {
                                                                <button class="btn btn-sm btn-danger" style="min-width: 100px;" @onclick="() => DeactivateUser(user)">
                                                                    <i class="fas fa-user-slash me-1"></i>Deactivate
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-sm btn-success" style="min-width: 100px;" @onclick="() => ReactivateUser(user)">
                                                                    <i class="fas fa-user-check me-1"></i>Reactivate
                                                                </button>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="6" class="text-center text-muted">No users found</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }

                    <!-- Sites Tab -->
                    @if (activeTab == "sites")
                    {
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h3 class="mb-0">Site Management</h3>
                                <button class="btn btn-primary" @onclick="ShowCreateSiteModal">
                                    <i class="fas fa-plus"></i> Add New Site
                                </button>
                            </div>

                            <!-- Sites Search -->
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="text" class="form-control" placeholder="Search sites..."
                                               @bind="siteSearchTerm" @bind:event="oninput" @bind:after="FilterSites" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" @bind="selectedSiteStatusFilter" @bind:after="FilterSites">
                                        <option value="">All Status</option>
                                        <option value="active">Active</option>
                                        <option value="inactive">Inactive</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Sites Table -->
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Business Name</th>
                                            <th>Address</th>
                                            <th>Contact</th>
                                            <th>Users Count</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (filteredSites != null && filteredSites.Any())
                                        {
                                            @foreach (var site in filteredSites)
                                            {
                                                <tr>
                                                    <td>
                                                        <strong>@site.Site_BusinessName</strong>
                                                    </td>
                                                    <td>
                                                        @site.Site_AddressLine1<br />
                                                        @if (!string.IsNullOrEmpty(site.Site_AddressLine2))
                                                        {
                                                            @site.Site_AddressLine2

                                                            <br />
                                                        }
                                                        @site.Site_City, @site.Site_Postcode
                                                    </td>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(site.Site_ContactNumber))
                                                        {
                                                            <div><i class="fas fa-phone"></i> @site.Site_ContactNumber</div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(site.Site_Email))
                                                        {
                                                            <div><i class="fas fa-envelope"></i> @site.Site_Email</div>
                                                        }
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-info">@GetUserCountForSite(site.Site_Id)</span>
                                                    </td>
                                                    <td>
                                                        @if (site.Is_Active)
                                                        {
                                                            <span class="badge bg-success">Active</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger">Inactive</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div class="btn-group" role="group">
                                                            <button class="btn btn-sm btn-primary" style="min-width: 80px;" @onclick="() => ViewSiteDetails(site)">
                                                                <i class="fas fa-eye me-1"></i>View
                                                            </button>
                                                            <button class="btn btn-sm btn-warning" style="min-width: 80px;" @onclick="() => EditSite(site)">
                                                                <i class="fas fa-edit me-1"></i>Edit
                                                            </button>
                                                            <button class="btn btn-sm btn-info" style="min-width: 110px;" @onclick="() => ManageSiteUsers(site)">
                                                                <i class="fas fa-users me-1"></i>Manage Users
                                                            </button>
                                                            @if (site.Is_Active)
                                                            {
                                                                <button class="btn btn-sm btn-danger" style="min-width: 100px;" @onclick="() => DeactivateSite(site.Site_Id)">
                                                                    <i class="fas fa-pause me-1"></i>Deactivate
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-sm btn-success" style="min-width: 90px;" @onclick="() => ActivateSite(site.Site_Id)">
                                                                    <i class="fas fa-play me-1"></i>Activate
                                                                </button>
                                                            }

                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="6" class="text-center text-muted">No sites found</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@* <!-- Create/Edit Role Modal -->
@if (showRoleModal)
{
    <UserRoleModal @bind-IsVisible="showRoleModal"
                   UserRoleToEdit="currentRole"
                   OnUserRoleSaved="HandleUserRoleSaved"
                   OnUserRoleUpdated="HandleUserRoleUpdated"
                   OnUserRoleDeleted="HandleUserRoleDeleted" />
} *@

<!-- Create/Edit Site Modal -->
@if (showSiteModal)
{
    <SiteModal @bind-IsVisible="showSiteModal"
               SiteToEdit="currentSite"
               IsViewMode="isViewMode"
               OnSiteUpdated="HandleSiteOnUpdate"
               OnSiteSaved="HandleSiteSaved"
               OnSiteDeleted="HandleSiteDeleted" />
}

@if (showUserModal)
{
    <!-- Modal Component -->
    <UserModal CurrentUser="currentUser"
               IsEditMode="isEditMode"
               AvailableSites="sites"
               OnUserSaved="HandleUserSaved"
               OnModalClosed="OnUserModalClose" />
}

<!-- Site Access Modal -->
@if (showSiteAccessModal)
{
    <SiteAccessModal SelectedUser="selectedUserForSiteAccess"
                     OnSiteAccessSaved="HandleSiteAccessSaved"
                     OnModalClosed="CloseSiteAccessModal" />
}

<!-- Site User Management Modal -->
<SiteUserManagementModal IsVisible="showSiteUserManagementModal"
                         SelectedSite="selectedSiteForUserManagement"                         
                         OnModalClosed="CloseSiteUserManagementModal" />

@code {
    private void SetUsersTab() => SetActiveTab("users");
    private void SetRolesTab() => SetActiveTab("roles");
    private void SetSitesTab() => SetActiveTab("sites");
    // New properties for role and site management
    private string activeTab = "users";

    //User management
    private bool showUserModal = false;
    private PosUser currentUser = new();

    // Add this missing variable for edit mode
    private bool isEditMode = false;

    // Site Access Modal properties
    private bool showSiteAccessModal = false;
    private PosUser selectedUserForSiteAccess;

    // Site User Management Modal properties
    private bool showSiteUserManagementModal = false;
    private Site selectedSiteForUserManagement;



    // Site management
    private List<Site> availableSites = new();
    private List<Site> filteredSites = new();
    private Site currentSite = new();
    private bool showSiteModal = false;
    private bool isEditingSite = false;
    private string siteSearchTerm = string.Empty;
    private string selectedSiteStatusFilter = string.Empty;

    // Add these missing variables:
    private string searchTerm = string.Empty;
    private string selectedRoleFilter = string.Empty;
    private string selectedSiteFilter = string.Empty;
    private string selectedStatusFilter = string.Empty;
    private bool isViewMode = false;

    // User management
    private List<PosUser> users = new();
    private List<PosUser> filteredUsers = new();
    private List<Site> sites = new();



    // Update your existing OnInitializedAsync to include:
    protected override async Task OnInitializedAsync()
    {
        SetRolesTab();
        SetSitesTab();
        SetUsersTab();
        await LoadUsers();
        await LoadSites();
    }

    // Tab management
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }




    private void FilterRoles()
    {


        StateHasChanged();
    }

    // Site Management Methods
    #region
    private void ShowCreateSiteModal()
    {
        currentSite = new Site { Is_Active = true, Date_Created = DateTime.Now };
        isEditingSite = false;
        isViewMode = false;
        showSiteModal = true;
    }

    private void EditSite(Site site)
    {
        currentSite = new Site
        {
            Site_Id = site.Site_Id,
            Site_BusinessName = site.Site_BusinessName,
            Site_AddressLine1 = site.Site_AddressLine1,
            Site_AddressLine2 = site.Site_AddressLine2,
            Site_City = site.Site_City,
            Site_Postcode = site.Site_Postcode,
            Site_ContactNumber = site.Site_ContactNumber,
            Site_Email = site.Site_Email,
            Is_Active = site.Is_Active,
            Date_Created = site.Date_Created
        };
        isEditingSite = true;
        isViewMode = false;
        showSiteModal = true;
    }

    private void CloseSiteModal()
    {
        showSiteModal = false;
        currentSite = new Site();
        isViewMode = false;
    }

    private async Task SaveSite()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(currentSite.Site_BusinessName) ||
                string.IsNullOrWhiteSpace(currentSite.Site_AddressLine1) ||
                string.IsNullOrWhiteSpace(currentSite.Site_City) ||
                string.IsNullOrWhiteSpace(currentSite.Site_Postcode))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please fill in all required fields.");
                return;
            }

            if (isEditingSite)
            {
                await UserManagementServices.UpdateSiteAsync(currentSite);
                await JSRuntime.InvokeVoidAsync("alert", "Site updated successfully!");
            }
            else
            {
                await UserManagementServices.CreateSiteAsync(currentSite);
                await JSRuntime.InvokeVoidAsync("alert", "Site created successfully!");
            }

            CloseSiteModal();
            await LoadSites();
            FilterSites();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving site: {ex.Message}");
        }
    }

    private void FilterSites()
    {
        if (sites == null) return;

        var filtered = sites.AsEnumerable();

        if (!string.IsNullOrEmpty(siteSearchTerm))
        {
            filtered = filtered.Where(s =>
                s.Site_BusinessName.Contains(siteSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Site_AddressLine1.Contains(siteSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                (s.Site_City?.Contains(siteSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }

        if (!string.IsNullOrEmpty(selectedSiteStatusFilter))
        {
            bool isActive = selectedSiteStatusFilter == "active";
            filtered = filtered.Where(s => s.Is_Active == isActive);
        }

        filteredSites = filtered.ToList();
        StateHasChanged();
    }
    #endregion
    // Helper Methods
    private int GetUserCountForRole(PosUserType posUserType)
    {
        return users?.Count(u => u.User_Type == posUserType && !u.Is_Deleted) ?? 0;
    }

    private int GetUserCountForSite(int siteId)
    {
        return users?.Count(u => u.Primary_Site_Id == siteId && !u.Is_Deleted) ?? 0;
    }


    // Load data methods (add these to your existing OnInitializedAsync)
    private async Task LoadUsers()
    {
        try
        {
            users = await UserManagementServices.GetAllUsersAsync();
            FilterUsers();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading roles: {ex.Message}");
        }
    }


    private async Task LoadSites()
    {
        try
        {
            sites = await UserManagementServices.GetAllSitesAsync();
            FilterSites();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading sites: {ex.Message}");
        }
    }





    private void FilterUsers()
    {
        filteredUsers = users.Where(u =>
            (string.IsNullOrEmpty(searchTerm) ||

             u.First_Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Last_Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        ).ToList();
        StateHasChanged();
    }

    private async Task ViewUserDetails(PosUser user)
    {
        try
        {
            // Get full user details including all relationships
            var userDetails = await UserManagementServices.GetUserWithFullDetailsAsync(user.User_ID);

            if (userDetails != null)
            {
                // Set the current user for viewing
                currentUser = userDetails;
                isEditMode = false;  // This will set IsViewMode to true in the modal
                showUserModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading user details: {ex.Message}");
        }
    }

    private void EditUser(PosUser user)
    {
        try
        {
            // Set the current user for editing
            currentUser = user;
            isEditMode = true;
            showUserModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeVoidAsync("alert", $"Error setting up user edit: {ex.Message}");
        }
    }

    private async Task ManageSiteAccess(PosUser user)
    {
        try
        {
            selectedUserForSiteAccess = user;
            showSiteAccessModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error opening site access modal: {ex.Message}");
        }
    }

    private async Task DeactivateUser(PosUser user)
    {
        try
        {
            // Show confirmation dialog
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to deactivate {user.First_Name} {user.Last_Name}? This will revoke all site access.");

            if (confirmed)
            {
                // Use the current user ID (you might need to get this from authentication)
                // For now, using a placeholder - replace with actual current user ID
                int currentUserId = 1; // TODO: Get from authentication service

                var success = await UserManagementServices.DeactivateUserAsync(user.User_ID, currentUserId);

                if (success)
                {
                    // Refresh the users list
                    await LoadUsers();
                    await JSRuntime.InvokeVoidAsync("alert", "User deactivated successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to deactivate user.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deactivating user: {ex.Message}");
        }
    }

    private async Task ReactivateUser(PosUser user)
    {
        try
        {
            // Show confirmation dialog
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to reactivate {user.First_Name} {user.Last_Name}?");

            if (confirmed)
            {
                // Use the current user ID (you might need to get this from authentication)
                // For now, using a placeholder - replace with actual current user ID
                int currentUserId = 1; // TODO: Get from authentication service

                var success = await UserManagementServices.ReactivateUserAsync(user.User_ID, currentUserId);

                if (success)
                {
                    // Refresh the users list
                    await LoadUsers();
                    await JSRuntime.InvokeVoidAsync("alert", "User reactivated successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to reactivate user.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error reactivating user: {ex.Message}");
        }
    }

    private async Task ShowCreateUserModal()
    {
        try
        {
            if(currentUser.User_Type == PosUserType.Staff || currentUser.User_Type == PosUserType.Trainee)
            {
                // Only allow Directors and Admins to create new users
                await JSRuntime.InvokeVoidAsync("alert", "You do not have permission to create new users.");
                return;
            }
            // Reset for new user creation
            currentUser = new PosUser();
            isEditMode = true;
            showUserModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error opening user creation modal: {ex.Message}");
        }
    }

    private async Task HandleUserSaved(PosUser user)
    {
        try
        {
            showUserModal = false;

            if (isEditMode)
            {
                // Update existing user in the list
                var existingUserIndex = users.FindIndex(u => u.User_ID == user.User_ID);
                if (existingUserIndex >= 0)
                {
                    users[existingUserIndex] = user;
                }
            }
            else
            {
                // Add new user to the list
                users.Add(user);
            }

            // Refresh the filtered list
            FilterUsers();
            StateHasChanged();

            await JSRuntime.InvokeVoidAsync("alert",
                isEditMode ? "User updated successfully!" : "User created successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error handling user save: {ex.Message}");
        }
    }

    private void ViewSiteDetails(Site site)
    {
        currentSite = site;
        isViewMode = true;
        showSiteModal = true;
        StateHasChanged();
    }

    private void ManageSiteUsers(Site site)
    {
        selectedSiteForUserManagement = site;
        showSiteUserManagementModal = true;
        StateHasChanged();
    }


    private async Task HandleSiteSaved(Site site)
    {
        if (site != null)
        {
            // Add the new site to the main sites list
            sites.Add(site);

            // Also add to availableSites for the UserModal
            availableSites.Add(site);

            // Refresh the filtered sites to show the new site
            FilterSites();

            // Close the site modal
            showSiteModal = false;

            // Trigger UI update
            StateHasChanged();

            // Optional: Show success message
            await JSRuntime.InvokeVoidAsync("alert", $"Site '{site.Site_BusinessName}' created successfully!");
        }
    }

    private async Task HandleSiteOnUpdate(Site site)
    {
        if (site != null)
        {
            // Update the site in the main sites list
            var existingSiteIndex = sites.FindIndex(s => s.Site_Id == site.Site_Id);
            if (existingSiteIndex >= 0)
            {
                sites[existingSiteIndex] = site;
            }
            // Also update in availableSites for the UserModal
            var existingAvailableSiteIndex = availableSites.FindIndex(s => s.Site_Id == site.Site_Id);
            if (existingAvailableSiteIndex >= 0)
            {
                availableSites[existingAvailableSiteIndex] = site;
            }
            // Refresh the filtered sites to show the updated site
            FilterSites();
            // Close the site modal
            showSiteModal = false;
            // Trigger UI update
            StateHasChanged();

        }
    }

    private void HandleSiteDeleted()
    {
        // Refresh the sites list after deletion
        LoadSites();
        FilterSites();
        StateHasChanged();
    }

    private async Task ActivateSite(int siteId)
    {
        try
        {
            await UserManagementServices.ActivateSiteAsync(siteId);
            await LoadSites();
            FilterSites();
            await JSRuntime.InvokeVoidAsync("alert", "Site activated successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error activating site: {ex.Message}");
        }
    }

    private async Task DeactivateSite(int siteId)
    {
        try
        {
            await UserManagementServices.DeactivateSiteAsync(siteId);
            await LoadSites();
            FilterSites();
            await JSRuntime.InvokeVoidAsync("alert", "Site deactivated successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deactivating site: {ex.Message}");
        }
    }
    private void OnUserModalClose()
    {
        showUserModal = false;
        StateHasChanged();
    }

    private async Task HandleSiteAccessSaved(bool success)
    {
        if (success)
        {
            // Refresh the users list to show updated site access counts
            //await LoadUsers();
            //FilterUsers();
        }
    }

    private void CloseSiteAccessModal()
    {
        showSiteAccessModal = false;
        selectedUserForSiteAccess = null;
        StateHasChanged();
    }

    private void CloseSiteUserManagementModal()
    {
        showSiteUserManagementModal = false;
        selectedSiteForUserManagement = null;
        StateHasChanged();
    }


}