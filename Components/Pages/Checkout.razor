@page "/"
@using DataHandlerLibrary.Models
@using EntityFrameworkDatabaseLibrary.Models
@using EposRetail.Constants
@using EposRetail.Models
@using EposRetail.Services
@using DataHandlerLibrary.Services
@using EposRetail.Components.Pages.Shared
@inject GeneralServices generalServices
@inject CheckoutService CheckoutService
@inject ScreenInfoService ScreenInfoService
@inject ProductServices productServices
@inject SalesTransactionServices salesTransactionServices
@inject IJSRuntime JS

@* <h3 class="text-center">Checkout Dashboard</h3> *@
<div class="d-flex flex-column vh-100 mt-1">
    <div class="container-fluid">
        <!-- Make the row full height and align items to the start -->
        <div class="d-flex align-items-start">
            <div class="col-md-6 row">
                <!-- Search Box -->
                <div class="mb-2">
                    <input type="text" @ref="searchBox" @bind-value="_state.SearchText"
                           @bind-value:event="oninput" @onkeydown="SearchKeyDownAsync"
                           class="form-control" placeholder="Search for products or enter amount..." />
                </div>
                <CheckoutTable State="_state" OnItemSelected="SelectItem"></CheckoutTable>
                <CheckoutButtons State="_state" OnPaymentClicked="PaymentButtonClickedAsync" OnQtyClicked="QtyButtonClick" OnMoreSalesClicked="MoreSalesButtonClick"></CheckoutButtons>

            </div>

            <div class="row col-md-12 mb-2">
                <DepartmentButtons State="_state" OnCashSuggestionClick="HandleCashSuggestionClick"></DepartmentButtons>
                <NumberPadComponent OnNumberClick="HandleNumPadClick" />
            </div>
        </div>
        <StatusBarComponent />

    </div>
    <!-- modals -->
    <ModalContainer State="_state"
                    OnModalOk="onmodalokasync"
                    OnModalClose="onmodalcloseasync"
                    OnProductSave="onmodalproductupsertedasync" />

    <QuantityBoxComponent IsVisible="_state.ShowQuantityBox"
                          value="_state.QuantityValue"
                          onapply="applyquantityasync" />

</div>






@code {
    ElementReference searchBox;
    CheckoutState _state = new CheckoutState();

    private async Task HandleNumPadClick(string amount)
    {
        if (amount.Equals("Clear", StringComparison.OrdinalIgnoreCase))
        {
            _state.SearchText = string.Empty;
        }
        else
        {
            _state.SearchText += amount;
        }
        StateHasChanged();
    }
    private async Task HandleCashSuggestionClick(int amount)
    {
        _state.SearchText = int.TryParse(_state.SearchText, out int currentAmount) ? (currentAmount + (amount * 100)).ToString() : (amount * 100).ToString();
        StateHasChanged();
    }

    private async Task applyquantityasync()
    {
        _state.ShowQuantityBox = false;
        if (!string.IsNullOrEmpty(_state.QuantityValue) && int.TryParse(_state.QuantityValue, out int quantity) && quantity > 0)
        {
            var currentBasket = _state.SalesBaskets[_state.HoldBasketIndex];
            // if (currentBasket. 0 && currentBasket.SelectedItemIndex < currentBasket.SalesItemsList.Count)
            // {
            //     var selectedItem = currentBasket.SalesItemsList[currentBasket.SelectedItemIndex];
            //     selectedItem.Product_QTY = quantity;
            //     selectedItem.Product_Total_Amount = selectedItem.Product_Amount * quantity;
            //     StateHasChanged();
            // }
        }
    }

    private async Task SearchKeyDownAsync(KeyboardEventArgs e)
    {
        if (e.Key != "Enter")
        {
            await searchBox.FocusAsync();
            return;
        }

        try
        {
            await ProcessSearchInputAsync();
        }
        catch (Exception ex)
        {
            await ShowErrorModalAsync("Search Error", ex.Message);
        }
    }

    private async Task ProcessSearchInputAsync()
    {
        if (string.IsNullOrEmpty(_state.SearchText))
        {
            await SetFocusOnSearchBoxAsync();
            return;
        }

        if (_state.SalesBaskets.Count < 1)
        {
            await InitializeSalesTransactionAsync(false);
        }

        var product = await CheckoutService.GetProductByBarcodeAsync(_state.SearchText);

        if (product == null)
        {
            await ShowProductNotFoundModalAsync();
            return;
        }

        if (!product.Is_activated)
        {
            await ShowProductActivationModalAsync(product);
            return;
        }

        await AddProductToBasketAsync(product);
        await JS.InvokeVoidAsync("scrollTableToBottom");
        StateHasChanged();
    }

    private async Task AddProductToBasketAsync(Product product)
    {
        var currentBasket = _state.SalesBaskets[_state.HoldBasketIndex];
        CheckoutService.AddProductToBasket(currentBasket, product);

        UpdateCashSuggestions(currentBasket.Transaction.SaleTransaction_Total_Amount);
        await SetFocusOnSearchBoxAsync();
    }

    private void UpdateCashSuggestions(decimal totalAmount)
    {
        _state.RoundupCashSuggestion = (int)Math.Ceiling(totalAmount);
        _state.SecondRoundupCashSuggestion = generalServices.RoundUpToNearestFive((int)Math.Ceiling(totalAmount));
    }

    private async Task InitializeSalesTransactionAsync(bool clearSearch = true)
    {
        if (!(_state.SalesBaskets != null && _state.SalesBaskets.Count > _state.HoldBasketIndex && _state.HoldBasketIndex >= 0))
        {
            _state.SalesBaskets.Add(new SalesBasket());
        }

        _state.SalesBaskets[_state.HoldBasketIndex].Transaction = new SalesTransaction
        {

            Date_Created = DateTime.Now,
            SaleTransaction_Total_Amount = 0,
            SaleTransaction_Cash = 0,
            SaleTransaction_Card = 0,
            SaleTransaction_Change = 0
        };

        StateHasChanged();
    }

    private async Task ShowProductNotFoundModalAsync()
    {
        _state.ModalSettings = new ModalSettings
        {
            ModalTitle = "Product Not Found",
            ModalMessage = $"Product not Found! Please add the product!",
            ShowModal = true,
            ModalEnum = ModalEnum.ProductNotFound
        };
        _state.ModalProduct = new Product
        {
            Product_Barcode = _state.SearchText,
            Expiry_Date = DateTime.Now.AddDays(7),
            Is_activated = true
        };
        StateHasChanged();
    }

    private async Task ShowProductActivationModalAsync(Product product)
    {
        _state.ModalSettings = new ModalSettings
        {
            ModalTitle = "Product Activation Required",
            ModalMessage = $"Product '{product.Product_Name}' requires activation. Please contact management.",
            ShowModal = true,
            ModalEnum = ModalEnum.ProductActivate
        };
        _state.ModalProduct = product;
        StateHasChanged();
    }

    private void QtyButtonClick()
    {
        if (HasItemsInBasket())
        {
            _state.ShowQuantityBox = true;
            StateHasChanged();
        }

    }
    protected override async Task OnInitializedAsync()
    {
        await InitializeScreenSettingsAsync();
        //await InitializeSalesTransactionAsync(false);
    }

    private async Task InitializeScreenSettingsAsync()
    {
        _state.ScreenModel = ScreenInfoService.GetScreenSize();

        if (_state.ScreenModel.Height < 800)
        {
            _state.DisplayGenericButtons = false;
            _state.TableStyle = CheckoutConstants.TableHeights.SmallScreen;
            _state.CollapseButtonLabel = "More";
        }
        else
        {
            _state.DisplayGenericButtons = true;
            _state.TableStyle = CheckoutConstants.TableHeights.Default;
            _state.CollapseButtonLabel = "Collapse";
        }
    }

    private void SelectItem(SalesItemTransaction item)
    {
        var currentBasket = _state.SalesBaskets[_state.HoldBasketIndex];
        _state.SelectedItemIndex = currentBasket.SalesItemsList.FindIndex(i => i.Product_ID == item.Product_ID);
        StateHasChanged();
    }

    private async Task PaymentButtonClickedAsync(PaymentType paymentType)
    {
        if (!HasItemsInBasket()) return;

        try
        {
            _state.PaymentType = paymentType;
            await ProcessPaymentAsync(paymentType);
        }
        catch (Exception ex)
        {
            await ShowErrorModalAsync("Payment Error", ex.Message);
        }
    }

    private bool HasItemsInBasket()
    {
        return _state.SalesBaskets?.ElementAtOrDefault(_state.HoldBasketIndex)?.SalesItemsList?.Count > 0;
    }

    private async Task ProcessPaymentAsync(PaymentType paymentType)
    {
        if (string.IsNullOrEmpty(_state.SearchText))
        {
            await ShowPaymentConfirmationModalAsync();
            return;
        }

        // if (!_state.SearchText.All(char.IsDigit))
        // {
        //     await ShowTransactionCompleteModalAsync();
        //     return;
        // }

        await ProcessCashOrCardPaymentAsync(paymentType);
    }

    private async Task ProcessCashOrCardPaymentAsync(PaymentType paymentType)
    {

        try
        {
            var currentBasket = _state.SalesBaskets[_state.HoldBasketIndex];

            if (currentBasket.SalesItemsList.Count == 0)
            {
                await ShowErrorModalAsync("Payment Error", "No items in basket to process payment.");
                return;
            }

            decimal paymentAmount = currentBasket.Transaction.SaleTransaction_Total_Amount;

            if (paymentType == PaymentType.Cash)
            {
                currentBasket.Transaction.SaleTransaction_Cash += paymentAmount;
            }
            else
            {
                currentBasket.Transaction.SaleTransaction_Card += paymentAmount;
            }

            currentBasket.Transaction.SaleTransaction_Change =
                currentBasket.Transaction.SaleTransaction_Total_Amount -
                (currentBasket.Transaction.SaleTransaction_Cash + currentBasket.Transaction.SaleTransaction_Card);

            if (currentBasket.Transaction.SaleTransaction_Change <= 0)
            {
                await CompleteTransactionAsync(currentBasket);
            }
            else
            {
                await SetFocusOnSearchBoxAsync();
            }
        }
        catch (Exception ex)
        {
            await ShowErrorModalAsync("Payment Error", ex.Message);
        }
    }

    private async Task SetFocusOnSearchBoxAsync()
    {
        _state.SearchText = "";
        await searchBox.FocusAsync();
    }

    private async Task ShowPaymentConfirmationModalAsync()
    {
        var currentBasket = _state.SalesBaskets[_state.HoldBasketIndex];
        _state.ModalSettings = new ModalSettings
        {
            ModalTitle = "Payment Confirmation",
            ModalMessage = $"Total: £{currentBasket.Transaction.SaleTransaction_Total_Amount:F2}\nCash: £{currentBasket.Transaction.SaleTransaction_Cash:F2}\nCard: £{currentBasket.Transaction.SaleTransaction_Card:F2}",
            ShowModal = true,
            ModalEnum = ModalEnum.Payment
        };
        StateHasChanged();
    }

    private async Task CompleteTransactionAsync(SalesBasket basket)
    {
        var transactionToSave = basket.Transaction;

        // Clear UI immediately
        await ClearCurrentTransactionAsync();

        // Show change modal
        await ShowChangeModalAsync(transactionToSave.SaleTransaction_Change);

        // Save in background
        _ = SaveTransactionInBackgroundAsync(transactionToSave);
    }

    private async Task ClearCurrentTransactionAsync()
    {
        var currentBasket = _state.SalesBaskets[_state.HoldBasketIndex];
        currentBasket.Transaction = new SalesTransaction();
        currentBasket.SalesItemsList.Clear();
        _state.SearchText = "";
        _state.HoldBasketIndex = 0;
        StateHasChanged();
    }

    private async Task ShowChangeModalAsync(decimal changeAmount)
    {
        if (changeAmount > 0)
        {
            _state.ModalSettings = new ModalSettings
            {
                ModalTitle = "Change Due",
                ModalMessage = $"Change to give: £{changeAmount:F2}",
                ShowModal = true,
                ModalEnum = ModalEnum.Default
            };
        }
        else
        {
            _state.ModalSettings = new ModalSettings
            {
                ModalTitle = "Transaction Complete",
                ModalMessage = "Payment received. No change due.",
                ShowModal = true,
                ModalEnum = ModalEnum.Default
            };
        }
        StateHasChanged();
    }

    private async Task SaveTransactionInBackgroundAsync(SalesTransaction transaction)
    {
        try
        {
            await CheckoutService.SaveTransactionAsync(transaction);
        }
        catch (Exception ex)
        {
            await InvokeAsync(async () =>
            {
                await ShowErrorModalAsync("Background Save Error",
                    "Transaction completed but failed to save. Please check logs.");
            });
        }
    }

    private async Task ShowErrorModalAsync(string title, string message)
    {
        _state.ModalSettings = new ModalSettings
        {
            ModalTitle = title,
            ModalMessage = message,
            ShowModal = true,
            ModalEnum = ModalEnum.Error
        };
        StateHasChanged();
    }
    private void MoreSalesButtonClick(bool isCollapsed)
    {
        if (isCollapsed)
        {
            _state.TableStyle = _state.ScreenModel.Height > 800
            ? "height:512px; overflow-y: auto"
            : "height: 425px; overflow-y: auto";

        }
        else
        {
            _state.TableStyle = _state.ScreenModel.Height > 800
          ? "height: 335px; overflow-y: auto"
          : "height: 225px; overflow-y: auto";
        }
        StateHasChanged();
    }

    private async Task onmodalokasync()
    {
        // Handle modal OK button click
        _state.ModalSettings.ShowModal = false;
        StateHasChanged();
    }

    private async Task onmodalcloseasync()
    {
        // Handle modal close/cancel
        _state.ModalSettings.ShowModal = false;
        StateHasChanged();
    }

    private async Task onmodalproductupsertedasync(Product product)
    {
        // Handle product save/update from modal
        _state.ModalSettings.ShowModal = false;
        await AddProductToBasketAsync(product);
        StateHasChanged();
    }
}
