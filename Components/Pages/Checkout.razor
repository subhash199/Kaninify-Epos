@page "/checkout"
@using DataHandlerLibrary.Models
@using EntityFrameworkDatabaseLibrary.Models
@using EposRetail.Models
@using EposRetail.Services
@using EposRetail.Components.Pages.RepeatComponents
@using DataHandlerLibrary.Services
@inject ScreenInfoService ScreenInfoService
@inject ProductServices productServices
@inject IJSRuntime JS

@* <h3 class="text-center">Checkout Dashboard</h3> *@
<div class="d-flex flex-column vh-100 mt-1">
    <div class="container-fluid">
        <!-- Make the row full height and align items to the start -->
        <div class="d-flex align-items-start">
            <div class="col-md-6 row">
                <div class="mb-2">
                    <input type="text" @ref="searchBox" @bind-value="searchText" @bind-value:event="oninput" @onkeydown="SearchKeyDown" class="form-control" placeholder="Search for products or enter amount..." />
                </div>

                <div id="checkoutTable" class="table-responsive" style="@tableStyle">
                    <table class="table table-bordered table-striped align-middle" style="table-layout:fixed; width:100%;">
                        <colgroup>
                            <col style="width: 10%;">
                            <col style="width: 40%;">
                            <col style="width: 20%;">
                            <col style="width: 15%;">
                            <col style="width: 15%;">
                        </colgroup>
                        <thead class="table-primary">
                            <tr>
                                <th class="text-truncate">Qty</th>
                                <th class="text-truncate">Product Name</th>
                                <th class="text-truncate">Promotion</th>
                                <th class="text-truncate">Unit Price</th>
                                <th class="text-truncate">Total</th>
                            </tr>
                        </thead>                    

                        <tbody>
                            @if (salesBaskets.Count > 0 && salesBaskets[holdBasketIndex].SalesItemsList != null)
                            {
                                @for (int index = 0; index < salesBaskets[holdBasketIndex].SalesItemsList.Count; index++)
                                {
                                    var item = salesBaskets[holdBasketIndex].SalesItemsList[index];
                                    <tr @onclick="@(() => SelectItem(item))" class="@(selectedItemIndex == index ? "table-primary" : "")" style="cursor: pointer;">
                                        <td class="text-truncate">@item.Product_QTY</td>
                                        <td class="text-truncate">@item.Product.Product_Name</td>
                                        <td class="text-truncate">@item.Promotion</td>
                                        <td class="text-truncate">@item.Product_Amount.ToString("C2")</td>
                                        <td class="text-truncate fw-bold fs-5">@item.Product_Total_Amount.ToString("C2")</td>
                                    </tr>
                                }
                            }
                        </tbody>
                        <tfoot class="table-light">
                            <tr>
                                <td colspan="4" class="text-end fw-bold">Grand Total:</td>
                                <td class="fw-bold fs-5">
                                    @(
                                                            salesBaskets?.Count > 0 && salesBaskets[holdBasketIndex].SalesItemsList?.Count > 0
                                                            ? salesBaskets[holdBasketIndex].SalesItemsList.Sum(s => s.Product_Total_Amount).ToString("C2")
                                                            : "0.00"
                                                            )
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="col-md-12 mb-2">
                    <div class="d-flex gap-2 mb-2">
                        <button class="col-md-3 btn btn-danger d-flex flex-column align-items-center flex-fill">
                            <img src="images/icons/account_balance_wallet_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                            <span class="fw-bold">Card</span>
                        </button>
                        <button class="col-md-3 btn btn-warning d-flex flex-column align-items-center flex-fill" @onclick="QtyButtonClick">
                            <img src="images/icons/liquor.png" class="img-fluid mb-2" />
                            <span class="fw-bold">Qty</span>
                        </button>
                        <button class="col-md-3 btn btn-success d-flex flex-column align-items-center flex-fill">
                            <img src="images/icons/money_bag_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                            <span class="fw-bold">Cash</span>
                        </button>
                        <button class="col-md-3 btn-light d-flex flex-column align-items-center flex-fill" @onclick="MoreSalesButtonClick">
                            <img src=@leftCollapseButtonPanel class="img-fluid mb-2" />
                            <span class="fw-bold">@leftPanelLabel</span>
                        </button>
                    </div>
                    <div class="@moreSalesButtonsClass">
                        <div class="col-md-12 mb-2">
                            <div class="d-flex gap-2 mb-2">
                                <button class="col-md-3 btn btn-danger d-flex flex-column align-items-center flex-fill">
                                    <img src="images/icons/remove_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                                    <span class="fw-bold">Void Line</span>
                                </button>
                                <button class="col-md-3 btn btn-warning d-flex flex-column align-items-center flex-fill">
                                    <img src="images/icons/front_hand_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                                    <span class="fw-bold">Hold</span>
                                </button>
                                <button class="col-md-3 btn btn-danger d-flex flex-column align-items-center flex-fill">
                                    <img src="images/icons/money_off_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                                    <span class="fw-bold">Void Basket</span>
                                </button>
                                <button class="col-md-3 btn btn-light d-flex flex-column align-items-center flex-fill">
                                    <img src="images/icons/receipt_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                                    <span class="fw-bold">Receipt</span>
                                </button>
                            </div>
                            <div class="col-md-12 mb-2">
                                <div class="d-flex gap-2 mb-2">
                                    <button class="col-md-3 btn btn-success d-flex flex-column align-items-center flex-fill">
                                        <img src="images/icons/search_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                                        <span class="fw-bold">Enquiry</span>
                                    </button>
                                    <button class="col-md-3 btn btn-warning d-flex flex-column align-items-center flex-fill">
                                        <img src="images/icons/send_money_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                                        <span class="fw-bold">Refund</span>
                                    </button>
                                    <button class="col-md-3 btn btn-success d-flex flex-column align-items-center flex-fill">
                                        <img src="images/icons/add_box_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                                        <span class="fw-bold">New Product</span>
                                    </button>
                                    <button class="col-md-3 btn btn-light d-flex flex-column align-items-center flex-fill">
                                        <img src="images/icons/account_balance_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                                        <span class="fw-bold">Office</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>



            <div class="row col-md-12 mb-2">
                <div class="col-md-6 gap-2 d-flex align-items-start ms-2 mb-2">
                    @if (screenModel.Height < 800 && displayGenericButtons)
                    {
                        <EposRetail.Components.Pages.RepeatComponents.GenericGambleButtons></EposRetail.Components.Pages.RepeatComponents.GenericGambleButtons>
                        //gamble buttons
                    }
                    else if (screenModel.Height < 800 && !displayGenericButtons)
                    {
                        <EposRetail.Components.Pages.RepeatComponents.GenericRestrictedButtonsComponents></EposRetail.Components.Pages.RepeatComponents.GenericRestrictedButtonsComponents>
                    }
                    else if (screenModel.Height > 800)
                    {
                        <EposRetail.Components.Pages.RepeatComponents.GenericRestrictedButtonsComponents></EposRetail.Components.Pages.RepeatComponents.GenericRestrictedButtonsComponents>

                    }



                    @if (screenModel.Height < 800)
                    {
                        <button @onclick="DisplayGenericButtonClick" class="btn btn-light d-flex flex-column align-items-center flex-fill">
                            <img src="@collapseButtonImage" class="img-fluid mb-2" />
                            <span class="fw-bold">@collapseButtonLabel</span>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-light background-colour-light-green d-flex flex-column align-items-center flex-fill">
                            <img src="images/icons/nutrition_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                            <span class="fw-bold">Fruit & Veg</span>
                        </button>
                    }
                </div>

                @if (screenModel.Height < 800 && displayGenericButtons)
                {
                    <EposRetail.Components.Pages.RepeatComponents.PayoutButtonComponents></EposRetail.Components.Pages.RepeatComponents.PayoutButtonComponents>
                }

                @if (screenModel.Height < 800 && !displayGenericButtons)
                {
                    <EposRetail.Components.Pages.RepeatComponents.GenericCashSuggestionButtonsComponent SecondRoundupCashSuggestion="@secondRoundupCashSuggestion" RoundupCashSuggestion="@roundupCashSuggestion" OnCashSuggestionClicked="HandleCashSuggestion" />
                }

                @if (screenModel.Height > 800)
                {
                    <EposRetail.Components.Pages.RepeatComponents.PayoutButtonComponents PayoutClick="@payoutActionModel" />
                    <EposRetail.Components.Pages.RepeatComponents.GenericCashSuggestionButtonsComponent SecondRoundupCashSuggestion="@secondRoundupCashSuggestion" RoundupCashSuggestion="@roundupCashSuggestion" OnCashSuggestionClicked="HandleCashSuggestion" />

                }
                <div class="col-md-6 d-flex gap-2 align-items-start ms-2 m-2">

                    <button @onclick="()=>NumberPadClick(7)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                        <span class="fw-bold">7</span>
                    </button>
                    <button @onclick="()=>NumberPadClick(8)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">8</span>
                    </button>
                    <button @onclick="()=>NumberPadClick(9)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">9</span>
                    </button>

                </div>
                <div class="col-md-6 d-flex gap-2 align-items-start ms-2 m-2">

                    <button @onclick="()=>NumberPadClick(4)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">4</span>
                    </button>
                    <button @onclick="()=>NumberPadClick(5)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">5</span>
                    </button>
                    <button @onclick="()=>NumberPadClick(6)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">6</span>
                    </button>

                </div>
                <div class="col-md-6 d-flex gap-2 align-items-start ms-2 m-2">

                    <button @onclick="()=>NumberPadClick(1)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">1</span>
                    </button>
                    <button @onclick="()=>NumberPadClick(2)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">2</span>
                    </button>
                    <button @onclick="()=>NumberPadClick(3)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">3</span>
                    </button>

                </div>
                <div class="col-md-6 d-flex gap-2 align-items-start ms-2 m-2">

                    <button @onclick="()=>NumberPadClick(0)" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">0</span>
                    </button>
                    <button @onclick="()=>DoubleZeroPadClick()" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/payments_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">00</span>
                    </button>
                    <button @onclick="()=> SetFocusOnSearchBoxAsync()" class="btn btn-light background-colour-light-blue d-flex flex-column align-items-center flex-fill">
                        <img src="images/icons/clear_all_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />

                        <span class="fw-bold">Clear</span>
                    </button>

                </div>




            </div>


        </div>
        <div class="col-md-12">
            <div class="row me-4">
                <div class="col-md-4 mb-3">
                    <button class="btn btn-light w-100 h-100 d-flex flex-column align-items-center justify-content-center background-colour-light-green">
                        <img src="images/icons/inventory_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                        <span class="text-center">Refill Products Count: 12</span>
                    </button>
                </div>
                <div class="col-md-4 mb-3">
                    <button class="btn btn-light w-100 h-100 d-flex flex-column align-items-center justify-content-center background-colour-light-yellow">
                        <img src="images/icons/timer_off_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                        <span class="text-center">Expiry Products Count: 12</span>
                    </button>
                </div>
                <div class="col-md-4 mb-3">
                    <button class="btn btn-light w-100 h-100 d-flex flex-column align-items-center justify-content-center background-colour-light-red">
                        <img src="images/icons/trolley_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png" class="img-fluid mb-2" />
                        <span class="text-center">Shortage Products Count: 12</span>
                    </button>
                </div>
            </div>
        </div>

    </div>
    @if (modalSettings.ModalEnum == ModalEnum.Error)
    {
        <GenericMessageModal IsVisible="@modalSettings.ShowModal"
        Title="@modalSettings.ModalTitle"
        Message="@modalSettings.ModalMessage"
        PrimaryButtonText="OK"
        PrimaryAction="@OnModalOk"
        SecondaryButtonText="Cancel"
        OnClose="@OnModalClose" />
    }
    @if (modalSettings.ModalEnum == ModalEnum.ProductActivate || modalSettings.ModalEnum == ModalEnum.ProductNotFound)
    {
        <ProductModal IsVisible="@modalSettings.ShowModal"
        Title="@modalSettings.ModalTitle"
        Product="@modalProduct"
        OnSave="@OnModalProductUpserted"
        OnClose="@OnModalClose">

        </ProductModal>
    }



</div>





@code {
    ElementReference searchBox;

    string searchText = "";

    string tableStyle = "height: 512px; overflow-y: auto";
    string leftPanelLabel = "More";
    string moreSalesButtonsClass = "d-none";
    // string cardsDisplayClass = "d-none";


    string leftCollapseButtonPanel = "images/icons/add_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png";
    string collapseButtonLabel = "More";
    string collapseButtonImage = "images/icons/add_box_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png";

    bool displayGenericButtons = true;

    ScreenModel screenModel = new ScreenModel();

    Product modalProduct { get; set; } = new Product();

    // Modal objects
    ModalSettings modalSettings = new ModalSettings();

    //Checkout Objects
    int holdBasketIndex = 0;
    List<SalesBasket> salesBaskets = new List<SalesBasket>();

    //Generic Cash Suggestion
    int roundupCashSuggestion = 1;
    int secondRoundupCashSuggestion = 5;

    //Services
    GeneralServices generalServices = new GeneralServices();

    private void HandleCashSuggestion(int value)
    {
        if (int.TryParse(searchText, out int currentValue))
        {
            int newValue = currentValue + value;
            searchText = newValue > 0 ? newValue.ToString() : "0";
        }
        else
        {
            // If parsing fails, treat as zero and add the value
            int newValue = value;
            searchText = newValue > 0 ? newValue.ToString() : "0";
        }
    }

    private void ProvideRoundedUpCashSuggestion(decimal value)
    {
        decimal roundedValue = Math.Ceiling(value);
        roundupCashSuggestion = int.Parse(roundedValue.ToString("0"));
    }


    private void ProvideSecondRoundedUpCashSuggestion(decimal value)
    {
        // Always round up to the next whole number before rounding to nearest five
        int intValue = (int)Math.Ceiling(value);
        secondRoundupCashSuggestion = generalServices.RoundUpToNearestFive(intValue);
    }



    private void NumberPadClick(int num)
    {
        searchText += num.ToString();
    }

    private void DoubleZeroPadClick()
    {
        searchText += "00";
    }


    // Method to show the modal
    private void ShowModal()
    {
        switch (modalSettings.ModalEnum)
        {
            case ModalEnum.ProductActivate:
                modalSettings.ModalTitle = "Product Activation";
                modalSettings.ModalMessage = "This product is not activated. Would you like to activate this product?";
                modalSettings.ShowModal = true;
                break;
            case ModalEnum.ProductNotFound:
                modalSettings.ModalTitle = "Product Not Found";
                modalSettings.ModalMessage = "The product you scanned was not found in the system. Please check the barcode or enter the product manually.";
                modalSettings.ShowModal = true;
                break;
            default:
                break;
        }
        StateHasChanged();
    }

    // Modal button/callback handlers
    private Task OnModalOk()
    {
        modalSettings.ShowModal = false;
        return Task.CompletedTask;
    }

    private Task OnModalClose()
    {
        modalSettings.ShowModal = false;
        return Task.CompletedTask;
    }

    private Task OnModalProductUpserted()
    {
        modalSettings.ShowModal = false;
        salesBaskets[holdBasketIndex].SalesItemsList.Add(new SalesItemTransaction
            {
                Product_ID = modalProduct.Product_ID,
                Product = modalProduct,
                Product_QTY = 1,
                Product_Amount = modalProduct.Product_Selling_Price,
                Product_Total_Amount = modalProduct.Product_Selling_Price,
            });
        return Task.CompletedTask;
    }

    private async Task SetFocusOnSearchBoxAsync()
    {
        searchText = "";
        await searchBox.FocusAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        screenModel = ScreenInfoService.GetScreenSize();
        if (screenModel.Height < 800)
        {
            displayGenericButtons = false;
            tableStyle = "height: 425px; overflow-y: auto";
            collapseButtonLabel = "More";
        }
        else
        {
            displayGenericButtons = true;
            tableStyle = "height: 512px; overflow-y: auto";
            collapseButtonLabel = "Collapse";
        }
         
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetFocusOnSearchBoxAsync();            
        }
    }

    private async void SearchKeyDown(KeyboardEventArgs e)
    {
        try
        {
            if (e.Key == "Enter")
            {
                if (!string.IsNullOrEmpty(searchText))
                {
                    if (salesBaskets.Count < 1)
                    {
                        InitializeSalesTransaction(false);
                    }

                    var product = await productServices.GetProductByBarcode(searchText);
                    if (product != null)
                    {
                        if (!product.Is_activated)
                        {
                            modalSettings.ModalEnum = ModalEnum.ProductActivate;
                            modalProduct = product;
                            ShowModal();
                            await SetFocusOnSearchBoxAsync();
                            return;
                        }
                        else
                        {
                            await AddProductToBasketAsync(product);
                        }
                    }
                    else
                    {
                        modalSettings.ModalEnum = ModalEnum.ProductNotFound;
                        modalProduct.Product_Barcode = searchText;
                        modalProduct.Expiry_Date = DateTime.Now;
                        ShowModal();
                    }
                    await Task.Yield();
                    await JS.InvokeVoidAsync("scrollTableToBottom");
                }
                else
                {
                    await SetFocusOnSearchBoxAsync();
                }
                StateHasChanged();
            }
            else
            {
                await searchBox.FocusAsync();
            }
        }
        catch (Exception ex)
        {
            modalSettings.ModalEnum = ModalEnum.Error;
            Console.WriteLine($"Error: {ex.Message}");
        }

    }


    private async Task AddProductToBasketAsync(Product fetchProduct)
    {
        if (salesBaskets[holdBasketIndex].SalesItemsList == null)
        {
            salesBaskets[holdBasketIndex].SalesItemsList = new();
        }
        var item = salesBaskets[holdBasketIndex].SalesItemsList.FirstOrDefault(x => x.Product_ID == fetchProduct.Product_ID);
        if (item != null)
        {
            item.Product_QTY += 1;
            item.Product_Total_Amount = item.Product_QTY * fetchProduct.Product_Selling_Price;
        }
        else
        {
            salesBaskets[holdBasketIndex].SalesItemsList.Add(new SalesItemTransaction
                {
                    Product_ID = fetchProduct.Product_ID,
                    Product = fetchProduct,
                    Product_QTY = 1,
                    Product_Amount = fetchProduct.Product_Selling_Price,
                    Product_Total_Amount = fetchProduct.Product_Selling_Price,
                });
        }
        decimal totalAmount = salesBaskets[holdBasketIndex].SalesItemsList.Sum(s => s.Product_Total_Amount);
        ProvideRoundedUpCashSuggestion(totalAmount);
        ProvideSecondRoundedUpCashSuggestion(totalAmount);
        SetFocusOnSearchBoxAsync();
    }

    private void InitializeSalesTransaction(bool isRefund)
    {

        if (salesBaskets.Count < 1)
        {
            salesBaskets.Add(new SalesBasket());
        }
        if (salesBaskets[holdBasketIndex].Transaction == null)
        {
            salesBaskets[holdBasketIndex].Transaction = new SalesTransaction
                {
                    Date_Created = DateTime.Now,
                    Sale_Start_Date = DateTime.Now,
                    Is_Refund = isRefund ? 1 : 0,
                    Till_ID = 0,
                    User_ID = 0,
                    DayLog_ID = 0,
                    Is_Printed = 0,
                    SaleTransaction_Discount = 0,
                    SaleTransaction_Promotion = 0,
                    SaleTransaction_Change = 0,
                    SaleTransaction_Payout = 0,
                    SaleTransaction_CashBack = 0,
                    SaleTransaction_Cash = 0,
                };
            salesBaskets[holdBasketIndex].SalesItemsList = new();
        }

    }

    private void HandleGenericItemClick()
    {
        int i = 0;
        // Your logic here
    }

    private void payoutActionModel(PayoutActionModel payoutActionModel)
    {
        int i = 0;
        // Your logic here
    }

    private void DisplayGenericButtonClick()
    {
        displayGenericButtons = !displayGenericButtons;
        collapseButtonLabel = displayGenericButtons ? "Collapse" : "More";
        collapseButtonImage = displayGenericButtons
            ? "images/icons/hide_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png"
            : "images/icons/add_box_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png";
    }

    private void MoreSalesButtonClick()
    {
        if (moreSalesButtonsClass == "d-none")
        {
            moreSalesButtonsClass = "";
            leftPanelLabel = "Collapse";
            leftCollapseButtonPanel = "images/icons/hide_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png";
            tableStyle = screenModel.Height > 800
                ? "height: 335px; overflow-y: auto"
                : "height: 225px; overflow-y: auto";
        }
        else
        {
            moreSalesButtonsClass = "d-none";
            leftPanelLabel = "More";
            leftCollapseButtonPanel = "images/icons/add_24dp_1F1F1F_FILL0_wght400_GRAD0_opsz24.png";
            tableStyle = screenModel.Height > 800
                ? "height:512px; overflow-y: auto"
                : "height: 425px; overflow-y: auto";
        }
    }
}



@if (showQuantityBox)
{
    <div class="position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow-lg">
        <div class="mb-3">
            <label class="form-label">Enter Quantity:</label>
            <input type="number" @ref="quantityInput" class="form-control" @bind="quantityValue" @bind:event="oninput" />
        </div>
        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-secondary" @onclick="() => showQuantityBox = false">Cancel</button>
            <button class="btn btn-primary" @onclick="ApplyQuantity">Apply</button>
        </div>
    </div>
}

@code {
    private ElementReference quantityInput;
    private bool showQuantityBox = false;
    private string quantityValue = "";
    private int selectedItemIndex = -1;

    private void SelectItem(SalesItemTransaction item)
    {
        selectedItemIndex = salesBaskets[holdBasketIndex].SalesItemsList.FindIndex(i=>i.Product_ID == item.Product_ID);
        StateHasChanged();
    }

    private async Task QtyButtonClick()
    {
        if (salesBaskets.Count == 0 || salesBaskets[holdBasketIndex].SalesItemsList == null || 
            salesBaskets[holdBasketIndex].SalesItemsList.Count == 0)
        {
            return;
        }

        moreSalesButtonsClass = "d-none";
        showQuantityBox = true;

        // If no item is selected, select the last item
        if (selectedItemIndex == -1)
        {
            selectedItemIndex = salesBaskets[holdBasketIndex].SalesItemsList.Count - 1;
        }
        
        // Set initial quantity value from selected item
        var selectedItem = salesBaskets[holdBasketIndex].SalesItemsList[selectedItemIndex];
        quantityValue = selectedItem.Product_QTY.ToString();
        
        StateHasChanged();
        
        await Task.Delay(50);
        await JS.InvokeVoidAsync("focusElement", quantityInput);
    }

    private void ApplyQuantity()
    {
        if (string.IsNullOrEmpty(quantityValue) || !int.TryParse(quantityValue, out int quantity))
        {
            return;
        }

        var itemsList = salesBaskets[holdBasketIndex].SalesItemsList;
        if (selectedItemIndex >= 0 && selectedItemIndex < itemsList.Count)
        {
            itemsList[selectedItemIndex].Product_QTY = quantity;
            itemsList[selectedItemIndex].Product_Total_Amount =
                itemsList[selectedItemIndex].Product_Amount * quantity;
        }

        showQuantityBox = false;
        quantityValue = "";
        selectedItemIndex = -1;  // Reset selectedItemIndex to -1 after applying quantity
        StateHasChanged();
    }
}
