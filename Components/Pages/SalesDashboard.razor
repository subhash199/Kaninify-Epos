@page "/salesdashboard"
@using DataHandlerLibrary.Models
@using DataHandlerLibrary.Services
@using System.Web
@inject SalesTransactionServices SalesService
@inject SalesItemTransactionServices SalesItemService
@inject ProductServices ProductService
@inject StockTransactionServices StockService
@inject PosUserServices UserService
@inject NavigationManager NavigationManager
@inject DayLogServices DayLogService
@inject DepartmentServices DepartmentService
@inject IJSRuntime JSRuntime

<PageTitle>Sales Dashboard</PageTitle>

<div class="modern-dashboard">
    <!-- Header Section -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-left">
                <h1 class="dashboard-title">Sales Dashboard</h1>
                <p class="dashboard-subtitle">Real-time insights and analytics</p>
            </div>
            <div class="header-right">
                @if (!isDayLog)
                {
                    <div class="filter-buttons">
                        <button class="filter-btn active" @onclick="SetToday">Today</button>
                        <button class="filter-btn" @onclick="SetThisWeek">Weekly</button>
                        <button class="filter-btn" @onclick="SetThisMonth">Monthly</button>
                    </div>
                }
                
                    <div class="daylog-controls">
                        <button class="modern-print-btn" @onclick="PrintReport">
                            <div class="btn-content">
                                <i class="fas fa-print"></i>
                                <span>Print Report</span>
                            </div>
                        </button>
                    </div>
               
            </div>
        </div>
    </div>

    <!-- Date Range Filter -->
    <div class="date-filter-section">
        <div class="date-filter-card">
            <div class="date-inputs">
                <div class="input-group">
                    <label class="input-label">From</label>
                    <input type="date" class="modern-input" @bind="StartDate" @bind:event="oninput" readonly="@isDayLog" />
                </div>
                <div class="input-group">
                    <label class="input-label">To</label>
                    <input type="date" class="modern-input" @bind="EndDate" @bind:event="oninput" readonly="@isDayLog" />
                </div>
                @if (!isDayLog)
                {
                    <div class="quick-filters">
                        <button class="filter-chip" @onclick="SetToday">Today</button>
                        <button class="filter-chip" @onclick="SetThisWeek">Week</button>
                        <button class="filter-chip" @onclick="SetThisMonth">Month</button>
                    </div>
                    <button class="load-btn" @onclick="LoadReportData">
                        <i class="fas fa-sync-alt"></i>
                        Update
                    </button>
                }
                else
                {
                    <div class="daylog-info">
                        <span class="daylog-label">Day Log Report</span>
                        <span class="daylog-period">@(DayLog?.DayLog_Start_DateTime.ToString("dd/MM/yyyy HH:mm")) - @(DayLog?.DayLog_End_DateTime?.ToString("dd/MM/yyyy HH:mm"))</span>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading sales data...</p>
        </div>
    }
    else if (SalesData != null)
    {
        <!-- Summary Cards -->
        <div class="metrics-grid">
            <div class="metric-card primary">
                <div class="metric-icon">
                    <i class="fas fa-dollar-sign"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalSales.ToString("C")</h3>
                    <p class="metric-label">Total Sales</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+12.5%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card success">
                <div class="metric-icon">
                    <i class="fas fa-receipt"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalTransactions</h3>
                    <p class="metric-label">Total Transactions</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+8.3%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.AverageTransaction.ToString("C")</h3>
                    <p class="metric-label">Average Transaction</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+3.7%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card warning">
                <div class="metric-icon">
                    <i class="fas fa-shopping-cart"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.ItemsSold</h3>
                    <p class="metric-label">Items Sold</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+15.2%</span>
                    </div>
                </div>
            </div>

            <div class="metric-card net-sales">
                <div class="metric-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.NetSales.ToString("C")</h3>
                    <p class="metric-label">Net Sales</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+9.2%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card refunds">
                <div class="metric-icon">
                    <i class="fas fa-undo"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalRefunds.ToString("C")</h3>
                    <p class="metric-label">Refunds</p>
                    <div class="metric-detail">@SalesData.RefundCount transactions</div>
                </div>
            </div>
            <div class="metric-card payouts">
                <div class="metric-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalPayouts.ToString("C")</h3>
                    <p class="metric-label">Payouts</p>
                    <div class="metric-trend negative">
                        <i class="fas fa-arrow-down"></i>
                        <span>-2.1%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card voided">
                <div class="metric-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.VoidedSales.ToString("C")</h3>
                    <p class="metric-label">Voided Sales</p>
                    <div class="metric-detail">@SalesData.VoidCount transactions</div>
                </div>
            </div>

            <div class="metric-card success">
                <div class="metric-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.CashPayments.ToString("C")</h3>
                    <p class="metric-label">Cash Payments</p>
                    <div class="metric-detail">@SalesData.CashTransactionCount transactions</div>
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-credit-card"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.CardPayments.ToString("C")</h3>
                    <p class="metric-label">Card Payments</p>
                    <div class="metric-detail">@SalesData.CardTransactionCount transactions</div>
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-coins"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.ChangePayments.ToString("C")</h3>
                    <p class="metric-label">Change Payments</p>
                    <div class="metric-detail">@SalesData.ChangeTransactionCount transactions</div>         
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-cogs"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.OtherServices.ToString("C")</h3>
                    <p class="metric-label">Other Services</p>
                    <div class="metric-detail">Separate sales departments</div>
                </div>
            </div>
            
        </div>

        <!-- Charts Section -->
        <div class="charts-section">
            <div class="chart-container main-chart">
                <div class="chart-header">
                    <h3 class="chart-title">Sales Overview</h3>
                    <div class="chart-controls">
                        <button class="chart-btn active">Today</button>
                        <button class="chart-btn">Weekly</button>
                        <button class="chart-btn">Monthly</button>
                    </div>
                </div>
                <div class="chart-content">
                    <canvas id="salesChart" width="400" height="200"></canvas>
                </div>
            </div>
            <div class="chart-container side-chart">
                <div class="chart-header">
                    <h3 class="chart-title">Department Sales</h3>
                    <div class="chart-subtitle">Highest to Lowest</div>
                </div>
                <div class="chart-content">
                    @if (SalesData?.DepartmentSales?.Any() == true)
                    {
                        <div class="profit-items">
                            @foreach (var dept in SalesData.DepartmentSales.Take(8))
                            {
                                <div class="profit-item">
                                    <div class="profit-color" style="background: @GetDepartmentColor(SalesData.DepartmentSales.IndexOf(dept));"></div>
                                    <span class="profit-label">@dept.DepartmentName</span>
                                    <span class="profit-value">@dept.TotalSales.ToString("C")</span>
                                    <span class="profit-percentage" style="font-size: 0.8em; color: #666; margin-left: auto;">@dept.Percentage.ToString("F1")%</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-data">
                            <p>No department sales data available</p>
                        </div>
                    }
                </div>
            </div>
        </div>



        <!-- Transaction Tables -->
        <div class="tables-section">
            @if (SalesData.RefundTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">Refund Transactions</h3>
                        <div class="table-controls">
                            <span class="status-badge refund">@SalesData.RefundTransactions.Count() Refunds</span>
                            <span class="status-badge amount">@SalesData.TotalRefunds.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Transaction</div>
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Status</div>
                            <div class="table-cell">Employee</div>
                            <div class="table-cell">Date</div>
                            <div class="table-cell">Amount</div>
                            <div class="table-cell">Action</div>
                        </div>
                        @foreach (var refund in SalesData.RefundTransactions.Take(5))
                        {
                            <div class="table-row">
                                <div class="table-cell">
                                    <div class="campaign-info">
                                        <div class="campaign-icon">@refund.TransactionId.Substring(0, 2)</div>
                                        <span>@refund.TransactionId</span>
                                    </div>
                                </div>
                                <div class="table-cell">@refund.ProductName</div>
                                <div class="table-cell">
                                    <span class="status-badge refunded">Refunded</span>
                                </div>
                                <div class="table-cell">@refund.EmployeeName</div>
                                <div class="table-cell">@refund.TransactionDate.ToString("dd-MM-yyyy")</div>
                                <div class="table-cell amount">-@refund.Amount.ToString("C")</div>
                                <div class="table-cell">
                                    <div class="action-buttons">
                                        <button class="action-btn edit"><i class="fas fa-edit"></i></button>
                                        <button class="action-btn delete"><i class="fas fa-trash"></i></button>
                                        <button class="action-btn more"><i class="fas fa-ellipsis-h"></i></button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (SalesData.VoidedTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">Voided Sales</h3>
                        <div class="table-controls">
                            <span class="status-badge voided">@SalesData.VoidedTransactions.Count() Voids</span>
                            <span class="status-badge amount">@SalesData.VoidedSales.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Transaction</div>
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Status</div>
                            <div class="table-cell">Employee</div>
                            <div class="table-cell">Date</div>
                            <div class="table-cell">Amount</div>
                            <div class="table-cell">Action</div>
                        </div>
                        @foreach (var voided in SalesData.VoidedTransactions.Take(5))
                        {
                            <div class="table-row">
                                <div class="table-cell">
                                    <div class="campaign-info">
                                        <div class="campaign-icon voided">@voided.TransactionId.Substring(0, 2)</div>
                                        <span>@voided.TransactionId</span>
                                    </div>
                                </div>
                                <div class="table-cell">@voided.ProductName</div>
                                <div class="table-cell">
                                    <span class="status-badge voided">Voided</span>
                                </div>
                                <div class="table-cell">@voided.EmployeeName</div>
                                <div class="table-cell">@voided.TransactionDate.ToString("dd-MM-yyyy")</div>
                                <div class="table-cell amount">@voided.Amount.ToString("C")</div>
                                <div class="table-cell">
                                    <div class="action-buttons">
                                        <button class="action-btn edit"><i class="fas fa-edit"></i></button>
                                        <button class="action-btn delete"><i class="fas fa-trash"></i></button>
                                        <button class="action-btn more"><i class="fas fa-ellipsis-h"></i></button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (SalesData.PayoutTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">Payouts</h3>
                        <div class="table-controls">
                            <span class="status-badge payout">@SalesData.PayoutTransactions.Count() Payouts</span>
                            <span class="status-badge amount">@SalesData.TotalPayouts.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Transaction</div>
                            <div class="table-cell">Reason</div>
                            <div class="table-cell">Status</div>
                            <div class="table-cell">Recipient</div>
                            <div class="table-cell">Date</div>
                            <div class="table-cell">Amount</div>
                            <div class="table-cell">Action</div>
                        </div>
                        @foreach (var payout in SalesData.PayoutTransactions.Take(5))
                        {
                            <div class="table-row">
                                <div class="table-cell">
                                    <div class="campaign-info">
                                        <div class="campaign-icon payout">@payout.PayoutId.Substring(0, 2)</div>
                                        <span>@payout.PayoutId</span>
                                    </div>
                                </div>
                                <div class="table-cell">@payout.Reason</div>
                                <div class="table-cell">
                                    <span class="status-badge @(payout.Status.ToLower())">@payout.Status</span>
                                </div>
                                <div class="table-cell">@payout.Recipient</div>
                                <div class="table-cell">@payout.TransactionDate.ToString("dd-MM-yyyy")</div>
                                <div class="table-cell amount">@payout.Amount.ToString("C")</div>
                                <div class="table-cell">
                                    <div class="action-buttons">
                                        <button class="action-btn edit"><i class="fas fa-edit"></i></button>
                                        <button class="action-btn delete"><i class="fas fa-trash"></i></button>
                                        <button class="action-btn more"><i class="fas fa-ellipsis-h"></i></button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Employee Performance -->
        <div class="table-container employee-performance">
            <div class="table-header">
                <h3 class="table-title">
                    <i class="fas fa-users"></i>
                    Employee Performance
                </h3>
                <div class="table-controls">
                    <button class="action-btn primary">Export</button>
                    <button class="action-btn secondary">View All</button>
                </div>
            </div>
            <div class="modern-table">
                <div class="table-row table-header-row">
                    <div class="table-cell">Employee</div>
                    <div class="table-cell">Total Sales</div>
                    <div class="table-cell">Transactions</div>
                    <div class="table-cell">Items Sold</div>
                    <div class="table-cell">Avg. Service Time</div>
                    <div class="table-cell">Avg. Items per Transaction</div>
                </div>
                @if (SalesData.EmployeePerformance != null)
                {
                    @foreach (var emp in SalesData.EmployeePerformance)
                    {
                        <div class="table-row">
                            <div class="table-cell">
                                <div class="campaign-info">
                                    <div class="campaign-icon">
                                        <i class="fas fa-user"></i>
                                    </div>
                                    <span>@emp.EmployeeName</span>
                                </div>
                            </div>
                            <div class="table-cell">@emp.TotalSales.ToString("C")</div>
                            <div class="table-cell">@emp.TransactionCount</div>
                            <div class="table-cell">@emp.ItemsSold</div>
                            <div class="table-cell">@emp.AverageServiceTime.ToString(@"mm\:ss")</div>
                            <div class="table-cell">@emp.AverageItemsPerTransaction.ToString("F1")</div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Product Analysis -->
        <div class="product-analysis-section">
            <div class="analysis-grid">
                <!-- Top Products -->
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-trophy"></i>
                            Top 10 Popular Products
                        </h3>
                        <div class="table-controls">
                            <button class="action-btn primary">View All</button>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">#</div>
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Qty Sold</div>
                            <div class="table-cell">Revenue</div>
                        </div>
                        @if (SalesData.TopProducts != null)
                        {
                            @for (int i = 0; i < SalesData.TopProducts.Count && i < 10; i++)
                            {
                                var product = SalesData.TopProducts[i];
                                <div class="table-row">
                                    <div class="table-cell">
                                        <span class="status-badge success">@(i + 1)</span>
                                    </div>
                                    <div class="table-cell">
                                        <div class="campaign-info">
                                            <div class="campaign-icon">
                                                <i class="fas fa-box"></i>
                                            </div>
                                            <span>@product.ProductName</span>
                                        </div>
                                    </div>
                                    <div class="table-cell">@product.QuantitySold</div>
                                    <div class="table-cell">@product.Revenue.ToString("C")</div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <!-- Least Popular Products -->
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-exclamation-triangle"></i>
                            Least Popular Products
                        </h3>
                        <div class="table-controls">
                            <button class="action-btn secondary">Analyze</button>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Qty Sold</div>
                            <div class="table-cell">Revenue</div>
                            <div class="table-cell">Status</div>
                        </div>
                        @if (SalesData.LeastPopularProducts != null)
                        {
                            @foreach (var product in SalesData.LeastPopularProducts.Take(10))
                            {
                                <div class="table-row">
                                    <div class="table-cell">
                                        <div class="campaign-info">
                                            <div class="campaign-icon">
                                                <i class="fas fa-box-open"></i>
                                            </div>
                                            <span>@product.ProductName</span>
                                        </div>
                                    </div>
                                    <div class="table-cell">@product.QuantitySold</div>
                                    <div class="table-cell">@product.Revenue.ToString("C")</div>
                                    <div class="table-cell">
                                        @if (product.QuantitySold == 0)
                                        {
                                            <span class="status-badge danger">No Sales</span>
                                        }
                                        else
                                        {
                                            <span class="status-badge warning">Low Sales</span>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Stock Transaction Reports -->
        <div class="stock-reports-section">
            <!-- Stock Metrics -->
            <div class="metrics-grid">
                <div class="metric-card danger">
                    <div class="metric-icon">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.ExpiredProductsCount</div>
                        <div class="metric-label">Expired Products</div>
                        <div class="metric-detail">Items expired in date range</div>
                    </div>
                </div>
                <div class="metric-card warning">
                    <div class="metric-icon">
                        <i class="fas fa-user-secret"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.TheftCount</div>
                        <div class="metric-label">Theft Reports</div>
                        <div class="metric-detail">Reported theft incidents</div>
                    </div>
                </div>
                <div class="metric-card info">
                    <div class="metric-icon">
                        <i class="fas fa-exchange-alt"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.StockAdjustmentsCount</div>
                        <div class="metric-label">Stock Adjustments</div>
                        <div class="metric-detail">Total adjustments made</div>
                    </div>
                </div>
            </div>

            <!-- Stock Transactions Table -->
            @if (SalesData.StockTransactions != null && SalesData.StockTransactions.Any())
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-warehouse"></i>
                            Stock Transaction Reports
                        </h3>
                        <div class="table-controls">
                            <button class="action-btn primary">Export</button>
                            <button class="action-btn secondary">Filter</button>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Date</div>
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Transaction Type</div>
                            <div class="table-cell">Quantity</div>
                            <div class="table-cell">Reason</div>
                            <div class="table-cell">Value Impact</div>
                        </div>
                        @foreach (var stock in SalesData.StockTransactions.Take(20))
                        {
                            <div class="table-row">
                                <div class="table-cell">@stock.TransactionDate.ToString("dd/MM/yyyy")</div>
                                <div class="table-cell">
                                    <div class="campaign-info">
                                        <div class="campaign-icon">
                                            <i class="fas fa-box"></i>
                                        </div>
                                        <span>@stock.ProductName</span>
                                    </div>
                                </div>
                                <div class="table-cell">
                                    <span class="status-badge @GetStockTransactionBadgeClass(stock.TransactionType)">
                                        @stock.TransactionType
                                    </span>
                                </div>
                                <div class="table-cell">@stock.Quantity</div>
                                <div class="table-cell">@stock.Reason</div>
                                <div class="table-cell">@stock.ValueImpact.ToString("C")</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>


@inject DayLogServices DayLogService

@code {
    [Parameter] public bool isDayLog { get; set; }

    private DayLog DayLog { get; set; } = new();
    private SalesDashboardData SalesData = new();
    private DateTime StartDate = DateTime.Today;
    private DateTime EndDate = DateTime.Today;
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Parse query parameters
        var uri = NavigationManager.Uri;
        var queryParameters = System.Web.HttpUtility.ParseQueryString(new Uri(uri).Query);

        // Check for isDayLog parameter
        if (queryParameters["isDayLog"] != null && bool.TryParse(queryParameters["isDayLog"], out bool dayLogParam))
        {
            isDayLog = dayLogParam;
        }

        // Check for filter parameter
        var filter = queryParameters["filter"];
        if (filter == "today")
        {
            await SetToday();
            return;
        }

        if (isDayLog)
        {
            // Get the last daylog and set dates based on it
            DayLog = await DayLogService.GetLastDayLog();
            if (DayLog != null)
            {
                StartDate = DayLog.DayLog_Start_DateTime.Date;
                EndDate = DayLog.DayLog_End_DateTime?.Date ?? DateTime.Today;
            }
            else
            {
                // Fallback if no daylog found
                StartDate = DateTime.Today;
                EndDate = DateTime.Today.AddDays(1);
            }
        }
        else
        {
            // Set start and end date as today
            StartDate = DateTime.Today;
            EndDate = DateTime.Today.AddDays(1);
        }

        await LoadReportData();
    }

    private async Task LoadReportData()
    {
        IsLoading = true;
        StateHasChanged();
        IEnumerable<SalesTransaction> salesTransactions = Enumerable.Empty<SalesTransaction>();
        IEnumerable<StockTransaction> stockTransactions = Enumerable.Empty<StockTransaction>();

        try
        {
            // Get DayLog ID for filtering if isDayLog is true
            int? dayLogId = null;
            if (isDayLog && DayLog != null)
            {
                dayLogId = DayLog.DayLog_Id;
                salesTransactions = await SalesService.GetByConditionAsync(t => t.DayLog_Id == dayLogId, false);

                stockTransactions = await StockService.GetByConditionAsync(
                    st => st.DayLogId == dayLogId
                          , true);
            }
            else
            {
                salesTransactions = await SalesService.GetByConditionAsync(
                    t => t.Sale_Date >= StartDate && t.Sale_Date <= EndDate, false);
                // Load stock transactions for the date range
                stockTransactions = await StockService.GetByConditionAsync(
                   st => st.TransactionDate >= StartDate && st.TransactionDate <= EndDate
                         , true);
            }

            // Calculate Other Services (departments with Separate_Sales_In_Reports = true)
            var allDepartments = await DepartmentService.GetAllAsync();

            //Calculate Financial Metrics
            var cashpayment = salesTransactions.Where(t => !t.Is_Refund).Sum(t => t.SaleTransaction_Cash);

            var cashPaymentCount = salesTransactions.Where(t => t.SaleTransaction_Cash > 0).Count();

            var cardPayment = salesTransactions.Where(t => !t.Is_Refund).Sum(t => t.SaleTransaction_Card) - salesTransactions.Where
            (t => t.Is_Refund).Sum(t => t.SaleTransaction_Card);

            var cardPaymentCount = salesTransactions.Where(t => t.SaleTransaction_Card > 0).Count();

            var changePayment = salesTransactions.Sum(t => t.SaleTransaction_Change);

            var changePaymentCount = salesTransactions.Where(t => t.SaleTransaction_Change > 0).Count();

            // Load sales item transactions for detailed analysis
            var salesTransactionIds = salesTransactions.Select(t => t.SaleTransaction_ID).ToList();
            var salesItemTransactions = await SalesItemService.GetByConditionAsync(
                item => salesTransactionIds.Contains(item.SaleTransaction_ID), true);

            // Calculate basic metrics
            var totalSales = salesTransactions.Where(t => !t.Is_Refund).Sum(t => t.SaleTransaction_Total_Amount);
            var totalTransactions = salesTransactions.Count(t => !t.Is_Refund);
            var averageTransaction = totalTransactions > 0 ? totalSales / totalTransactions : 0;
            var itemsSold = salesItemTransactions.Where(item => !item.SalesTransaction.Is_Refund).Sum(item => item.Product_QTY);

            // Calculate refunds
            var refundTransactions = salesTransactions.Where(t => t.Is_Refund).ToList();
            var totalRefunds = refundTransactions.Sum(t => t.SaleTransaction_Total_Amount);
            var refundCount = refundTransactions.Count;

            // Calculate payouts
            var payoutItems = salesItemTransactions.Where(item => item.SalesPayout != null).ToList();
            var totalPayouts = payoutItems.Sum(item => item.Product_Total_Amount);

            // Calculate voided sales (assuming voided items have negative quantities or specific logic)
            var voidedItems = salesItemTransactions.Where(item => item.Product_QTY < 0).ToList();
            var voidedSales = Math.Abs(voidedItems.Sum(item => item.Product_Total_Amount));
            var voidCount = voidedItems.Count;

            // Calculate net sales
            var netSales = totalSales + totalRefunds;

            // Calculate time-based sales
            var morningSales = salesTransactions.Where(t => !t.Is_Refund && t.Sale_Date.Hour < 12).Sum(t => t.SaleTransaction_Total_Amount);
            var morningTransactions = salesTransactions.Count(t => !t.Is_Refund && t.Sale_Date.Hour < 12);
            var afternoonSales = salesTransactions.Where(t => !t.Is_Refund && t.Sale_Date.Hour >= 12 && t.Sale_Date.Hour < 18).Sum(t => t.SaleTransaction_Total_Amount);
            var afternoonTransactions = salesTransactions.Count(t => !t.Is_Refund && t.Sale_Date.Hour >= 12 && t.Sale_Date.Hour < 18);
            var nightSales = salesTransactions.Where(t => !t.Is_Refund && t.Sale_Date.Hour >= 18).Sum(t => t.SaleTransaction_Total_Amount);
            var nightTransactions = salesTransactions.Count(t => !t.Is_Refund && t.Sale_Date.Hour >= 18);

            // Calculate employee performance
            var employeePerformance = salesTransactions
                .Where(t => !t.Is_Refund && t.Created_By != null)
                .GroupBy(t => t.Created_By)
                .Select(g => new EmployeePerformanceData
                {
                    EmployeeName = g.Key.First_Name ?? "Unknown",
                    TotalSales = g.Sum(t => t.SaleTransaction_Total_Amount),
                    TransactionCount = g.Count(),
                    ItemsSold = g.SelectMany(t => t.SalesItemTransactions ?? new List<SalesItemTransaction>()).Sum(item => item.Product_QTY),
                    AverageServiceTime = TimeSpan.FromMinutes(3.5), // This would need more complex calculation based on transaction timestamps
                    AverageItemsPerTransaction = g.Count() > 0 ? (double)g.SelectMany(t => t.SalesItemTransactions ?? new List<SalesItemTransaction>()).Sum(item => item.Product_QTY) / g.Count() : 0
                })
                .OrderByDescending(e => e.TotalSales)
                .Take(10)
                .ToList();

            // Calculate top products
            var topProducts = salesItemTransactions
                .Where(item => !item.SalesTransaction.Is_Refund && item.Product != null)
                .GroupBy(item => item.Product)
                .Select(g => new ProductSalesData
                {
                    ProductName = g.Key.Product_Name,
                    QuantitySold = g.Sum(item => item.Product_QTY),
                    Revenue = g.Sum(item => item.Product_Total_Amount)
                })
                .OrderByDescending(p => p.Revenue)
                .Take(5)
                .ToList();

            // Calculate least popular products (products with low sales)
            var leastPopularProducts = salesItemTransactions
                .Where(item => !item.SalesTransaction.Is_Refund && item.Product != null)
                .GroupBy(item => item.Product)
                .Select(g => new ProductSalesData
                {
                    ProductName = g.Key.Product_Name,
                    QuantitySold = g.Sum(item => item.Product_QTY),
                    Revenue = g.Sum(item => item.Product_Total_Amount)
                })
                .OrderBy(p => p.QuantitySold)
                .Take(4)
                .ToList();

            // Calculate stock transaction counts
            var expiredProductsCount = stockTransactions.Count(st => st.StockTransactionType == DataHandlerLibrary.Models.StockTransferType.Expired);
            var theftCount = stockTransactions.Count(st => st.StockTransactionType == DataHandlerLibrary.Models.StockTransferType.Theft);
            var stockAdjustmentsCount = stockTransactions.Count(st => st.StockTransactionType == DataHandlerLibrary.Models.StockTransferType.Adjustment);

            // Get recent stock transactions
            var recentStockTransactions = stockTransactions
                .OrderByDescending(st => st.TransactionDate)
                .Take(10)
                .Select(st => new StockTransactionData
                {
                    TransactionDate = st.TransactionDate,
                    ProductName = st.Product?.Product_Name ?? "Unknown Product",
                    TransactionType = st.StockTransactionType.ToString(),
                    Quantity = st.Quantity,
                    Reason = "",
                    ValueImpact = st.TotalAmount
                })
                .ToList();

            // Get refund transaction details
            var refundTransactionDetails = refundTransactions
                .SelectMany(t => t.SalesItemTransactions ?? new List<SalesItemTransaction>())
                .Select(item => new RefundTransactionData
                {
                    TransactionDate = item.SalesTransaction.Sale_Date,
                    TransactionId = $"TXN{item.SalesTransaction.SaleTransaction_ID:D6}",
                    ProductName = item.Product?.Product_Name ?? "Unknown Product",
                    Quantity = item.Product_QTY,
                    Amount = item.Product_Total_Amount,
                    Reason = "Refund", // You might want to add a reason field to your model
                    EmployeeName = item.SalesTransaction.Created_By?.First_Name ?? "Unknown"
                })
                .OrderByDescending(r => r.TransactionDate)
                .Take(10)
                .ToList();

            // Get voided transaction details
            var voidedTransactionDetails = voidedItems
                .Select(item => new VoidedTransactionData
                {
                    TransactionDate = item.SalesTransaction.Sale_Date,
                    TransactionId = $"TXN{item.SalesTransaction.SaleTransaction_ID:D6}",
                    ProductName = item.Product?.Product_Name ?? "Unknown Product",
                    Quantity = Math.Abs(item.Product_QTY),
                    Amount = Math.Abs(item.Product_Total_Amount),
                    Reason = "Voided", // You might want to add a reason field to your model
                    EmployeeName = item.SalesTransaction.Created_By?.First_Name ?? "Unknown"
                })
                .OrderByDescending(v => v.TransactionDate)
                .Take(10)
                .ToList();

            // Get payout transaction details
            var payoutTransactionDetails = payoutItems
                .Select(item => new PayoutTransactionData
                {
                    TransactionDate = item.SalesTransaction.Sale_Date,
                    PayoutId = $"PAY{item.SalesPayout?.Payout_Id:D3}",
                    Amount = item.Product_Total_Amount,
                    Reason = item.SalesPayout?.Payout_Description ?? "Payout",
                    Recipient = "Till", // You might want to add recipient information to your model
                    EmployeeName = item.SalesTransaction.Created_By?.First_Name ?? "Unknown",
                    Status = "Completed"
                })
                .OrderByDescending(p => p.TransactionDate)
                .Take(10)
                .ToList();

            // Calculate department sales
            var departmentSales = salesItemTransactions
                .Where(item => item.Product?.Department_ID != null)
                .GroupBy(item => item.Product.Department_ID)
                .Select(group => new DepartmentSalesData
                {
                    DepartmentName = allDepartments.FirstOrDefault(d => d.Department_ID == group.Key)?.Department_Name ?? "Unknown Department",
                    TotalSales = group.Sum(item => item.Product_Total_Amount),
                    TransactionCount = group.Select(item => item.SaleTransaction_ID).Distinct().Count(),
                    ItemsSold = group.Sum(item => item.Product_QTY)
                })
                .OrderByDescending(d => d.TotalSales)
                .ToList();

            // Calculate percentages for department sales
            var totalDepartmentSales = departmentSales.Sum(d => d.TotalSales);
            foreach (var dept in departmentSales)
            {
                dept.Percentage = totalDepartmentSales > 0 ? (dept.TotalSales / totalDepartmentSales) * 100 : 0;
            }

           
            var separateSalesDepartmentIds = allDepartments
                .Where(d => d.Separate_Sales_In_Reports)
                .Select(d => d.Department_ID)
                .ToList();
            
            var otherServices = salesItemTransactions
                .Where(item => item.Product?.Department_ID != null && 
                              separateSalesDepartmentIds.Contains(item.Product.Department_ID))
                .Sum(item => item.Product_Total_Amount);

            SalesData = new SalesDashboardData
            {
                TotalSales = totalSales,
                TotalTransactions = totalTransactions,
                AverageTransaction = averageTransaction,
                ItemsSold = itemsSold,

                // Financial Metrics
                NetSales = netSales,
                TotalRefunds = totalRefunds,
                RefundCount = refundCount,
                TotalPayouts = totalPayouts,
                VoidedSales = voidedSales,
                VoidCount = voidCount,

                //Payment Metrics
                CashPayments = cashpayment,
                CardPayments = cardPayment,
                ChangePayments = changePayment,              

                //Payment count Metrics
                CashTransactionCount = cashPaymentCount,
                CardTransactionCount = cardPaymentCount,
                ChangeTransactionCount = changePaymentCount,
                OtherServices = otherServices,

                // Time-based sales
                MorningSales = morningSales,
                MorningTransactions = morningTransactions,
                AfternoonSales = afternoonSales,
                AfternoonTransactions = afternoonTransactions,
                NightSales = nightSales,
                NightTransactions = nightTransactions,

                // Employee performance
                EmployeePerformance = employeePerformance,

                // Top products
                TopProducts = topProducts,

                // Least popular products
                LeastPopularProducts = leastPopularProducts,

                // Stock transactions
                ExpiredProductsCount = expiredProductsCount,
                TheftCount = theftCount,
                StockAdjustmentsCount = stockAdjustmentsCount,
                StockTransactions = recentStockTransactions,

                // Transaction Details
                RefundTransactions = refundTransactionDetails,
                VoidedTransactions = voidedTransactionDetails,
                PayoutTransactions = payoutTransactionDetails,
                
                // Department Sales
                DepartmentSales = departmentSales
            };
        }
        catch (Exception ex)
        {
            // Log the error and show a user-friendly message
            Console.WriteLine($"Error loading sales data: {ex.Message}");
            // You might want to show a toast notification or error message to the user
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetToday()
    {
        StartDate = DateTime.Today;
        EndDate = DateTime.Today.AddDays(1);
        await LoadReportData();
    }

    private async Task SetThisWeek()
    {
        var today = DateTime.Today;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        StartDate = startOfWeek;
        EndDate = today;
        await LoadReportData();
    }

    private async Task SetThisMonth()
    {
        var today = DateTime.Today;
        StartDate = new DateTime(today.Year, today.Month, 1);
        EndDate = today;
        await LoadReportData();
    }

    private string GetStockTransactionBadgeClass(string transactionType)
    {
        return transactionType.ToLower() switch
        {
            "expiry" => "background-colour-light-pink",
            "theft" => "bg-warning",
            "adjustment" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetDepartmentColor(int index)
    {
        var colors = new string[]
        {
            "#6366f1", // Blue
            "#8b5cf6", // Purple
            "#06b6d4", // Cyan
            "#10b981", // Green
            "#f59e0b", // Orange
            "#ef4444", // Red
            "#84cc16", // Lime
            "#ec4899"  // Pink
        };
        return colors[index % colors.Length];
    }

    private async Task PrintReport()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.print");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error printing report: {ex.Message}");
        }
    }

    // Data models
    public class SalesDashboardData
    {
        public decimal TotalSales { get; set; }
        public int TotalTransactions { get; set; }
        public decimal AverageTransaction { get; set; }
        public int ItemsSold { get; set; }

        // Financial Metrics
        public decimal NetSales { get; set; }
        public decimal TotalRefunds { get; set; }
        public int RefundCount { get; set; }
        public decimal TotalPayouts { get; set; }
        public decimal VoidedSales { get; set; }
        public int VoidCount { get; set; }

        //Payment Metrics
        public decimal CashPayments { get; set; }
        public decimal CardPayments { get; set; }
        public decimal ChangePayments { get; set; }

        //Payment Count
        public int CashTransactionCount { get; set; }
        public int CardTransactionCount { get; set; }
        public int ChangeTransactionCount { get; set; }
        public decimal OtherServices { get; set; }

        public decimal MorningSales { get; set; }
        public int MorningTransactions { get; set; }
        public decimal AfternoonSales { get; set; }
        public int AfternoonTransactions { get; set; }
        public decimal NightSales { get; set; }
        public int NightTransactions { get; set; }

        public List<EmployeePerformanceData> EmployeePerformance { get; set; } = new();
        public List<ProductSalesData> TopProducts { get; set; } = new();
        public List<ProductSalesData> LeastPopularProducts { get; set; } = new();

        public int ExpiredProductsCount { get; set; }
        public int TheftCount { get; set; }
        public int StockAdjustmentsCount { get; set; }
        public List<StockTransactionData> StockTransactions { get; set; } = new();

        // Transaction Details
        public List<RefundTransactionData> RefundTransactions { get; set; } = new();
        public List<VoidedTransactionData> VoidedTransactions { get; set; } = new();
        public List<PayoutTransactionData> PayoutTransactions { get; set; } = new();
        
        // Department Sales
        public List<DepartmentSalesData> DepartmentSales { get; set; } = new();
    }

    public class EmployeePerformanceData
    {
        public string EmployeeName { get; set; } = string.Empty;
        public decimal TotalSales { get; set; }
        public int TransactionCount { get; set; }
        public int ItemsSold { get; set; }
        public TimeSpan AverageServiceTime { get; set; }
        public double AverageItemsPerTransaction { get; set; }
    }

    public class ProductSalesData
    {
        public string ProductName { get; set; } = string.Empty;
        public int QuantitySold { get; set; }
        public decimal Revenue { get; set; }
    }

    public class StockTransactionData
    {
        public DateTime TransactionDate { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public string TransactionType { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public string Reason { get; set; } = string.Empty;
        public decimal ValueImpact { get; set; }
    }

    public class RefundTransactionData
    {
        public DateTime TransactionDate { get; set; }
        public string TransactionId { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public decimal Amount { get; set; }
        public string Reason { get; set; } = string.Empty;
        public string EmployeeName { get; set; } = string.Empty;
    }

    public class VoidedTransactionData
    {
        public DateTime TransactionDate { get; set; }
        public string TransactionId { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public decimal Amount { get; set; }
        public string Reason { get; set; } = string.Empty;
        public string EmployeeName { get; set; } = string.Empty;
    }

    public class PayoutTransactionData
    {
        public DateTime TransactionDate { get; set; }
        public string PayoutId { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public string Reason { get; set; } = string.Empty;
        public string Recipient { get; set; } = string.Empty;
        public string EmployeeName { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
    }

    public class DepartmentSalesData
    {
        public string DepartmentName { get; set; } = string.Empty;
        public decimal TotalSales { get; set; }
        public int TransactionCount { get; set; }
        public int ItemsSold { get; set; }
        public decimal Percentage { get; set; }
    }
}