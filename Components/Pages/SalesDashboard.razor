@page "/salesdashboard"
@using DataHandlerLibrary.Models
@using DataHandlerLibrary.Services
@inject SalesTransactionServices SalesService
@inject SalesItemTransactionServices SalesItemService
@inject ProductServices ProductService
@inject StockTransactionServices StockService
@inject PosUserServices UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Sales Dashboard</PageTitle>

<div class="modern-dashboard">
    <!-- Header Section -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-left">
                <h1 class="dashboard-title">Sales Dashboard</h1>
                <p class="dashboard-subtitle">Real-time insights and analytics</p>
            </div>
            <div class="header-right">
                <div class="filter-buttons">
                    <button class="filter-btn active" @onclick="SetToday">Today</button>
                    <button class="filter-btn" @onclick="SetThisWeek">Weekly</button>
                    <button class="filter-btn" @onclick="SetThisMonth">Monthly</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Date Range Filter -->
    <div class="date-filter-section">
        <div class="date-filter-card">
            <div class="date-inputs">
                <div class="input-group">
                    <label class="input-label">From</label>
                    <input type="date" class="modern-input" @bind="StartDate" @bind:event="oninput" />
                </div>
                <div class="input-group">
                    <label class="input-label">To</label>
                    <input type="date" class="modern-input" @bind="EndDate" @bind:event="oninput" />
                </div>
                <div class="quick-filters">
                    <button class="filter-chip" @onclick="SetToday">Today</button>
                    <button class="filter-chip" @onclick="SetThisWeek">Week</button>
                    <button class="filter-chip" @onclick="SetThisMonth">Month</button>
                </div>
                <button class="load-btn" @onclick="LoadReportData">
                    <i class="fas fa-sync-alt"></i>
                    Update
                </button>
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading sales data...</p>
        </div>
    }
    else if (SalesData != null)
    {
        <!-- Summary Cards -->
        <div class="metrics-grid">
            <div class="metric-card primary">
                <div class="metric-icon">
                    <i class="fas fa-dollar-sign"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalSales.ToString("C")</h3>
                    <p class="metric-label">Total Sales</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+12.5%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card success">
                <div class="metric-icon">
                    <i class="fas fa-receipt"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalTransactions</h3>
                    <p class="metric-label">Total Transactions</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+8.3%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.AverageTransaction.ToString("C")</h3>
                    <p class="metric-label">Average Transaction</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+3.7%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card warning">
                <div class="metric-icon">
                    <i class="fas fa-shopping-cart"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.ItemsSold</h3>
                    <p class="metric-label">Items Sold</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+15.2%</span>
                    </div>
                </div>
            </div>

            <div class="metric-card net-sales">
                <div class="metric-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.NetSales.ToString("C")</h3>
                    <p class="metric-label">Net Sales</p>
                    <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+9.2%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card refunds">
                <div class="metric-icon">
                    <i class="fas fa-undo"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalRefunds.ToString("C")</h3>
                    <p class="metric-label">Refunds</p>
                    <div class="metric-detail">@SalesData.RefundCount transactions</div>
                </div>
            </div>
            <div class="metric-card payouts">
                <div class="metric-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalPayouts.ToString("C")</h3>
                    <p class="metric-label">Payouts</p>
                    <div class="metric-trend negative">
                        <i class="fas fa-arrow-down"></i>
                        <span>-2.1%</span>
                    </div>
                </div>
            </div>
            <div class="metric-card voided">
                <div class="metric-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.VoidedSales.ToString("C")</h3>
                    <p class="metric-label">Voided Sales</p>
                    <div class="metric-detail">@SalesData.VoidCount transactions</div>
                </div>
            </div>

            @* <div class="metric-card success">
                <div class="metric-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.CashPayments.ToString("C")</h3>
                    <p class="metric-label">Cash Payments</p>
                    <div class="metric-detail">@SalesData.CashTransactionCount transactions</div>
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-credit-card"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.CardPayments.ToString("C")</h3>
                    <p class="metric-label">Card Payments</p>
                    <div class="metric-detail">@SalesData.CardTransactionCount transactions</div>
                </div>
            </div> *@
        </div>

        <!-- Charts Section -->
        <div class="charts-section">
            <div class="chart-container main-chart">
                <div class="chart-header">
                    <h3 class="chart-title">Sales Overview</h3>
                    <div class="chart-controls">
                        <button class="chart-btn active">Today</button>
                        <button class="chart-btn">Weekly</button>
                        <button class="chart-btn">Monthly</button>
                    </div>
                </div>
                <div class="chart-content">
                    <canvas id="salesChart" width="400" height="200"></canvas>
                </div>
            </div>
            <div class="chart-container side-chart">
                <div class="chart-header">
                    <h3 class="chart-title">Profit by Sale</h3>
                    <div class="chart-subtitle">Sort by</div>
                </div>
                <div class="chart-content">
                    <div class="profit-items">
                        <div class="profit-item">
                            <div class="profit-color" style="background: #6366f1;"></div>
                            <span class="profit-label">Total Sales</span>
                            <span class="profit-value">$3,345</span>
                        </div>
                        <div class="profit-item">
                            <div class="profit-color" style="background: #8b5cf6;"></div>
                            <span class="profit-label">Total Profit</span>
                            <span class="profit-value">$3,345</span>
                        </div>
                        <div class="profit-item">
                            <div class="profit-color" style="background: #06b6d4;"></div>
                            <span class="profit-label">Total Revenue</span>
                            <span class="profit-value">$3,345</span>
                        </div>
                        <div class="profit-item">
                            <div class="profit-color" style="background: #10b981;"></div>
                            <span class="profit-label">Total Loss</span>
                            <span class="profit-value">$1,345</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>



        <!-- Transaction Tables -->
        <div class="tables-section">
            @if (SalesData.RefundTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">Refund Transactions</h3>
                        <div class="table-controls">
                            <span class="status-badge refund">@SalesData.RefundTransactions.Count() Refunds</span>
                            <span class="status-badge amount">@SalesData.TotalRefunds.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Transaction</div>
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Status</div>
                            <div class="table-cell">Employee</div>
                            <div class="table-cell">Date</div>
                            <div class="table-cell">Amount</div>
                            <div class="table-cell">Action</div>
                        </div>
                        @foreach (var refund in SalesData.RefundTransactions.Take(5))
                        {
                            <div class="table-row">
                                <div class="table-cell">
                                    <div class="campaign-info">
                                        <div class="campaign-icon">@refund.TransactionId.Substring(0, 2)</div>
                                        <span>@refund.TransactionId</span>
                                    </div>
                                </div>
                                <div class="table-cell">@refund.ProductName</div>
                                <div class="table-cell">
                                    <span class="status-badge refunded">Refunded</span>
                                </div>
                                <div class="table-cell">@refund.EmployeeName</div>
                                <div class="table-cell">@refund.TransactionDate.ToString("dd-MM-yyyy")</div>
                                <div class="table-cell amount">-@refund.Amount.ToString("C")</div>
                                <div class="table-cell">
                                    <div class="action-buttons">
                                        <button class="action-btn edit"><i class="fas fa-edit"></i></button>
                                        <button class="action-btn delete"><i class="fas fa-trash"></i></button>
                                        <button class="action-btn more"><i class="fas fa-ellipsis-h"></i></button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (SalesData.VoidedTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">Voided Sales</h3>
                        <div class="table-controls">
                            <span class="status-badge voided">@SalesData.VoidedTransactions.Count() Voids</span>
                            <span class="status-badge amount">@SalesData.VoidedSales.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Transaction</div>
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Status</div>
                            <div class="table-cell">Employee</div>
                            <div class="table-cell">Date</div>
                            <div class="table-cell">Amount</div>
                            <div class="table-cell">Action</div>
                        </div>
                        @foreach (var voided in SalesData.VoidedTransactions.Take(5))
                        {
                            <div class="table-row">
                                <div class="table-cell">
                                    <div class="campaign-info">
                                        <div class="campaign-icon voided">@voided.TransactionId.Substring(0, 2)</div>
                                        <span>@voided.TransactionId</span>
                                    </div>
                                </div>
                                <div class="table-cell">@voided.ProductName</div>
                                <div class="table-cell">
                                    <span class="status-badge voided">Voided</span>
                                </div>
                                <div class="table-cell">@voided.EmployeeName</div>
                                <div class="table-cell">@voided.TransactionDate.ToString("dd-MM-yyyy")</div>
                                <div class="table-cell amount">@voided.Amount.ToString("C")</div>
                                <div class="table-cell">
                                    <div class="action-buttons">
                                        <button class="action-btn edit"><i class="fas fa-edit"></i></button>
                                        <button class="action-btn delete"><i class="fas fa-trash"></i></button>
                                        <button class="action-btn more"><i class="fas fa-ellipsis-h"></i></button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (SalesData.PayoutTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">Payouts</h3>
                        <div class="table-controls">
                            <span class="status-badge payout">@SalesData.PayoutTransactions.Count() Payouts</span>
                            <span class="status-badge amount">@SalesData.TotalPayouts.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Transaction</div>
                            <div class="table-cell">Reason</div>
                            <div class="table-cell">Status</div>
                            <div class="table-cell">Recipient</div>
                            <div class="table-cell">Date</div>
                            <div class="table-cell">Amount</div>
                            <div class="table-cell">Action</div>
                        </div>
                        @foreach (var payout in SalesData.PayoutTransactions.Take(5))
                        {
                            <div class="table-row">
                                <div class="table-cell">
                                    <div class="campaign-info">
                                        <div class="campaign-icon payout">@payout.PayoutId.Substring(0, 2)</div>
                                        <span>@payout.PayoutId</span>
                                    </div>
                                </div>
                                <div class="table-cell">@payout.Reason</div>
                                <div class="table-cell">
                                    <span class="status-badge @(payout.Status.ToLower())">@payout.Status</span>
                                </div>
                                <div class="table-cell">@payout.Recipient</div>
                                <div class="table-cell">@payout.TransactionDate.ToString("dd-MM-yyyy")</div>
                                <div class="table-cell amount">@payout.Amount.ToString("C")</div>
                                <div class="table-cell">
                                    <div class="action-buttons">
                                        <button class="action-btn edit"><i class="fas fa-edit"></i></button>
                                        <button class="action-btn delete"><i class="fas fa-trash"></i></button>
                                        <button class="action-btn more"><i class="fas fa-ellipsis-h"></i></button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Employee Performance -->
        <div class="table-container employee-performance">
            <div class="table-header">
                <h3 class="table-title">
                    <i class="fas fa-users"></i>
                    Employee Performance
                </h3>
                <div class="table-controls">
                    <button class="action-btn primary">Export</button>
                    <button class="action-btn secondary">View All</button>
                </div>
            </div>
            <div class="modern-table">
                <div class="table-row table-header-row">
                    <div class="table-cell">Employee</div>
                    <div class="table-cell">Total Sales</div>
                    <div class="table-cell">Transactions</div>
                    <div class="table-cell">Items Sold</div>
                    <div class="table-cell">Avg. Service Time</div>
                    <div class="table-cell">Avg. Items per Transaction</div>
                </div>
                @if (SalesData.EmployeePerformance != null)
                {
                    @foreach (var emp in SalesData.EmployeePerformance)
                    {
                        <div class="table-row">
                            <div class="table-cell">
                                <div class="campaign-info">
                                    <div class="campaign-icon">
                                        <i class="fas fa-user"></i>
                                    </div>
                                    <span>@emp.EmployeeName</span>
                                </div>
                            </div>
                            <div class="table-cell">@emp.TotalSales.ToString("C")</div>
                            <div class="table-cell">@emp.TransactionCount</div>
                            <div class="table-cell">@emp.ItemsSold</div>
                            <div class="table-cell">@emp.AverageServiceTime.ToString(@"mm\:ss")</div>
                            <div class="table-cell">@emp.AverageItemsPerTransaction.ToString("F1")</div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Product Analysis -->
        <div class="product-analysis-section">
            <div class="analysis-grid">
                <!-- Top Products -->
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-trophy"></i>
                            Top 10 Popular Products
                        </h3>
                        <div class="table-controls">
                            <button class="action-btn primary">View All</button>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">#</div>
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Qty Sold</div>
                            <div class="table-cell">Revenue</div>
                        </div>
                        @if (SalesData.TopProducts != null)
                        {
                            @for (int i = 0; i < SalesData.TopProducts.Count && i < 10; i++)
                            {
                                var product = SalesData.TopProducts[i];
                                <div class="table-row">
                                    <div class="table-cell">
                                        <span class="status-badge success">@(i + 1)</span>
                                    </div>
                                    <div class="table-cell">
                                        <div class="campaign-info">
                                            <div class="campaign-icon">
                                                <i class="fas fa-box"></i>
                                            </div>
                                            <span>@product.ProductName</span>
                                        </div>
                                    </div>
                                    <div class="table-cell">@product.QuantitySold</div>
                                    <div class="table-cell">@product.Revenue.ToString("C")</div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <!-- Least Popular Products -->
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-exclamation-triangle"></i>
                            Least Popular Products
                        </h3>
                        <div class="table-controls">
                            <button class="action-btn secondary">Analyze</button>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Qty Sold</div>
                            <div class="table-cell">Revenue</div>
                            <div class="table-cell">Status</div>
                        </div>
                        @if (SalesData.LeastPopularProducts != null)
                        {
                            @foreach (var product in SalesData.LeastPopularProducts.Take(10))
                            {
                                <div class="table-row">
                                    <div class="table-cell">
                                        <div class="campaign-info">
                                            <div class="campaign-icon">
                                                <i class="fas fa-box-open"></i>
                                            </div>
                                            <span>@product.ProductName</span>
                                        </div>
                                    </div>
                                    <div class="table-cell">@product.QuantitySold</div>
                                    <div class="table-cell">@product.Revenue.ToString("C")</div>
                                    <div class="table-cell">
                                        @if (product.QuantitySold == 0)
                                        {
                                            <span class="status-badge danger">No Sales</span>
                                        }
                                        else
                                        {
                                            <span class="status-badge warning">Low Sales</span>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Stock Transaction Reports -->
        <div class="stock-reports-section">
            <!-- Stock Metrics -->
            <div class="metrics-grid">
                <div class="metric-card danger">
                    <div class="metric-icon">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.ExpiredProductsCount</div>
                        <div class="metric-label">Expired Products</div>
                        <div class="metric-detail">Items expired in date range</div>
                    </div>
                </div>
                <div class="metric-card warning">
                    <div class="metric-icon">
                        <i class="fas fa-user-secret"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.TheftCount</div>
                        <div class="metric-label">Theft Reports</div>
                        <div class="metric-detail">Reported theft incidents</div>
                    </div>
                </div>
                <div class="metric-card info">
                    <div class="metric-icon">
                        <i class="fas fa-exchange-alt"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.StockAdjustmentsCount</div>
                        <div class="metric-label">Stock Adjustments</div>
                        <div class="metric-detail">Total adjustments made</div>
                    </div>
                </div>
            </div>

            <!-- Stock Transactions Table -->
            @if (SalesData.StockTransactions != null && SalesData.StockTransactions.Any())
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-warehouse"></i>
                            Stock Transaction Reports
                        </h3>
                        <div class="table-controls">
                            <button class="action-btn primary">Export</button>
                            <button class="action-btn secondary">Filter</button>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell">Date</div>
                            <div class="table-cell">Product</div>
                            <div class="table-cell">Transaction Type</div>
                            <div class="table-cell">Quantity</div>
                            <div class="table-cell">Reason</div>
                            <div class="table-cell">Value Impact</div>
                        </div>
                        @foreach (var stock in SalesData.StockTransactions.Take(20))
                        {
                            <div class="table-row">
                                <div class="table-cell">@stock.TransactionDate.ToString("dd/MM/yyyy")</div>
                                <div class="table-cell">
                                    <div class="campaign-info">
                                        <div class="campaign-icon">
                                            <i class="fas fa-box"></i>
                                        </div>
                                        <span>@stock.ProductName</span>
                                    </div>
                                </div>
                                <div class="table-cell">
                                    <span class="status-badge @GetStockTransactionBadgeClass(stock.TransactionType)">
                                        @stock.TransactionType
                                    </span>
                                </div>
                                <div class="table-cell">@stock.Quantity</div>
                                <div class="table-cell">@stock.Reason</div>
                                <div class="table-cell">@stock.ValueImpact.ToString("C")</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>


@code {
    [Parameter] public DayLog dayLog { get; set; }

    private SalesDashboardData SalesData = new();
    private DateTime StartDate = DateTime.Today;
    private DateTime EndDate = DateTime.Today;
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {

        StartDate = DateTime.Today;
        EndDate = DateTime.Today;


        await LoadReportData();
    }

    private async Task LoadReportData()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            // TODO: Replace with actual data loading from your services
            await Task.Delay(500); // Simulate loading

            SalesData = new SalesDashboardData
            {
                TotalSales = 2547.89m,
                TotalTransactions = 47,
                AverageTransaction = 54.21m,
                ItemsSold = 156,

                // Financial Metrics
                NetSales = 2347.89m, // Total Sales minus refunds and voids
                TotalRefunds = 125.50m,
                RefundCount = 3,
                TotalPayouts = 200.00m,
                VoidedSales = 74.50m,
                VoidCount = 2,

                // Time-based sales
                MorningSales = 856.23m,
                MorningTransactions = 15,
                AfternoonSales = 1245.67m,
                AfternoonTransactions = 22,
                NightSales = 445.99m,
                NightTransactions = 10,

                // Employee performance
                EmployeePerformance = new List<EmployeePerformanceData>
                {
                    new() { EmployeeName = "John Smith", TotalSales = 1250.45m, TransactionCount = 23, ItemsSold = 78, AverageServiceTime = TimeSpan.FromMinutes(3.5), AverageItemsPerTransaction = 3.4 },
                    new() { EmployeeName = "Sarah Johnson", TotalSales = 987.32m, TransactionCount = 18, ItemsSold = 56, AverageServiceTime = TimeSpan.FromMinutes(2.8), AverageItemsPerTransaction = 3.1 },
                    new() { EmployeeName = "Mike Wilson", TotalSales = 310.12m, TransactionCount = 6, ItemsSold = 22, AverageServiceTime = TimeSpan.FromMinutes(4.2), AverageItemsPerTransaction = 3.7 }
                },

                // Top products
                TopProducts = new List<ProductSalesData>
                {
                    new() { ProductName = "Coffee - Large", QuantitySold = 45, Revenue = 225.00m },
                    new() { ProductName = "Sandwich - Ham & Cheese", QuantitySold = 32, Revenue = 192.00m },
                    new() { ProductName = "Energy Drink", QuantitySold = 28, Revenue = 84.00m },
                    new() { ProductName = "Chocolate Bar", QuantitySold = 25, Revenue = 62.50m },
                    new() { ProductName = "Bottled Water", QuantitySold = 23, Revenue = 34.50m }
                },

                // Least popular products
                LeastPopularProducts = new List<ProductSalesData>
                {
                    new() { ProductName = "Premium Tea", QuantitySold = 0, Revenue = 0m },
                    new() { ProductName = "Organic Juice", QuantitySold = 1, Revenue = 4.50m },
                    new() { ProductName = "Protein Bar", QuantitySold = 2, Revenue = 8.00m },
                    new() { ProductName = "Gourmet Cookie", QuantitySold = 3, Revenue = 9.00m }
                },

                // Stock transactions
                ExpiredProductsCount = 5,
                TheftCount = 2,
                StockAdjustmentsCount = 8,
                StockTransactions = new List<StockTransactionData>
                {
                    new() { TransactionDate = DateTime.Today.AddDays(-1), ProductName = "Milk 1L", TransactionType = "Expiry", Quantity = 3, Reason = "Past expiration date", ValueImpact = -12.50m },
                    new() { TransactionDate = DateTime.Today, ProductName = "Cigarettes", TransactionType = "Theft", Quantity = 2, Reason = "Shoplifting incident", ValueImpact = -25.00m },
                    new() { TransactionDate = DateTime.Today, ProductName = "Bread", TransactionType = "Adjustment", Quantity = -1, Reason = "Damaged packaging", ValueImpact = -2.50m }
                },

                // Transaction Details
                RefundTransactions = new List<RefundTransactionData>
                {
                    new() { TransactionDate = DateTime.Today.AddHours(-2), TransactionId = "TXN001", ProductName = "Coffee - Large", Quantity = 1, Amount = 5.50m, Reason = "Customer complaint - cold coffee", EmployeeName = "Sarah Johnson" },
                    new() { TransactionDate = DateTime.Today.AddHours(-4), TransactionId = "TXN045", ProductName = "Sandwich - Ham & Cheese", Quantity = 2, Amount = 12.00m, Reason = "Wrong order", EmployeeName = "John Smith" },
                    new() { TransactionDate = DateTime.Today.AddDays(-1), TransactionId = "TXN089", ProductName = "Energy Drink", Quantity = 1, Amount = 3.00m, Reason = "Defective product", EmployeeName = "Mike Wilson" }
                },

                VoidedTransactions = new List<VoidedTransactionData>
                {
                    new() { TransactionDate = DateTime.Today.AddHours(-1), TransactionId = "TXN123", ProductName = "Chocolate Bar", Quantity = 3, Amount = 7.50m, Reason = "Payment declined", EmployeeName = "Sarah Johnson" },
                    new() { TransactionDate = DateTime.Today.AddHours(-3), TransactionId = "TXN156", ProductName = "Bottled Water", Quantity = 5, Amount = 7.50m, Reason = "Customer changed mind", EmployeeName = "John Smith" }
                },

                PayoutTransactions = new List<PayoutTransactionData>
                {
                    new() { TransactionDate = DateTime.Today.AddHours(-1), PayoutId = "PAY001", Amount = 50.00m, Reason = "Till float adjustment", Recipient = "Manager", EmployeeName = "John Smith", Status = "Approved" },
                    new() { TransactionDate = DateTime.Today.AddHours(-3), PayoutId = "PAY002", Amount = 25.00m, Reason = "Petty cash withdrawal", Recipient = "Maintenance", EmployeeName = "Sarah Johnson", Status = "Pending" },
                    new() { TransactionDate = DateTime.Today.AddDays(-1), PayoutId = "PAY003", Amount = 100.00m, Reason = "Supplier payment", Recipient = "ABC Supplies", EmployeeName = "Mike Wilson", Status = "Approved" }
                }
            };
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetToday()
    {
        StartDate = DateTime.Today;
        EndDate = DateTime.Today;
        await LoadReportData();
    }

    private async Task SetThisWeek()
    {
        var today = DateTime.Today;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        StartDate = startOfWeek;
        EndDate = today;
        await LoadReportData();
    }

    private async Task SetThisMonth()
    {
        var today = DateTime.Today;
        StartDate = new DateTime(today.Year, today.Month, 1);
        EndDate = today;
        await LoadReportData();
    }

    private string GetStockTransactionBadgeClass(string transactionType)
    {
        return transactionType.ToLower() switch
        {
            "expiry" => "background-colour-light-pink",
            "theft" => "bg-warning",
            "adjustment" => "bg-info",
            _ => "bg-secondary"
        };
    }

    // Data models
    public class SalesDashboardData
    {
        public decimal TotalSales { get; set; }
        public int TotalTransactions { get; set; }
        public decimal AverageTransaction { get; set; }
        public int ItemsSold { get; set; }

        // Financial Metrics
        public decimal NetSales { get; set; }
        public decimal TotalRefunds { get; set; }
        public int RefundCount { get; set; }
        public decimal TotalPayouts { get; set; }
        public decimal VoidedSales { get; set; }
        public int VoidCount { get; set; }

        public decimal MorningSales { get; set; }
        public int MorningTransactions { get; set; }
        public decimal AfternoonSales { get; set; }
        public int AfternoonTransactions { get; set; }
        public decimal NightSales { get; set; }
        public int NightTransactions { get; set; }

        public List<EmployeePerformanceData> EmployeePerformance { get; set; } = new();
        public List<ProductSalesData> TopProducts { get; set; } = new();
        public List<ProductSalesData> LeastPopularProducts { get; set; } = new();

        public int ExpiredProductsCount { get; set; }
        public int TheftCount { get; set; }
        public int StockAdjustmentsCount { get; set; }
        public List<StockTransactionData> StockTransactions { get; set; } = new();

        // Transaction Details
        public List<RefundTransactionData> RefundTransactions { get; set; } = new();
        public List<VoidedTransactionData> VoidedTransactions { get; set; } = new();
        public List<PayoutTransactionData> PayoutTransactions { get; set; } = new();
    }

    public class EmployeePerformanceData
    {
        public string EmployeeName { get; set; } = string.Empty;
        public decimal TotalSales { get; set; }
        public int TransactionCount { get; set; }
        public int ItemsSold { get; set; }
        public TimeSpan AverageServiceTime { get; set; }
        public double AverageItemsPerTransaction { get; set; }
    }

    public class ProductSalesData
    {
        public string ProductName { get; set; } = string.Empty;
        public int QuantitySold { get; set; }
        public decimal Revenue { get; set; }
    }

    public class StockTransactionData
    {
        public DateTime TransactionDate { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public string TransactionType { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public string Reason { get; set; } = string.Empty;
        public decimal ValueImpact { get; set; }
    }

    public class RefundTransactionData
    {
        public DateTime TransactionDate { get; set; }
        public string TransactionId { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public decimal Amount { get; set; }
        public string Reason { get; set; } = string.Empty;
        public string EmployeeName { get; set; } = string.Empty;
    }

    public class VoidedTransactionData
    {
        public DateTime TransactionDate { get; set; }
        public string TransactionId { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public decimal Amount { get; set; }
        public string Reason { get; set; } = string.Empty;
        public string EmployeeName { get; set; } = string.Empty;
    }

    public class PayoutTransactionData
    {
        public DateTime TransactionDate { get; set; }
        public string PayoutId { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public string Reason { get; set; } = string.Empty;
        public string Recipient { get; set; } = string.Empty;
        public string EmployeeName { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
    }
}