@page "/sales-dashboard"
@using DataHandlerLibrary.Models
@using DataHandlerLibrary.Services
@using System.Web
@using EposRetail.Components.Pages.Shared
@using EposRetail.Models
@using EposRetail.Models.Enum
@inject DayLogServices DayLogService
@inject SalesTransactionServices SalesService
@inject SalesItemTransactionServices SalesItemService
@inject ProductServices ProductService
@inject StockTransactionServices StockService
@inject PosUserServices UserService
@inject NavigationManager NavigationManager
@inject ShiftServices ShiftServices
@inject DepartmentServices DepartmentService
@inject VoidedProductServices VoidedProductService
@inject PosUserServices PosUserService
@inject DrawerLogServices DrawerLogService
@inject DataHandlerLibrary.Interfaces.IPrinterService PrinterService
@inject IJSRuntime JSRuntime

<PageTitle>Sales Dashboard</PageTitle>

<div class="modern-dashboard">
    <!-- Header Section -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-left">
                <h1 class="dashboard-title">Shift Dashboard</h1>
                <p class="dashboard-subtitle">Real-time insights and analytics</p>
            </div>
            <div class="header-right">
                @if (!isShiftLog && !isDayLog)
                {
                    <div class="filter-buttons">
                        <button class="filter-btn active" @onclick="SetToday">Today</button>
                        <button class="filter-btn" @onclick="SetThisWeek">Weekly</button>
                        <button class="filter-btn" @onclick="SetThisMonth">Monthly</button>
                    </div>
                }

                <div class="daylog-controls">
                    <button class="modern-nav-btn" @onclick="NavigateToCheckout">
                        <div class="btn-content">
                            <i class="fas fa-arrow-left"></i>
                            <span>Back to Checkout</span>
                        </div>
                    </button>
                    <button class="modern-print-btn" @onclick="PrintReport">
                        <div class="btn-content">
                            <i class="fas fa-print"></i>
                            <span>Print Report</span>
                        </div>
                    </button>
                </div>

            </div>
        </div>
    </div>

    <!-- Date Range Filter -->
    <div class="date-filter-section">
        <div class="date-filter-card">
            <div class="date-inputs">
                <div class="input-group">
                    <label class="input-label">From</label>
                    <input type="date" class="modern-input" @bind="StartDate" @bind:event="oninput" readonly="@isShiftLog" />
                </div>
                <div class="input-group">
                    <label class="input-label">To</label>
                    <input type="date" class="modern-input" @bind="EndDate" @bind:event="oninput" readonly="@isShiftLog" />
                </div>
                @if (!isShiftLog)
                {
                    <div class="quick-filters">
                        <button class="filter-chip" @onclick="SetToday">Today</button>
                        <button class="filter-chip" @onclick="SetThisWeek">Week</button>
                        <button class="filter-chip" @onclick="SetThisMonth">Month</button>
                    </div>
                    <button class="load-btn" @onclick="LoadReportData">
                        <i class="fas fa-sync-alt"></i>
                        Update
                    </button>
                }
                else
                {
                    <div class="daylog-info">
                        <span class="daylog-label">Day Log Report</span>
                        <span class="daylog-period">@(ShiftLog?.Shift_Start_DateTime.ToString("dd/MM/yyyy HH:mm")) - @(ShiftLog?.Shift_End_DateTime?.ToString("dd/MM/yyyy HH:mm"))</span>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading sales data...</p>
        </div>
    }
    else if (SalesData != null)
    {
        <!-- Summary Cards -->
        <div class="metrics-grid">
            <div class="metric-card primary">
                <div class="metric-icon">
                    <i class="fas fa-dollar-sign"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalSales.ToString("C")</h3>
                    <p class="metric-label">Total Sales</p>
                    @*  <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+12.5%</span>
                    </div> *@
                </div>
            </div>

            <div class="metric-card net-sales">
                <div class="metric-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.NetSales.ToString("C")</h3>
                    <p class="metric-label">Net Sales</p>
                    @* <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+9.2%</span>
                    </div> *@
                </div>
            </div>

            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-cogs"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.OtherServices.ToString("C")</h3>
                    <p class="metric-label">Other Services</p>
                    <div class="metric-detail">Separate sales departments</div>
                </div>
            </div>

            <div class="metric-card refunds">
                <div class="metric-icon">
                    <i class="fas fa-undo"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalRefunds.ToString("C")</h3>
                    <p class="metric-label">Refunds</p>
                    <div class="metric-detail">@SalesData.RefundCount transactions</div>
                </div>
            </div>
            <div class="metric-card payouts">
                <div class="metric-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalPayouts.ToString("C")</h3>
                    <p class="metric-label">Payouts</p>
                    @*  <div class="metric-trend negative">
                        <i class="fas fa-arrow-down"></i>
                        <span>-2.1%</span>
                    </div> *@
                </div>
            </div>
            <div class="metric-card voided">
                <div class="metric-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.VoidedSales.ToString("C")</h3>
                    <p class="metric-label">Voided Sales</p>
                    <div class="metric-detail">@SalesData.VoidCount transactions</div>
                </div>
            </div>

            <div class="metric-card success">
                <div class="metric-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.CashPayments.ToString("C")</h3>
                    <p class="metric-label">Cash Payments</p>
                    <div class="metric-detail">@SalesData.CashTransactionCount transactions</div>
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-credit-card"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.CardPayments.ToString("C")</h3>
                    <p class="metric-label">Card Payments</p>
                    <div class="metric-detail">@SalesData.CardTransactionCount transactions</div>
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-coins"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.ChangePayments.ToString("C")</h3>
                    <p class="metric-label">Change Payments</p>
                    <div class="metric-detail">@SalesData.ChangeTransactionCount transactions</div>
                </div>
            </div>
            <div class="metric-card success">
                <div class="metric-icon">
                    <i class="fas fa-receipt"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.TotalTransactions</h3>
                    <p class="metric-label">Total Transactions</p>
                    @*  <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+8.3%</span>
                    </div> *@
                </div>
            </div>
            <div class="metric-card info">
                <div class="metric-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.AverageTransaction.ToString("C")</h3>
                    <p class="metric-label">Average Transaction</p>
                    @* <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+3.7%</span>
                    </div> *@
                </div>
            </div>
            <div class="metric-card warning">
                <div class="metric-icon">
                    <i class="fas fa-shopping-cart"></i>
                </div>
                <div class="metric-content">
                    <h3 class="metric-value">@SalesData.ItemsSold</h3>
                    <p class="metric-label">Items Sold</p>
                    @*   <div class="metric-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        <span>+15.2%</span>
                    </div> *@
                </div>
            </div>


        </div>
        <!-- Stock Transaction Reports -->
        <div class="stock-reports-section">
            <!-- Stock Metrics -->
            <div class="metrics-grid">
                <div class="metric-card danger">
                    <div class="metric-icon">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.ExpiredProductsCount</div>
                        <div class="metric-label">Expired Products</div>
                        <div class="metric-detail">Items expired in date range</div>
                    </div>
                </div>
                <div class="metric-card warning">
                    <div class="metric-icon">
                        <i class="fas fa-user-secret"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.TheftCount</div>
                        <div class="metric-label">Theft Reports</div>
                        <div class="metric-detail">Reported theft incidents</div>
                    </div>
                </div>
                <div class="metric-card info">
                    <div class="metric-icon">
                        <i class="fas fa-exchange-alt"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@SalesData.StockAdjustmentsCount</div>
                        <div class="metric-label">Stock Adjustments</div>
                        <div class="metric-detail">Total adjustments made</div>
                    </div>
                </div>
            </div>

            <!-- Stock Transactions Table -->
            @if (SalesData.StockTransactions != null && SalesData.StockTransactions.Any())
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-warehouse"></i>
                            Stock Transaction Reports
                        </h3>
                        <div class="table-controls">
                            <button class="action-btn primary">Export</button>
                            <button class="action-btn secondary">Filter</button>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Date</div>
                            <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">Product</div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Transaction Type</div>
                            <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">Quantity</div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Reason</div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Value Impact</div>
                        </div>
                        @foreach (var stock in SalesData.StockTransactions.Take(20))
                        {
                            <div class="table-row">
                                <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@stock.TransactionDate.ToString("dd/MM/yyyy HH:mm")</div>
                                <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">
                                    <div class="campaign-info">
                                        <div class="campaign-icon">
                                            <i class="fas fa-box"></i>
                                        </div>
                                        <span>@stock.ProductName</span>
                                    </div>
                                </div>
                                <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">
                                    <span class="status-badge @GetStockTransactionBadgeClass(stock.TransactionType)">
                                        @stock.TransactionType
                                    </span>
                                </div>
                                <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">@stock.Quantity</div>
                                <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">@stock.Reason</div>
                                <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@stock.ValueImpact.ToString("C")</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <!-- Department Sales Table -->
        @if (SalesData?.DepartmentSales?.Any() == true)
        {
            <div class="table-container">
                <div class="table-header">
                    <h3 class="table-title">
                        <i class="fas fa-building"></i>
                        Department Sales
                    </h3>
                    <div class="table-controls">
                        <button class="action-btn primary">Export</button>
                        <button class="action-btn secondary">View All</button>
                    </div>
                </div>
                <div class="modern-table">
                    <div class="table-row table-header-row">
                        <div class="table-cell" style="width: 30%; word-wrap: break-word; word-break: break-word;">Department</div>
                        <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Total Sales</div>
                        <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Transactions</div>
                        <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Items Sold</div>
                        <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Percentage</div>
                    </div>
                    @foreach (var dept in SalesData.DepartmentSales)
                    {
                        <div class="table-row">
                            <div class="table-cell" style="width: 30%; word-wrap: break-word; word-break: break-word;">
                                <div class="campaign-info">
                                    <div class="campaign-icon" style="background: @GetDepartmentColor(SalesData.DepartmentSales.IndexOf(dept));">
                                        <i class="fas fa-building"></i>
                                    </div>
                                    <span>@dept.DepartmentName</span>
                                </div>
                            </div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">@dept.TotalSales.ToString("C")</div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@dept.TransactionCount</div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@dept.ItemsSold</div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">@dept.Percentage.ToString("F1")%</div>
                        </div>
                    }
                </div>
            </div>
        }



        <!-- Transaction Tables -->
        <div class="tables-section">
            @if (SalesData.RefundTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-arrow-rotate-left"></i>
                            Refund Transactions
                        </h3>
                        <div class="table-controls">
                            <span class="status-badge refund">@SalesData.RefundTransactions.Count() Refunds</span>
                            <span class="status-badge amount">@SalesData.TotalRefunds.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">Transaction</div>
                            <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">Product</div>
                            <div class="table-cell" style="width: 12%; word-wrap: break-word; word-break: break-word;">Quantity</div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Employee</div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Date</div>
                            <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">Amount</div>
                        </div>
                        @foreach (var refund in SalesData.RefundTransactions)
                        {
                            <div class="table-row">
                                <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">
                                    <div class="campaign-info">
                                        <div class="campaign-icon">@refund.TransactionId.Substring(0, 2)</div>
                                        <span>@refund.TransactionId</span>
                                    </div>
                                </div>
                                <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">@refund.ProductName</div>
                                <div class="table-cell" style="width: 12%; word-wrap: break-word; word-break: break-word;">@refund.Quantity</div>
                                <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">@refund.EmployeeName</div>
                                <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@refund.TransactionDate.ToString("dd-MM-yyyy HH:mm")</div>
                                <div class="table-cell amount" style="width: 10%; word-wrap: break-word; word-break: break-word;">-@refund.Amount.ToString("C")</div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (SalesData.VoidedTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">

                        <h3 class="table-title">
                            <i class="fas fa-xmark"></i>
                            Voided Sales
                        </h3>
                        <div class="table-controls">
                            <span class="status-badge voided">@SalesData.VoidedTransactions.Count() Voids</span>
                            <span class="status-badge amount">@SalesData.VoidedSales.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">Transaction</div>
                            <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">Product</div>
                            <div class="table-cell" style="width: 12%; word-wrap: break-word; word-break: break-word;">Quantity</div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Employee</div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Date</div>
                            <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">Amount</div>
                        </div>
                        @foreach (var voided in SalesData.VoidedTransactions)
                        {
                            <div class="table-row">
                                <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">
                                    <div class="campaign-info">
                                        <div class="campaign-icon voided">@voided.TransactionId.Substring(0, 2)</div>
                                        <span>@voided.TransactionId</span>
                                    </div>
                                </div>
                                <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">@voided.ProductName</div>
                                <div class="table-cell" style="width: 12%; word-wrap: break-word; word-break: break-word;">@voided.Quantity</div>
                                <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">@voided.EmployeeName</div>
                                <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@voided.TransactionDate.ToString("dd-MM-yyyy HH:mm")</div>
                                <div class="table-cell amount" style="width: 10%; word-wrap: break-word; word-break: break-word;">@voided.Amount.ToString("C")</div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (SalesData.PayoutTransactions?.Any() == true)
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-money-bill"></i>
                            Payouts
                        </h3>
                        <div class="table-controls">
                            <span class="status-badge payout">@SalesData.PayoutTransactions.Count() Payouts</span>
                            <span class="status-badge amount">@SalesData.TotalPayouts.ToString("C")</span>
                        </div>
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">Transaction</div>
                            <div class="table-cell" style="width: 35%; word-wrap: break-word; word-break: break-word;">Description</div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Employee</div>
                            <div class="table-cell" style="width: 14%; word-wrap: break-word; word-break: break-word;">Date</div>
                            <div class="table-cell" style="width: 13%; word-wrap: break-word; word-break: break-word;">Amount</div>
                        </div>
                        @foreach (var payout in SalesData.PayoutTransactions)
                        {
                            <div class="table-row">
                                <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">
                                    <div class="campaign-info">
                                        <div class="campaign-icon payout">@payout.PayoutId.Substring(0, 2)</div>
                                        <span>@payout.PayoutId</span>
                                    </div>
                                </div>
                                <div class="table-cell" style="width: 35%; word-wrap: break-word; word-break: break-word;">@payout.Description</div>
                                <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">@payout.EmployeeName</div>
                                <div class="table-cell" style="width: 14%; word-wrap: break-word; word-break: break-word;">@payout.TransactionDate.ToString("dd-MM-yyyy HH:mm")</div>
                                <div class="table-cell amount" style="width: 13%; word-wrap: break-word; word-break: break-word;">@payout.Amount.ToString("C")</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Other Services -->
        <div class="table-container other-services">
            <div class="table-header">
                <h3 class="table-title">
                    <i class="fas fa-cogs"></i>
                    Other Services
                </h3>
                @*  <div class="table-controls">
                    <button class="action-btn primary">Export</button>
                    <button class="action-btn secondary">View All</button>
                </div> *@
            </div>
            <div class="modern-table">
                <div class="table-row table-header-row">
                    <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">Transaction</div>
                    <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">Service</div>
                    <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Quantity</div>
                    <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Amount</div>
                    <div class="table-cell" style="width: 17%; word-wrap: break-word; word-break: break-word;">Employee</div>
                    <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">Date</div>
                </div>
                @if (SalesData.OtherServicesTransactions != null)
                {
                    @foreach (var service in SalesData.OtherServicesTransactions)
                    {
                        <div class="table-row">
                            <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">
                                <div class="campaign-info">
                                    <div class="campaign-icon service">@service.TransactionId.ToString().Substring(0, 2)</div>
                                    <span>@service.TransactionId</span>
                                </div>
                            </div>
                            <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">@service.ServiceName</div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@service.Quantity</div>
                            <div class="table-cell amount" style="width: 15%; word-wrap: break-word; word-break: break-word;">@service.Amount.ToString("C")</div>
                            <div class="table-cell" style="width: 17%; word-wrap: break-word; word-break: break-word;">@service.EmployeeName</div>
                            <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">@service.TransactionDate.ToString("dd-MM-yyyy HH:mm")</div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Employee Performance -->
        <div class="table-container employee-performance">
            <div class="table-header">
                <h3 class="table-title">
                    <i class="fas fa-users"></i>
                    Employee Performance
                </h3>
                @*   <div class="table-controls">
                    <button class="action-btn primary">Export</button>
                    <button class="action-btn secondary">View All</button>
                </div> *@
            </div>
            <div class="modern-table">
                <div class="table-row table-header-row">
                    <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Employee</div>
                    <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Total Sales</div>
                    <div class="table-cell" style="width: 17%; word-wrap: break-word; word-break: break-word;">Transactions</div>
                    <div class="table-cell" style="width: 12%; word-wrap: break-word; word-break: break-word;">Items Sold</div>
                    <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">Avg. Service Time</div>
                    <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">Avg. Items per Transaction</div>
                </div>
                @if (SalesData.EmployeePerformance != null)
                {
                    @foreach (var emp in SalesData.EmployeePerformance)
                    {
                        <div class="table-row">
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">
                                <div class="campaign-info">
                                    <div class="campaign-icon">
                                        <i class="fas fa-user"></i>
                                    </div>
                                    <span>@emp.EmployeeName</span>
                                </div>
                            </div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@emp.TotalSales.ToString("C")</div>
                            <div class="table-cell" style="width: 17%; word-wrap: break-word; word-break: break-word;">@emp.TransactionCount</div>
                            <div class="table-cell" style="width: 12%; word-wrap: break-word; word-break: break-word;">@emp.ItemsSold</div>
                            <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">@emp.AverageServiceTime.ToString(@"mm\:ss")</div>
                            <div class="table-cell" style="width: 18%; word-wrap: break-word; word-break: break-word;">@emp.AverageItemsPerTransaction.ToString("F1")</div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Product Analysis -->
        <div class="product-analysis-section">
            <div class="analysis-grid">
                <!-- Top Products -->
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-trophy"></i>
                            Top 10 Popular Products
                        </h3>
                        @*  <div class="table-controls">
                            <button class="action-btn primary">View All</button>
                        </div> *@
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">#</div>
                            <div class="table-cell" style="width: 50%; word-wrap: break-word; word-break: break-word;">Product</div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">Qty Sold</div>
                            <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">Revenue</div>
                        </div>
                        @if (SalesData.TopProducts != null)
                        {
                            @for (int i = 0; i < SalesData.TopProducts.Count && i < 10; i++)
                            {
                                var product = SalesData.TopProducts[i];
                                <div class="table-row">
                                    <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">
                                        <span class="status-badge success">@(i + 1)</span>
                                    </div>
                                    <div class="table-cell" style="width: 50%; word-wrap: break-word; word-break: break-word;">
                                        <div class="campaign-info">
                                            <div class="campaign-icon">
                                                <i class="fas fa-box"></i>
                                            </div>
                                            <span>@product.ProductName</span>
                                        </div>
                                    </div>
                                    <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">@product.QuantitySold</div>
                                    <div class="table-cell" style="width: 25%; word-wrap: break-word; word-break: break-word;">@product.Revenue.ToString("C")</div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <!-- Least Popular Products -->
                <div class="table-container">
                    <div class="table-header">
                        <h3 class="table-title">
                            <i class="fas fa-exclamation-triangle"></i>
                            Least Popular Products
                        </h3>
                        @*   <div class="table-controls">
                            <button class="action-btn secondary">Analyze</button>
                        </div> *@
                    </div>
                    <div class="modern-table">
                        <div class="table-row table-header-row">
                            <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">#</div>
                            <div class="table-cell" style="width: 50%; word-wrap: break-word; word-break: break-word;">Product</div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Qty Sold</div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">Revenue</div>
                        </div>
                        @if (SalesData.LeastPopularProducts != null)
                        {
                            @for (int i = 0; i < SalesData.LeastPopularProducts.Count && i < 10; i++)
                            {
                                var product = SalesData.LeastPopularProducts[i];
                                <div class="table-row">
                                    <div class="table-cell" style="width: 10%; word-wrap: break-word; word-break: break-word;">
                                        <span class="status-badge warning">@(i + 1)</span>
                                    </div>
                                    <div class="table-cell" style="width: 50%; word-wrap: break-word; word-break: break-word;">
                                        <div class="campaign-info">
                                            <div class="campaign-icon">
                                                <i class="fas fa-box-open"></i>
                                            </div>
                                            <span>@product.ProductName</span>
                                        </div>
                                    </div>
                                    <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">@product.QuantitySold</div>
                                    <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">@product.Revenue.ToString("C")</div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>


    }

    <!-- Drawer Log Table -->
    <div class="drawer-log-section mt-4">
        <div class="section-header">
            <h3 class="section-title">
                <i class="fas fa-cash-register"></i>
                Drawer Log
            </h3>
        </div>

        @if (DrawerLogs != null && DrawerLogs.Any())
        {
            <div class="modern-table-container">
                <div class="table-wrapper">
                    <div class="table-header">
                        <div class="table-cell" style="width: 15%;">Date/Time</div>
                        <div class="table-cell" style="width: 20%;">Opened By</div>
                        <div class="table-cell" style="width: 15%;">Till</div>
                        <div class="table-cell" style="width: 15%;">Site</div>
                        <div class="table-cell" style="width: 20%;">Created By</div>
                        <div class="table-cell" style="width: 15%;">Status</div>
                    </div>

                    @foreach (var drawerLog in DrawerLogs.Take(10))
                    {
                        <div class="table-row">
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">
                                @drawerLog.DrawerOpenDateTime.ToString("dd/MM/yyyy HH:mm")
                            </div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">
                                @(drawerLog.OpenedBy?.First_Name ?? "Unknown")
                            </div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">
                                @(drawerLog.Till?.Till_Name ?? "N/A")
                            </div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">
                                @(drawerLog.Site?.Site_BusinessName ?? "N/A")
                            </div>
                            <div class="table-cell" style="width: 20%; word-wrap: break-word; word-break: break-word;">
                                @(drawerLog.Created_By?.First_Name ?? "System")
                            </div>
                            <div class="table-cell" style="width: 15%; word-wrap: break-word; word-break: break-word;">
                                <span class="status-badge active">Active</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="no-data-message">
                <i class="fas fa-info-circle"></i>
                <span>No drawer log entries found for the selected period.</span>
            </div>
        }
    </div>

    <!-- Day End Button -->
    @if (isShiftLog || isDayLog)
    {
        <div class="mt-4 text-center">
            <button class="modern-dayend-btn" @onclick="HandleDayEnd">
                <div class="btn-content">
                    <i class="fas fa-calendar-check"></i>
                    <span>@(isDayLog ? "Day End" : "Shift End")</span>
                </div>
            </button>
        </div>
    }

</div>


<GenericMessageModal IsVisible="modalState.ShowConfirmModal"
                     Title="@modalState.Title"
                     Message="@modalState.Message"
                     PrimaryButtonText="Yes"
                     SecondaryButtonText="No"
                     PrimaryAction="HandleConfirmAction"
                     SecondaryAction="CloseModal"
                     OnClose="CloseModal" />

<GenericMessageModal IsVisible="modalState.ShowPrintModal"
                     Title="@modalState.Title"
                     Message="@modalState.Message"
                     PrimaryButtonText="Yes"
                     SecondaryButtonText="No"
                     PrimaryAction="HandlePrintAction"
                     SecondaryAction="HandleNoPrintAction"
                     OnClose="CloseModal" />

@code {
    [Parameter] public bool isShiftLog { get; set; }
    [Parameter] public int? ShiftLogId { get; set; }
    [Parameter] public int? ShiftId { get; set; }

    [Parameter] public bool isDayLog { get; set; }
    [Parameter] public int? DayLogId { get; set; }

    private DayLog DayLog { get; set; } = new();
    private Shift ShiftLog { get; set; } = new();
    private SalesDashboardData SalesData = new();
    private List<DrawerLog> DrawerLogs = new();
    private DateTime StartDate = DateTime.Today;
    private DateTime EndDate = DateTime.Today;
    private bool IsLoading = false;

    // Modal state variables
    private ModalState modalState = new ModalState();
   


    protected override async Task OnInitializedAsync()
    {
        // Parse query parameters
        var uri = NavigationManager.Uri;
        var queryParameters = System.Web.HttpUtility.ParseQueryString(new Uri(uri).Query);

        // Check for isShiftLog parameter
        if (queryParameters["isShiftLog"] != null && bool.TryParse(queryParameters["isShiftLog"], out bool ShiftLogParam))
        {
            isShiftLog = ShiftLogParam;
        }

        // Check for isDayLog parameter
        if (queryParameters["isDayLog"] != null && bool.TryParse(queryParameters["isDayLog"], out bool dayLogParam))
        {
            isDayLog = dayLogParam;
        }

        // Handle specific DayLogId parameter
        if (DayLogId.HasValue)
        {
            isDayLog = true;
            DayLog = await DayLogService.GetByIdAsync(DayLogId.Value);
            if (DayLog != null)
            {
                StartDate = DayLog.DayLog_Start_DateTime.Date.ToUniversalTime();
                EndDate = DayLog.DayLog_End_DateTime?.Date.ToUniversalTime() ?? DateTime.Today.ToUniversalTime();
            }
            else
            {
                // Fallback if daylog not found
                StartDate = DateTime.Today.ToUniversalTime();
                EndDate = DateTime.Today.AddDays(1).ToUniversalTime();
            }
        }
        else if (isDayLog)
        {
            // Get the last daylog and set dates based on it
            DayLog = await DayLogService.GetLastDayLog();
            if (DayLog != null)
            {
                StartDate = DayLog.DayLog_Start_DateTime.Date.ToUniversalTime();
                EndDate = DayLog.DayLog_End_DateTime?.Date.ToUniversalTime() ?? DateTime.Today.ToUniversalTime();
            }
            else
            {
                // Fallback if no daylog found
                StartDate = DateTime.Today.ToUniversalTime();
                EndDate = DateTime.Today.AddDays(1).ToUniversalTime();
            }
        }
        else
        {
            // Set start and end date as today
            StartDate = DateTime.Today.ToUniversalTime();
            EndDate = DateTime.Today.AddDays(1).ToUniversalTime();
        }

        // Check for filter parameter
        var filter = queryParameters["filter"];
        if (filter == "today")
        {
            await SetToday();
            return;
        }

        // Handle specific ShiftLogId parameter
        if (ShiftLogId.HasValue)
        {
            isShiftLog = true;
            ShiftLog = await ShiftServices.GetByIdAsync(ShiftLogId.Value);
            if (ShiftLog != null)
            {
                StartDate = ShiftLog.Shift_Start_DateTime.Date.ToUniversalTime();
                EndDate = ShiftLog.Shift_End_DateTime?.Date.ToUniversalTime() ?? DateTime.Today.ToUniversalTime();
            }
            else
            {
                // Fallback if ShiftLog not found
                StartDate = DateTime.Today.ToUniversalTime();
                EndDate = DateTime.Today.AddDays(1).ToUniversalTime();
            }
        }
        else if (isShiftLog)
        {
            // Get the last ShiftLog and set dates based on it
            ShiftLog = await ShiftServices.GetLastShiftLog();
            if (ShiftLog != null)
            {
                StartDate = ShiftLog.Shift_Start_DateTime.Date.ToUniversalTime();
                EndDate = ShiftLog.Shift_End_DateTime?.Date.ToUniversalTime() ?? DateTime.Today.ToUniversalTime();
            }
            else
            {
                // Fallback if no ShiftLog found
                StartDate = DateTime.Today.ToUniversalTime();
                EndDate = DateTime.Today.AddDays(1).ToUniversalTime();
            }

        }
        else
        {
            // Set start and end date as today
            StartDate = DateTime.Today.ToUniversalTime();
            EndDate = DateTime.Today.AddDays(1).ToUniversalTime();
        }

        await LoadReportData();
    }

    private async Task LoadReportData()
    {
        IsLoading = true;
        StateHasChanged();
        IEnumerable<SalesTransaction> salesTransactions = Enumerable.Empty<SalesTransaction>();
        IEnumerable<StockTransaction> stockTransactions = Enumerable.Empty<StockTransaction>();

        try
        {
            // Get ShiftLog ID for filtering if isShiftLog is true
            int? ShiftLogId = null;
            int? dayLogId = null;
            if (isShiftLog && ShiftLog != null)
            {
                ShiftLogId = ShiftLog.Shift_Id;
                salesTransactions = await SalesService.GetByConditionAsync(t => t.Shift_ID == ShiftLogId, true);

                stockTransactions = await StockService.GetByConditionAsync(
                    st => st.Shift_Id == ShiftLogId
                          , true);
            }
            else if (isDayLog && DayLog != null)
            {
                dayLogId = DayLog.DayLog_Id;
                salesTransactions = await SalesService.GetByConditionAsync(t => t.DayLog_Id == dayLogId, true);

                stockTransactions = await StockService.GetByConditionAsync(
                    st => st.DayLogId == dayLogId
                          , true);
            }
            else
            {
                salesTransactions = await SalesService.GetByConditionAsync(
                    t => t.Sale_Date >= StartDate && t.Sale_Date <= EndDate, false);
                // Load stock transactions for the date range
                stockTransactions = await StockService.GetByConditionAsync(
                   st => st.TransactionDate >= StartDate && st.TransactionDate <= EndDate
                         , true);
            }

            // Calculate Other Services (departments with Separate_Sales_In_Reports = true)
            var allDepartments = await DepartmentService.GetAllAsync(false);

            //Calculate Financial Metrics
            var cashpayment = salesTransactions.Sum(t => t.SaleTransaction_Cash);

            var cashPaymentCount = salesTransactions.Where(t => t.SaleTransaction_Cash > 0).Count();

            var cardPayment = salesTransactions.Sum(t => t.SaleTransaction_Card);

            var cardPaymentCount = salesTransactions.Where(t => t.SaleTransaction_Card > 0).Count();

            var changePayment = salesTransactions.Sum(t => t.SaleTransaction_Change);

            var changePaymentCount = salesTransactions.Where(t => t.SaleTransaction_Change > 0).Count();

            // Load sales item transactions for detailed analysis
            var salesTransactionIds = salesTransactions.Select(t => t.SaleTransaction_ID).ToList();
            var salesItemTransactions = await SalesItemService.GetByConditionAsync(
                item => salesTransactionIds.Contains(item.SaleTransaction_ID), true);

            // Calculate basic metrics
            var totalSales = salesItemTransactions.Where(i => i.SalesItemTransactionType != SalesItemTransactionType.Payout && i.SalesItemTransactionType != SalesItemTransactionType.Refund).Sum(t => t.Product_Total_Amount);
            var totalTransactions = salesTransactions.Count();
            var averageTransaction = totalTransactions > 0 ? totalSales / totalTransactions : 0;
            var itemsSold = salesItemTransactions.Where(item => item.SalesItemTransactionType != SalesItemTransactionType.Refund).Sum(item => item.Product_QTY);

            // Calculate refunds
            var refundItems = salesItemTransactions.Where(t => t.SalesItemTransactionType == SalesItemTransactionType.Refund).ToList();
            var totalRefunds = refundItems.Sum(t => t.Product_Total_Amount);
            var refundCount = refundItems.Count;

            // Calculate payouts
            var payoutItems = salesItemTransactions.Where(item => item.SalesItemTransactionType == SalesItemTransactionType.Payout).ToList();
            var totalPayouts = payoutItems.Sum(item => item.Product_Total_Amount);

            // Get voided products using VoidedProductServices
            IEnumerable<VoidedProduct> voidedProducts = Enumerable.Empty<VoidedProduct>();
            if (isShiftLog && ShiftLog != null)
            {
                // Use ShiftLog filtering for voided products
                voidedProducts = await VoidedProductService.GetByConditionAsync(
                    vp => vp.Void_Date >= ShiftLog.Shift_Start_DateTime &&
                          vp.Void_Date <= (ShiftLog.Shift_End_DateTime ?? DateTime.Now.ToUniversalTime()), true);
            }
            else
            {
                // Use date range filtering for voided products
                voidedProducts = await VoidedProductService.GetByConditionAsync(
                    vp => vp.Void_Date >= StartDate && vp.Void_Date <= EndDate, true);
            }

            var voidedSales = voidedProducts.Sum(vp => vp.Voided_Amount);
            var voidCount = voidedProducts.Count();

            // Load drawer logs
            if (isShiftLog && ShiftLog != null)
            {
                // Use ShiftLog filtering for drawer logs
                DrawerLogs = (await DrawerLogService.GetByConditionAsync(
                    dl => dl.DrawerOpenDateTime >= ShiftLog.Shift_Start_DateTime &&
                          dl.DrawerOpenDateTime <= (ShiftLog.Shift_End_DateTime ?? DateTime.Now.ToUniversalTime()), true))
                    .OrderByDescending(dl => dl.DrawerOpenDateTime)
                    .ToList();
            }
            else
            {
                // Use date range filtering for drawer logs
                DrawerLogs = (await DrawerLogService.GetByConditionAsync(
                    dl => dl.DrawerOpenDateTime >= StartDate && dl.DrawerOpenDateTime <= EndDate, true))
                    .OrderByDescending(dl => dl.DrawerOpenDateTime)
                    .ToList();
            }

            // Calculate net sales
            var netSales = totalSales + totalRefunds;

            // // Calculate time-based sales
            // var morningSales = salesTransactions.Where(t => !t.Is_Refund && t.Sale_Date.Hour < 12).Sum(t => t.SaleTransaction_Total_Amount);
            // var morningTransactions = salesTransactions.Count(t => !t.Is_Refund && t.Sale_Date.Hour < 12);
            // var afternoonSales = salesTransactions.Where(t => !t.Is_Refund && t.Sale_Date.Hour >= 12 && t.Sale_Date.Hour < 18).Sum(t => t.SaleTransaction_Total_Amount);
            // var afternoonTransactions = salesTransactions.Count(t => !t.Is_Refund && t.Sale_Date.Hour >= 12 && t.Sale_Date.Hour < 18);
            // var nightSales = salesTransactions.Where(t => !t.Is_Refund && t.Sale_Date.Hour >= 18).Sum(t => t.SaleTransaction_Total_Amount);
            // var nightTransactions = salesTransactions.Count(t => !t.Is_Refund && t.Sale_Date.Hour >= 18);

            var posusers = await PosUserService.GetAllAsync(false);

            // Calculate employee performance
            var employeePerformance = salesTransactions
                .Where(t => t?.Created_By_Id != null)
                .GroupBy(t => t.Created_By_Id)
                .Select(g => new EmployeePerformanceData
                {
                    EmployeeName = posusers?.FirstOrDefault(p => p.User_ID == g.Key)?.First_Name ?? "Unknown",
                    TotalSales = g.Sum(t => t.SaleTransaction_Total_Amount),
                    TransactionCount = g.Count(),
                    ItemsSold = g.SelectMany(t => t.SalesItemTransactions ?? new List<SalesItemTransaction>()).Sum(item => item.Product_QTY),
                    AverageServiceTime = g.Any(t => t.Sale_Date > t.Sale_Start_Date)
                        ? TimeSpan.FromTicks((long)g.Where(t => t.Sale_Date > t.Sale_Start_Date)
                            .Average(t => (t.Sale_Date - t.Sale_Start_Date).Ticks))
                        : TimeSpan.Zero,
                    AverageItemsPerTransaction = g.Count() > 0 ? (double)g.SelectMany(t => t.SalesItemTransactions ?? new List<SalesItemTransaction>()).Sum(item => item.Product_QTY) / g.Count() : 0
                })
                .OrderByDescending(e => e.TotalSales)
                .Take(10)
                .ToList();

            // Calculate top products
            var topProducts = salesItemTransactions
                .Where(item => item.SalesItemTransactionType == SalesItemTransactionType.Sale)
                .GroupBy(item => item.Product)
                .Select(g => new ProductSalesData
                {
                    ProductName = g.Key.Product_Name,
                    QuantitySold = g.Sum(item => item.Product_QTY),
                    Revenue = g.Sum(item => item.Product_Total_Amount)
                })
                .OrderByDescending(p => p.Revenue)
                .Take(5)
                .ToList();

            // Calculate least popular products (products with low sales)
            var leastPopularProducts = salesItemTransactions
                .Where(item => item.SalesItemTransactionType == SalesItemTransactionType.Sale)
                .GroupBy(item => item.Product)
                .Select(g => new ProductSalesData
                {
                    ProductName = g.Key.Product_Name,
                    QuantitySold = g.Sum(item => item.Product_QTY),
                    Revenue = g.Sum(item => item.Product_Total_Amount)
                })
                .OrderBy(p => p.QuantitySold)
                .Take(4)
                .ToList();

            // Calculate stock transaction counts
            var expiredProductsCount = stockTransactions.Count(st => st.StockTransactionType == DataHandlerLibrary.Models.StockTransferType.Expired);
            var theftCount = stockTransactions.Count(st => st.StockTransactionType == DataHandlerLibrary.Models.StockTransferType.Theft);
            var stockAdjustmentsCount = stockTransactions.Count(st => st.StockTransactionType != StockTransferType.Expired && st.StockTransactionType != StockTransferType.Theft);

            // Get recent stock transactions
            var recentStockTransactions = stockTransactions
                .OrderByDescending(st => st.TransactionDate)
                .Take(10)
                .Select(st => new StockTransactionData
                {
                    TransactionDate = st.TransactionDate,
                    ProductName = st.Product?.Product_Name ?? "Unknown Product",
                    TransactionType = st.StockTransactionType.ToString(),
                    Quantity = st.Quantity,
                    Reason = "",
                    ValueImpact = st.TotalAmount
                })
                .ToList();



            // Replace the problematic block with the following correct LINQ query
            var refundTransactionDetails = refundItems
                .Select(item => new RefundTransactionData
                {
                    TransactionDate = item.SalesTransaction.Sale_Date,
                    TransactionId = $"TXN{item.SalesTransaction.SaleTransaction_ID:D6}",
                    ProductName = item.Product?.Product_Name ?? "Unknown Product",
                    Quantity = item.Product_QTY,
                    Amount = item.Product_Total_Amount,
                    Reason = "Refund", // You might want to add a reason field to your model
                    EmployeeName = item.SalesTransaction.Created_By?.First_Name ?? "Unknown"
                })
                .OrderByDescending(r => r.TransactionDate)
                .Take(10)
                .ToList();

            // Get voided transaction details
            var voidedTransactionDetails = voidedProducts
                .Select(vp => new VoidedTransactionData
                {
                    TransactionDate = vp.Void_Date,
                    TransactionId = $"VOID{vp.VoidedProduct_ID:D6}",
                    ProductName = vp.Product?.Product_Name ?? "Unknown Product",
                    Quantity = vp.Voided_Quantity,
                    Amount = vp.Voided_Amount,
                    Reason = vp.Additional_Notes ?? "Voided",
                    EmployeeName = vp.VoidedByUser?.First_Name ?? "Unknown"
                })
                .OrderByDescending(v => v.TransactionDate)
                .Take(10)
                .ToList();

            // Get payout transaction details
            var payoutTransactionDetails = payoutItems
                .Select(item => new PayoutTransactionData
                {
                    TransactionDate = item.SalesTransaction.Sale_Date,
                    PayoutId = $"PAY{item.SalesPayout?.Payout_Id:D3}",
                    Amount = item.Product_Total_Amount,
                    Description = item.SalesPayout?.Payout_Description ?? "Payout",
                    Recipient = "Till", // You might want to add recipient information to your model
                    EmployeeName = salesTransactions.FirstOrDefault(t => t.SaleTransaction_ID == item.SaleTransaction_ID)?.Created_By?.First_Name ?? "Unknown",
                    Status = "Completed"
                })
                .OrderByDescending(p => p.TransactionDate)
                .Take(10)
                .ToList();

            // Calculate department sales
            var departmentSales = salesItemTransactions
                .Where(item => item.SalesItemTransactionType != SalesItemTransactionType.Refund &&
                    item.SalesItemTransactionType != SalesItemTransactionType.Payout && item.Product?.Department_ID != null)
                .GroupBy(item => item.Product?.Department_ID)
                .Select(group => new DepartmentSalesData
                {
                    DepartmentName = allDepartments.FirstOrDefault(d => d.Department_ID == group.Key)?.Department_Name ?? "Unknown Department",
                    TotalSales = group.Sum(item => item.Product_Total_Amount),
                    TransactionCount = group.Select(item => item.SaleTransaction_ID).Distinct().Count(),
                    ItemsSold = group.Sum(item => item.Product_QTY)
                })
                .OrderByDescending(d => d.TotalSales)
                .ToList();

            // Calculate percentages for department sales
            var totalDepartmentSales = departmentSales.Sum(d => d.TotalSales);
            foreach (var dept in departmentSales)
            {
                dept.Percentage = totalDepartmentSales > 0 ? (dept.TotalSales / totalDepartmentSales) * 100 : 0;
            }


            var separateSalesDepartmentIds = allDepartments
                .Where(d => d.Separate_Sales_In_Reports)
                .Select(d => d.Department_ID)
                .ToList();

            // Calculate Other Services excluding payouts
            var otherServices = salesItemTransactions
                .Where(item => item.Product?.Department_ID != null &&
                              separateSalesDepartmentIds.Contains(item.Product.Department_ID) &&
                              item.SalesPayout_ID == null) // Exclude payout transactions
                .Sum(item => item.Product_Total_Amount);

            // Get Other Services transaction details
            var otherServicesTransactionDetails = salesItemTransactions
                .Where(item => item.SalesItemTransactionType == SalesItemTransactionType.Service)
                .Select(item => new OtherServicesTransactionData
                {
                    TransactionDate = item.SalesTransaction.Sale_Date,
                    TransactionId = $"SRV{item.SaleTransaction_Item_ID:D6}",
                    ServiceName = item.Product?.Product_Name ?? "Unknown Service",
                    DepartmentName = allDepartments.FirstOrDefault(d => d.Department_ID == item.Product.Department_ID)?.Department_Name ?? "Unknown Department",
                    Quantity = item.Product_QTY,
                    Amount = item.Product_Total_Amount,
                    EmployeeName = salesTransactions.FirstOrDefault(t => t.SaleTransaction_ID == item.SaleTransaction_ID)?.Created_By?.First_Name ?? "Unknown",
                    Status = "Completed"
                })
                .OrderByDescending(s => s.TransactionDate)
                .Take(10)
                .ToList();

            SalesData = new SalesDashboardData
            {
                // Date Range
                StartDate = StartDate,
                EndDate = EndDate,

                TotalSales = totalSales,
                TotalTransactions = totalTransactions,
                AverageTransaction = averageTransaction,
                ItemsSold = itemsSold,

                // Financial Metrics
                NetSales = netSales,
                TotalRefunds = totalRefunds,
                RefundCount = refundCount,
                TotalPayouts = totalPayouts,
                VoidedSales = voidedSales,
                VoidCount = voidCount,

                //Payment Metrics
                CashPayments = cashpayment,
                CardPayments = cardPayment,
                ChangePayments = changePayment,

                //Payment count Metrics
                CashTransactionCount = cashPaymentCount,
                CardTransactionCount = cardPaymentCount,
                ChangeTransactionCount = changePaymentCount,
                OtherServices = otherServices,

                // Payment Methods
                PaymentMethods = new List<PaymentMethodData>
                {
                    new PaymentMethodData { PaymentMethod = "Cash", TotalAmount = cashpayment, TransactionCount = cashPaymentCount },
                    new PaymentMethodData { PaymentMethod = "Card", TotalAmount = cardPayment, TransactionCount = cardPaymentCount },
                    new PaymentMethodData { PaymentMethod = "Change", TotalAmount = changePayment, TransactionCount = changePaymentCount }
                },

                // // VAT Summary (placeholder - would need actual VAT calculation logic)
                // VatSummary = new List<VatSummaryData>
                // {
                //     new VatSummaryData { Rate = 20.0m, NetAmount = netSales * 0.8333m, VatAmount = netSales * 0.1667m, GrossAmount = netSales }
                // },

                // // Time-based sales
                // MorningSales = morningSales,
                // MorningTransactions = morningTransactions,
                // AfternoonSales = afternoonSales,
                // AfternoonTransactions = afternoonTransactions,
                // NightSales = nightSales,
                // NightTransactions = nightTransactions,

                // Employee performance
                EmployeePerformance = employeePerformance,

                // Top products
                TopProducts = topProducts,

                // Least popular products
                LeastPopularProducts = leastPopularProducts,

                // Stock transactions
                ExpiredProductsCount = expiredProductsCount,
                TheftCount = theftCount,
                StockAdjustmentsCount = stockAdjustmentsCount,
                StockTransactions = recentStockTransactions,

                // Transaction Details
                RefundTransactions = refundTransactionDetails,
                VoidedTransactions = voidedTransactionDetails,
                PayoutTransactions = payoutTransactionDetails,
                OtherServicesTransactions = otherServicesTransactionDetails,

                // Department Sales
                DepartmentSales = departmentSales
            };
        }
        catch (Exception ex)
        {
            // Log the error and show a user-friendly message
            Console.WriteLine($"Error loading sales data: {ex.Message}");
            // You might want to show a toast notification or error message to the user
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetToday()
    {
        StartDate = DateTime.Today.ToUniversalTime();
        EndDate = DateTime.Today.AddDays(1).ToUniversalTime();
        await LoadReportData();
    }

    private async Task SetThisWeek()
    {
        var today = DateTime.Today.ToUniversalTime();
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek).ToUniversalTime();
        StartDate = startOfWeek.ToUniversalTime();
        EndDate = today.ToUniversalTime();
        await LoadReportData();
    }

    private async Task SetThisMonth()
    {
        var today = DateTime.Today.ToUniversalTime();
        StartDate = new DateTime(today.Year, today.Month, 1).ToUniversalTime();
        EndDate = today.ToUniversalTime();
        await LoadReportData();
    }

    private string GetStockTransactionBadgeClass(string transactionType)
    {
        return transactionType.ToLower() switch
        {
            "expiry" => "background-colour-light-pink",
            "theft" => "bg-warning",
            "adjustment" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetDepartmentColor(int index)
    {
        var colors = new string[]
        {
            "#6366f1", // Blue
            "#8b5cf6", // Purple
            "#06b6d4", // Cyan
            "#10b981", // Green
            "#f59e0b", // Orange
            "#ef4444", // Red
            "#84cc16", // Lime
            "#ec4899"  // Pink
        };
        return colors[index % colors.Length];
    }

    private async Task PrintReport()
    {
        try
        {
            if (SalesData != null && PrinterService.IsInitialized)
            {
                // Use the printer service with pre-calculated data
                await PrinterService.PrintSalesReport(SalesData, "Sales Dashboard Report");
                await JSRuntime.InvokeVoidAsync("alert", "Sales report printed successfully!");
            }
            else if (SalesData != null)
            {
                // Fallback to browser print if printer service is not initialized
                await JSRuntime.InvokeVoidAsync("alert", "Printer service not initialized. Using browser print...");
                await JSRuntime.InvokeVoidAsync("window.print");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "No sales data available to print. Please load the report first.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error printing report: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error printing report: {ex.Message}");
        }
    }

    private void NavigateToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }

    private void HandleDayEnd()
    {
        if (isDayLog)
        {
            modalState.ShowConfirmation(
                "End Day",
                "Are you sure you want to end the day? This action cannot be undone.",
                ActionType.DayEnd
            );
        }
        else if (isShiftLog)
        {
            modalState.ShowConfirmation(
                "End Shift",
                "Are you sure you want to end the shift?",
                ActionType.ShiftEnd
            );
        }
        StateHasChanged();
    }

    private void HandleConfirmAction()
    {
        modalState.ShowConfirmModal = false;
        string title = "Print Report";
        string message = $"Would you like to print the {(modalState.ActionType == ActionType.DayEnd ? "day end" : "shift")} report?";
        modalState.ShowPrintDialog(title, message, modalState.ActionType);
        StateHasChanged();
    }



    private void HandlePrintAction()
    {
        switch (modalState.ActionType)
        {
            case ActionType.DayEnd:
                PrintDayEndReport();
                break;
            case ActionType.ShiftEnd:
                PrintShiftReport();
                break;
        }
        modalState.CloseAll();
        StateHasChanged();
    }

    private void HandleNoPrintAction()
    {
        switch (modalState.ActionType)
        {
            case ActionType.DayEnd:
                // Backup database, clear session, navigate to login
                BackupDatabase();
                ClearSessionMemory();
                NavigationManager.NavigateTo("/login");
                break;
            case ActionType.ShiftEnd:
                // Handle shift end without printing
                CompleteShiftEnd();
                break;
        }
        modalState.CloseAll();
        StateHasChanged();
    }

    // Helper methods for different actions
    private void PrintDayEndReport()
    {
        // Print day end report logic
        if (PrinterService.IsInitialized)
        {
            PrinterService.PrintDayEndReport(SalesData);
        }
        // After printing, backup and navigate
        BackupDatabase();
        ClearSessionMemory();
        NavigationManager.NavigateTo("/login");
    }

    private void PrintShiftReport()
    {
        // Print shift report logic
        if (PrinterService.IsInitialized)
        {
            // TODO: Add shift report printing
            // PrinterService.PrintShiftReport(SalesData);
        }
        CompleteShiftEnd();
    }

    private void CompleteShiftEnd()
    {
        // Complete shift end logic
    }

    private void BackupDatabase()
    {
        // TODO: Database backup logic
    }

    private void ClearSessionMemory()
    {
        // TODO: Clear session memory logic
    }

    private void CloseModal()
    {
        modalState.CloseAll();
        StateHasChanged();
    }


}



